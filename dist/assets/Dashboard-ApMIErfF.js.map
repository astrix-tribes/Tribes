{"version":3,"file":"Dashboard-ApMIErfF.js","sources":["../../src/screens/Dashboard.tsx"],"sourcesContent":["import React, { useCallback, useMemo, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Plus } from 'lucide-react';\nimport { FeedLayout } from '../components/layout/FeedLayout';\nimport { UnifiedFeed } from '../components/feed/UnifiedFeed';\nimport { usePostsManagement } from '../hooks/usePostsManagement';\nimport { useNetwork } from '../hooks/useNetwork';\nimport { setCreatingPost, resetDraft } from '../store/slices/postsSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Post, PostType } from '../types/post';\nimport CreatePostModal from '../components/posts/CreatePostModal';\nimport type { FeedItem } from '../types/feed';\nimport { useProfile } from '../hooks/useProfile';\nimport { useAuth } from '../hooks/useAuth';\nimport { Address } from 'viem';\nimport { useTribesData } from '../hooks/useTribesData';\nimport { selectCreatingPost } from '../store/slices/postsSlice';\n\nexport function Dashboard() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { chainId } = useNetwork();\n  const { posts, loading, error, fetchFeed } = usePostsManagement();\n  const { profile } = useProfile();\n  const { address } = useAuth();\n  const { tribes, isLoading: tribesLoading } = useTribesData();\n  const [selectedTribeId, setSelectedTribeId] = useState<string | null>(null);\n  const isCreatingPost = useSelector(selectCreatingPost);\n\n  // Debug tribes data to check for loading issues\n  useEffect(() => {\n    if (tribes?.length > 0) {\n      console.log('Dashboard - Loaded Tribes:', tribes);\n    } else if (tribesLoading) {\n      console.log('Dashboard - Tribes still loading...');\n    } else {\n      console.log('Dashboard - No tribes available or loading error');\n    }\n  }, [tribes, tribesLoading]);\n\n  // Fetch posts on component mount\n  useEffect(() => {\n    if (address) {\n      console.log('Fetching feed for address:', address);\n      fetchFeed().catch(error => {\n        console.error('Error fetching feed:', error);\n      });\n    }\n  }, [fetchFeed, address]);\n\n  // Filter posts by selected tribe\n  const filteredFeedItems = useMemo(() => {\n    if (!posts) return [];\n    \n    // Debug: Log posts to see what we're working with\n    console.log(\"Dashboard posts:\", Object.values(posts));\n    \n    // Convert posts object to array and ensure all posts have a type\n    let items = Object.values(posts).map(post => {\n      // Ensure post has a type, defaulting to TEXT (0) if not present\n      if (post.type === undefined) {\n        console.warn(`Post ${post.id} has no type, defaulting to TEXT`);\n        return {\n          ...post,\n          type: PostType.TEXT\n        };\n      }\n      return post;\n    });\n    \n    // Filter by selected tribe if one is selected\n    if (selectedTribeId) {\n      items = items.filter(post => post.tribeId?.toString() === selectedTribeId);\n    }\n    \n    return items;\n  }, [posts, selectedTribeId]);\n\n  // Handler for opening the create post modal\n  const handleCreatePost = useCallback(() => {\n    console.log('[Dashboard]: Opening create post modal');\n    dispatch(setCreatingPost(true));\n  }, [dispatch]);\n\n  // Handler for post click\n  const handlePostClick = useCallback((post: any) => {\n    // Navigate to post detail page or handle post interaction\n    console.log('Post clicked:', post);\n  }, []);\n\n  // Handle tribe selection for filtering\n  const handleTribeSelect = useCallback((tribeId: string | null) => {\n    setSelectedTribeId(tribeId);\n  }, []);\n\n  // Handle post creation success\n  const handlePostCreationSuccess = useCallback((postId: string) => {\n    console.log('Post created successfully:', postId);\n    // Close the modal\n    dispatch(setCreatingPost(false));\n    // Reset the draft\n    dispatch(resetDraft());\n    // Refresh the feed to show the new post\n    fetchFeed();\n  }, [dispatch, fetchFeed]);\n\n  // Auto-close modal when post creation is complete\n  useEffect(() => {\n    if (!isCreatingPost) {\n      // If the modal is closed, refresh the feed to show new posts\n      fetchFeed();\n    }\n  }, [isCreatingPost, fetchFeed]);\n\n  // Add this effect to log state changes\n  useEffect(() => {\n    console.log('[Dashboard]: isCreatingPost state changed:', isCreatingPost);\n  }, [isCreatingPost]);\n\n  // Add this at the top of your Dashboard component\n  useEffect(() => {\n    // Clear the prefetch flag\n    localStorage.removeItem('dashboard_prefetch');\n    \n    // Measure and log performance\n    if (window.performance) {\n      const navTiming = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      console.log('Dashboard load time:', navTiming.domContentLoadedEventEnd - navTiming.startTime, 'ms');\n    }\n  }, []);\n\n  // Render tribe filter options\n  const renderTribeFilters = () => {\n    if (tribesLoading) {\n      return <div className=\"text-sm text-gray-400\">Loading tribes...</div>;\n    }\n\n    if (!tribes || tribes.length === 0) {\n      return <div className=\"text-sm text-gray-400\">No tribes available</div>;\n    }\n\n    return (\n      <div className=\"flex flex-wrap gap-2 mb-4\">\n        <button\n          onClick={() => handleTribeSelect(null)}\n          className={`px-3 py-1 rounded-full text-sm ${\n            selectedTribeId === null \n              ? 'bg-[#4ADE80] text-black' \n              : 'bg-gray-800 text-gray-300 hover:bg-gray-700'\n          }`}\n        >\n          All Tribes\n        </button>\n        {tribes.map(tribe => (\n          <button\n            key={tribe.id}\n            onClick={() => handleTribeSelect(tribe.id.toString())}\n            className={`px-3 py-1 rounded-full text-sm ${\n              selectedTribeId === tribe.id.toString() \n                ? 'bg-[#4ADE80] text-black' \n                : 'bg-gray-800 text-gray-300 hover:bg-gray-700'\n            }`}\n          >\n            {tribe.name}\n          </button>\n        ))}\n      </div>\n    );\n  };\n\n  const renderFeed = () => {\n    if (loading) {\n      return <div>Loading...</div>;\n    }\n\n    if (error) {\n      return <div>Error: {error.toString()}</div>;\n    }\n\n    if (filteredFeedItems.length === 0) {\n      return (\n        <div className=\"text-center py-12\">\n          <h3 className=\"text-lg font-medium text-white mb-2\">No posts yet</h3>\n          <p className=\"text-gray-400 mb-6\">\n            {selectedTribeId \n              ? 'No posts in this tribe yet. Be the first to post!' \n              : 'Your feed is empty. Start by creating a post or joining tribes.'}\n          </p>\n          <button\n            onClick={handleCreatePost}\n            className=\"inline-flex items-center px-4 py-2 bg-[#4ADE80] text-black rounded-lg hover:bg-[#4ADE80]/90 transition-colors\"\n          >\n            <Plus className=\"w-5 h-5 mr-2\" />\n            Create Post\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <UnifiedFeed \n        items={filteredFeedItems}\n        loading={loading}\n        showCreateButton={true}\n        onItemClick={handlePostClick}\n      />\n    );\n  };\n\n  // Add this log to the render function\n  console.log('[Dashboard]: Rendering with isCreatingPost =', isCreatingPost);\n\n  return (\n    <FeedLayout>\n      {/* Tribe filters */}\n      {renderTribeFilters()}\n      \n      {renderFeed()}\n      \n      {/* Floating Action Button for creating posts */}\n      <div className=\"fixed bottom-20 right-6 z-10\">\n        <button\n          onClick={handleCreatePost}\n          className=\"flex items-center justify-center w-14 h-14 rounded-full bg-[#4ADE80] text-black shadow-lg hover:bg-[#4ADE80]/90 transition-colors\"\n          aria-label=\"Create post\"\n        >\n          <Plus className=\"w-6 h-6\" />\n        </button>\n      </div>\n      \n      <CreatePostModal \n        tribeId={selectedTribeId || (profile?.tokenId?.toString() || \"1\")} \n        onSuccess={handlePostCreationSuccess}\n        isOpen={isCreatingPost}\n      />\n    </FeedLayout>\n  );\n}\n\nexport default Dashboard; "],"names":["Dashboard","useNavigate","dispatch","useDispatch","useNetwork","posts","loading","error","fetchFeed","usePostsManagement","profile","useProfile","address","useAuth","tribes","tribesLoading","useTribesData","selectedTribeId","setSelectedTribeId","useState","isCreatingPost","useSelector","selectCreatingPost","useEffect","filteredFeedItems","useMemo","items","post","PostType","_a","handleCreatePost","useCallback","setCreatingPost","handlePostClick","handleTribeSelect","tribeId","handlePostCreationSuccess","postId","resetDraft","navTiming","renderTribeFilters","jsxDEV","tribe","renderFeed","Plus","UnifiedFeed","FeedLayout","CreatePostModal"],"mappings":"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"}