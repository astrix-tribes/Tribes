{"version":3,"mappings":"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","names":["FUSE_EMBER_DECIMAL","SOMNIA_TESTNET_DECIMAL","ABSTRACT_MAINNET_DECIMAL","ABSTRACT_TESTNET_DECIMAL","MONAD_TESTNET","defineChain","SOMNIA_TESTNET","FUSE_EMBER","CHILIZ_MAINNET","MANTA_TESTNET","ARBITRUM_SEPOLIA_TESTNET","ABSTRACT_MAINNET","ABSTRACT_TESTNET","SUPPORTED_CHAINS","getEthereumProvider","error","ABIS","ProfileNFTMinterABI","TribeControllerABI","CollectibleControllerABI","EventControllerABI","CommunityPointsABI","VotingABI","RoleManagerABI","SuperCommunityControllerABI","ContentManagerABI","PostMinterABI","CONTRACT_ADDRESSES","getContractAddresses","chainId","addresses","getCurrentChain","chain","getAddresses","getPublicClient","createPublicClient","http","getWalletClient","provider","account","createWalletClient","custom","getContracts","viemGetPublicClient","configGetContracts","contractsGetContractAddresses","getCurrentChainId","chainIdHex","requestError","getChainConfig","c","extractMetadataFromTransaction","tribeId","publicClient","tribeController","events","waitForTransaction","txHash","blockchain","ethers","__vitePreload","n","params","signer","abis","contractWithSigner","userAddress","metadata","tx","receipt","postId","contracts","client","optionIndex","attending","comment","initializeProvider","BrowserProvider","resetProvider","STORAGE_KEY","AUTH_EXPIRATION","isValidAuthState","state","useAuth","address","setAddress","useState","stored","setChainId","isConnected","setIsConnected","profile","setProfile","_a","_b","isInitializing","setIsInitializing","initializationRef","useRef","providerInitializedRef","useEffect","handleChainChanged","newChainId","handleAccountsChanged","accounts","disconnect","fetchProfile","mounted","chainIdNum","saveAuthState","currentState","parsedState","newState","err","connect","result","username","metadataStr","useNetwork","useAccount","chains","useConfig","isSupported","isCorrectNetwork","switchNetwork","targetChainId","targetChain","Navigation","onMenuClick","navigate","useNavigate","location","useLocation","showDropdown","setShowDropdown","React","handleDisconnect","navigateToDashboard","formatChainName","getChainLogo","getChainLogoAlt","networks","jsxDEV","Menu","ChevronDown","network","LogOut","Bell","PostType","createBlockchainPost","preparePostMetadata","hash","tempPostId","baseMetadata","_c","initialState","createPost","createAsyncThunk","postData","rejectWithValue","fetchPostsByTribe","resolve","dummyPosts","i","postTypeString","postType","post","postsSlice","createSlice","action","confirmed","p","blockchainData","builder","setCreatingPost","setPostType","updateDraft","resetDraft","updatePostStatus","selectPostDraft","selectCreatingPost","selectPostsError","postsReducer","useWallet","connectAsync","useConnect","disconnectAsync","useDisconnect","walletClient","setWalletClient","connectWallet","useCallback","injected","disconnectWallet","parseMetadata","defaultValue","metadataCache","CACHE_TIMEOUT_MS","getMetadataFromCache","key","cachedData","storeMetadataInCache","data","ErrorType","mapTribeDataToUI","tribeData","metadataObj","contractName","metadataName","name","isGenericContractName","hasMetadataName","createdAt","nftRequirements","entryFee","e","_TribeService","__publicField","type","message","originalError","admins","joinType","trimmedName","tribeCreatedEvent","log","rawConfig","config","rc","parsedMetadata","cacheKey","details","parsed","configView","userStatus","memberAddress","status","nextId","TribeService","ProfileService","profileId","profileNFTMinter","balance","userTokenId","event","skipped","skippedAddress","IndexerService","partialMessage","context","callback","cb","getAddress","timestamp","id","tribe","addr","tokenId","profileOwner","postMinter","nextPostId","batchSize","totalPosts","batches","start","end","creator","isGated","collectibleContract","collectibleId","isEncrypted","accessSigner","userPosts","tribePosts","nextTribeId","admin","memberCount","tribeName","tribeMetadata","userTribes","code","consecutiveErrors","MAX_CONSECUTIVE_ERRORS","BATCH_SIZE","profilesFound","owner","normalizedOwner","contentType","contentManager","content","author","normalizedAddress","hasProfile","emptyProfile","found","value","TribesSDK","uiTribe","tribes","completeTribe","count","limit","tribeError","fallbackError","profileServiceExists","profileServiceConnected","sdk","useTribesManagement","setSdk","isLoading","setIsLoading","setError","tribesSDK","createTribe","errorMessage","joinTribe","requestToJoinTribe","getTribesCount","useTribesProfile","useChainId","getProfileById","getProfileByUsername","mockProfile","createProfile","updateProfileMetadata","checkUsernameAvailability","validateUsername","cn","inputs","twMerge","clsx","buttonVariants","cva","Button","className","variant","size","leftIcon","rightIcon","children","props","ref","Loader2","this","badgeVariants","Badge","cardVariants","Card","CardHeader","CardTitle","CardDescription","CardContent","CardFooter","DialogTitle","DialogDescription","inputVariants","Input","TribeJoinType","addTribe","TribeCreationForm","onSuccess","onCancel","setName","description","setDescription","avatar","setAvatar","coverImage","setCoverImage","adminInput","setAdminInput","adminUsers","setAdminUsers","setJoinType","setEntryFee","chainError","setChainError","loading","setLoading","adminInputRef","supportedChainIds","detectedChainId","getTribeMetadata","getAdminAddresses","fetchProfileByUsername","addAdminUsername","prev","profileResult","handleSubmit","handleAdminInputKeyDown","removeAdminUsername","AlignLeft","ImageIcon","Users","Globe","Lock","index","EventFields","dispatch","useDispatch","postDraft","useSelector","locationType","setLocationType","buttonClass","selectedBtnClass","inputClass","handleUpdateDraft","getLocationObject","handleLocationTypeChange","currentLocation","newLocation","updateEventDetails","updates","_d","_e","format","_f","Fragment","_g","_h","_i","ImageFields","PollFields","ResourceFields","MediaFields","PostTypeFields","createEvent","eventData","eventController","ethers.Contract","ticketType","price","ethers.parseEther","eventCreatedLog","ethers.id","eventId","prepareEventData","formData","startDate","endDate","ticketTypes","POST_TYPE_MAPPING","postTypeOptions","CalendarDays","BarChartHorizontal","Briefcase","BookOpen","PostCreator","mode","isOpen","onClose","onError","availableTypes","t","defaultType","isReduxOpen","validationError","setValidationError","isSubmitting","setIsSubmitting","titleInputRef","closeButtonRef","submitButtonRef","effectiveIsOpen","handleClose","handleSelectType","useMemo","normalizedType","val","renderContent","option","X","Transition","Dialog","CreatePostModal","propIsOpen","reduxIsOpen","handleSuccess","BottomNav","showMenu","setShowMenu","showTribeModal","setShowTribeModal","showNotificationModal","setShowNotificationModal","creationOptions","FileText","handleAddClick","handleTribeCreationSuccess","handleHomeClick","HomeIcon","PlusCircle","UserCircle","defaultContext","TribesContext","createContext","TribesProvider","isInitialized","setTribes","refreshTribes","allTribes","getTribe","useTribesSDK","useContext","useTribesData","contextRefreshTribes","contextGetTribe","getAllTribes","getUserTribes","getMemberStatus","getTribeAvatar","defaultAvatar","tribeAny","parseError","generatedAvatar","getTribePrivacy","getTribeTopics","topic","getTribeDescription","getTribeCoverImage","defaultCover","getTribeMembershipStatus","Sidebar","currentPath","allTopics","_","avatarUrl","privacy","Hash","Layout","isSidebarOpen","setIsSidebarOpen","Outlet","STORAGE_KEYS","getAuthData","getFollowers","hasMinimumFollows","getOnboardingState","logDebug","RootRoute","checkInProgress","trackRedirect","path","redirects","attempts","safeNavigate","savedAuth","onboardingState","getIcon","CheckCircle","AlertCircle","AlertTriangle","Info","toastVariants","NotificationToast","isVisible","duration","timer","AnimatePresence","motion","NotificationContext","useNotification","NotificationProvider","notification","setNotification","showNotification","hideNotification","isChainSupported","useProfile","networkChainId","profileData","connectionAttempts","maxAttempts","getProfileByAddress","checkProfileOwnership","skipProfileCreation","hasSkippedProfileCreation","findUsernameByAddress","updateProfileCache","updateProfile","checkUsername","wallets","WalletConnect","isConnecting","setIsConnecting","connectingWalletId","setConnectingWalletId","connectionAttempt","showNetworks","setShowNetworks","navigating","setNavigating","link","preloadLink","src","img","addNetwork","switchToNetwork","navigateWithTransition","walletId","profileError","Loader","ArrowLeft","wallet","ChevronUp","ExternalLink","USERNAME_CONSTRAINTS","ProfileForm","existingProfile","currentChainId","isTargetNetwork","wagmiWalletClient","isWalletLoading","useWalletClient","setUsername","bio","setBio","setLocation","website","setWebsite","twitter","setTwitter","instagram","setInstagram","discord","setDiscord","isUsernameAvailable","setIsUsernameAvailable","isCheckingUsername","setIsCheckingUsername","hasCheckedProfile","setHasCheckedProfile","checkedUsernamesRef","currentUsername","isMounted","cachedResult","available","checkExistingProfile","storedData","onProfileCreationPage","createProfileDirectly","currentChain","wagmiError","handleSwitchNetwork","UsernameAvatarSetup","CHAIN_IDS","FALLBACK_ADDRESSES","TribesABI","isBrowser","_DBService","PrismaClient","blockchainId","offset","userId","tribeIds","slicedIds","tribeIdsKey","parsedIds","userData","usernameMap","parsedMap","u","user","usernameMapKey","users","userAddresses","blockNumber","startBlock","endBlock","DBService","indexerInstance","getIndexerService","LRUCache","maxSize","oldestKey","oldestTime","time","_PostsService","request","transaction","postsStore","tribesStore","_timestamp","cleanPost","db","contract","postIds","total","validPosts","cachedEntry","idbPost","localPost","response","dbPost","mappedPost","postsPromises","posts","reject","getRequest","store","storagePost","now","entry","range","cursor","blockchainPost","localStorageKey","parsedPost","syncPosts","keys","validPostIds","functionName","args","postsCache","parsedCache","tribeCache","hit","source","stats","m","upperType","task","PostsService","Profile","isEditing","setIsEditing","setProfileData","setUserPosts","postsService","loadProfile","defaultMetadata","fullProfile","formatAddress","fetchUserPosts","mappedPosts","Copy","Users2","Medal","Star","Edit2","TribeCardEnhanced","showJoinButton","isJoining","setIsJoining","joinError","setJoinError","setAvatarUrl","coverImageUrl","setCoverImageUrl","avatarError","setAvatarError","coverError","setCoverError","cover","handleJoinTribe","activityLevel","ratio","activityColors","isMember","isPending","isAdmin","topics","handleAvatarError","handleCoverError","Check","MessageSquare","Activity","Plus","adaptTribeToExtendedTribe","TribeList","extendedTribes","Tribes","searchQuery","setSearchQuery","activeFilter","setActiveFilter","handleCreateTribe","Search","Sparkles","Filter","FeedLayout","rightSidebar","TribeSidebar","members","onTopicSelect","selectedTopicId","safeMembers","safeTopics","Crown","member","Link","Shield","CreatePost","usePostsManagement","setPosts","postsServiceRef","getPostsService","fetchPost","postsMap","acc","fetchFeed","feedPosts","generateAvatarFromAddress","UserAvatar","TYPE_COLORS","postContainerStyles","postTypeBadgeStyles","postTypeIconStyles","tagStyles","actionButtonStyles","contentStyles","mediaContainerStyles","authorStyles","authorNameStyles","timestampStyles","dividerStyles","buttonStyles","TextPost","onLike","onComment","onShare","onReport","onClick","showActions","handleClick","formattedDate","formatDistanceToNow","getTagVariant","tag","variants","char","Heart","MessageCircle","Share2","Flag","ImagePost","isImageExpanded","setIsImageExpanded","handleImageClick","mainImage","Maximize2","VideoPost","videoRef","isPlaying","setIsPlaying","isMuted","setIsMuted","handlePlayPause","handleMuteToggle","mainVideo","Pause","Play","VolumeX","Volume2","LinkPost","handleLinkClick","extractEventDetails","eventFromDetails","eventFromLegacy","isEventPost","EventsService","amount","currentTickets","eventDetails","BasePost","typeIcon","typeName","isLiked","setIsLiked","handleLike","EventPost","isAttending","setIsAttending","ticketCount","setTicketCount","setUserAddress","ticketQuantity","setTicketQuantity","showTicketModal","setShowTicketModal","setErrorMessage","eventDates","formattedStartDate","formattedEndDate","formattedStartTime","formattedEndTime","isSameDay","isBefore","isAfter","diffTime","diffDays","daysRemainingText","getEventStatusInfo","generateCalendarLink","title","tickets","handleAttend","handlePurchaseTickets","userAddr","Calendar","Ticket","MapPin","LinkIcon","User","Tag","DollarSign","Accessibility","speaker","item","CalendarCheck","Share","PollPost","liked","setLiked","saved","setSaved","selectedOption","setSelectedOption","hasVoted","setHasVoted","formattedTime","date","pollData","pollQuestion","pollOptions","pollEndDate","isPollEnded","totalVotes","sum","remainingTime","diffMs","diffHours","handleVote","optionId","handleComment","handleShare","handleSave","handleCardClick","authorName","authorAddress","likeCount","commentCount","percentage","isSelected","HeartIconSolid","HeartIcon","ChatBubbleLeftIcon","ArrowPathRoundedSquareIcon","BookmarkIconSolid","BookmarkIcon","BountyPost","bountyData","getDifficultyColor","difficulty","Bug","Clock","req","Github","ArrowUpRight","ProjectPost","projectData","GitBranch","PostTypeMapper","isEventType","isEventString","hasEventMetadata","numericType","filterOptions","UnifiedFeed","items","showCreateButton","showFilters","onItemClick","contentFilter","setContentFilter","timeFilter","setTimeFilter","sortFilter","setSortFilter","showAdvancedFilters","setShowAdvancedFilters","timeFilters","sortFilters","TrendingUp","_id","handleReport","openCreatePostModal","filteredItems","filtered","typeStr","filterStr","postTypeNum","enumName","itemDate","weekAgo","a","b","aStats","bStats","aEngagement","aTimestamp","renderItem","SlidersHorizontal","label","Icon","TribeView","useParams","isLoadingTribes","postsLoading","selectedTopic","setSelectedTopic","isJoined","setIsJoined","showCreatePost","setShowCreatePost","activeTab","setActiveTab","tribeDisplay","handleToggleMembership","tribeControllerContract","tribeDetails","postsArray","postTribeId","currentTribeId","isMatch","filteredPosts","fetchPostsByType","formattedPosts","handleTabClick","tab","handlePostCreationSuccess","handleItemClick","TribeDetails","CreateTribe","isPrivate","setIsPrivate","avatarPreview","setAvatarPreview","coverPreview","setCoverPreview","tags","setTags","tagInput","setTagInput","success","setSuccess","handleAvatarChange","file","reader","handleCoverChange","handleAddTag","handleRemoveTag","tagToRemove","Image","Upload","OnboardingStep","ONBOARDING_STORAGE_KEY","INITIAL_ONBOARDING_STATE","rawChainId","chainIdForLogs","profileResponse","metadataURI","WALLET_CHECK_TIMEOUT","MAX_RETRIES","useOnboarding","setState","retryCount","timeoutRef","checkWalletConnection","timeoutPromise","walletData","getCurrentStep","updateWalletInfo","walletAddress","clearWalletInfo","updateProfileId","completeOnboarding","resetOnboarding","inputStyles","ProfileCreation","isSkipping","setIsSkipping","setExistingProfile","setFormData","handleSkip","handleChange","SUGGESTED_USERS","FollowSuggestions","selectedUsers","setSelectedUsers","toggleUser","newSet","handleComplete","Onboarding","currentStep","Navigate","renderStep","TopicsView","topicId","TopicDetails","AuthGuard","isSdkLoading","lastCheckedChainId","setLastCheckedChainId","setRetryCount","profileCheckInProgress","navigationAttempts","MAX_NAVIGATION_ATTEMPTS","sdkInitTimer","loadStoredAuthState","authData","auth","currentCount","storedState","cssVariables","style","MONAD_TESTNET_ID","FUSE_EMBER_ID","updateChainColors","metaThemeColor","INIT_TIMEOUT","initializeApp","initializeServices","initializeFallbackMode","indexerService","LoadingScreen","DashboardLazy","lazy","App","setIsInitialized","Router","Suspense","Routes","Route","chainSlice","setIsCorrectNetwork","setIsChainSwitching","setLastValidChainId","chainReducer","configureStore","queryClient","QueryClient","createConfig","ReactDOM","Provider","WagmiProvider","QueryClientProvider"],"ignoreList":[],"sources":["../../src/constants/networks.ts","../../src/utils/ethereum.ts","../../src/config/abis.ts","../../src/constants/contracts.ts","../../src/config/contracts.ts","../../src/utils/blockchainUtils.ts","../../src/utils/provider.ts","../../src/hooks/useAuth.ts","../../src/hooks/useNetwork.ts","../../src/components/Navigation.tsx","../../src/types/post.ts","../../src/utils/postHelpers.ts","../../src/store/slices/postsSlice.ts","../../src/hooks/useWallet.ts","../../src/utils/metadataUtils.ts","../../src/types/error.ts","../../src/utils/typeMappers.ts","../../src/services/tribe/TribeService.ts","../../src/services/profile/ProfileService.ts","../../src/services/indexer/IndexerService.ts","../../src/services/TribesSDK.ts","../../src/hooks/useTribesManagement.ts","../../src/hooks/useTribesProfile.ts","../../src/utils/cn.ts","../../src/components/common/ui/Button.tsx","../../src/components/common/ui/Badge.tsx","../../src/components/common/ui/Card.tsx","../../src/components/common/ui/Dialog.tsx","../../src/components/common/ui/Input.tsx","../../src/types/tribe.ts","../../src/components/tribe/TribeCreationForm.tsx","../../src/components/posts/EventFields.tsx","../../src/components/posts/ImageFields.tsx","../../src/components/posts/PollFields.tsx","../../src/components/posts/ResourceFields.tsx","../../src/components/posts/MediaFields.tsx","../../src/components/posts/PostTypeFields.tsx","../../src/utils/eventHelpers.ts","../../src/components/post/PostCreator.tsx","../../src/components/posts/CreatePostModal.tsx","../../src/components/BottomNav.tsx","../../src/contexts/TribesContext.tsx","../../src/hooks/useTribesData.ts","../../src/utils/tribeHelpers.ts","../../src/components/Sidebar.tsx","../../src/components/Layout.tsx","../../src/utils/storage.ts","../../src/components/RootRoute.tsx","../../src/components/NotificationToast.tsx","../../src/contexts/NotificationContext.tsx","../../src/hooks/useProfile.ts","../../src/components/WalletConnect.tsx","../../src/components/profile/ProfileForm.tsx","../../src/screens/UsernameAvatarSetup.tsx","../../src/utils/contracts.ts","../../src/utils/abis.ts","../../src/services/db.service.ts","../../src/services/index.ts","../../src/services/posts.service.ts","../../src/screens/Profile.tsx","../../src/components/tribes/TribeCardEnhanced.tsx","../../src/components/tribes/TribeList.tsx","../../src/screens/Tribes.tsx","../../src/components/layout/FeedLayout.tsx","../../src/components/sidebars/TribeSidebar.tsx","../../src/components/CreatePost.tsx","../../src/hooks/usePostsManagement.ts","../../src/utils/avatar.ts","../../src/components/user/UserAvatar.tsx","../../src/components/posts/styles/post.styles.ts","../../src/components/posts/types/TextPost.tsx","../../src/components/posts/types/ImagePost.tsx","../../src/components/posts/types/VideoPost.tsx","../../src/components/posts/types/LinkPost.tsx","../../src/types/event.ts","../../src/services/events.service.ts","../../src/components/posts/BasePost.tsx","../../src/components/posts/types/EventPost.tsx","../../src/components/posts/types/PollPost.tsx","../../src/components/posts/types/BountyPost.tsx","../../src/components/posts/types/ProjectPost.tsx","../../src/components/posts/PostTypeMapper.tsx","../../src/components/feed/UnifiedFeed.tsx","../../src/screens/TribeView.tsx","../../src/screens/TribeDetails.tsx","../../src/screens/CreateTribe.tsx","../../src/constants/onboarding.ts","../../src/utils/profile.ts","../../src/hooks/useOnboarding.ts","../../src/screens/ProfileCreation.tsx","../../src/components/FollowSuggestions.tsx","../../src/screens/Onboarding.tsx","../../src/components/topics/TopicsView.tsx","../../src/screens/TopicDetails.tsx","../../src/components/AuthGuard.tsx","../../src/constants/theme.ts","../../src/utils/initApp.ts","../../src/components/LoadingScreen.tsx","../../src/App.tsx","../../src/store/slices/chainSlice.ts","../../src/store/store.ts","../../src/main.tsx"],"sourcesContent":["import { Chain, defineChain } from 'viem'\n\nexport const MONAD_TESTNET_ID = '0x279f'\nexport const MONAD_TESTNET_DECIMAL = 10143\n\nexport const FUSE_EMBER_ID = '0x4B5E078D' // 1264453517 in hex\nexport const FUSE_EMBER_DECIMAL = 1264453517\n\nexport const SOMNIA_TESTNET_ID = '0xC498' // 50312 in hex\nexport const SOMNIA_TESTNET_DECIMAL = 50312\n\nexport const ABSTRACT_MAINNET_ID = '0xA9B1' // 2741 in hex\nexport const ABSTRACT_MAINNET_DECIMAL = 2741\n\nexport const ABSTRACT_TESTNET_ID = '0x2B38' // 11124 in hex\nexport const ABSTRACT_TESTNET_DECIMAL = 11124\n\nexport const MONAD_TESTNET = defineChain({\n  id: 10143,\n  name: 'Monad Testnet',\n  network: 'monad-testnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'MON',\n    symbol: 'MON',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://monad-testnet.g.alchemy.com/v2/5OeRT0SHza89NcfCn83h1lQmRY8iGjsw'],\n    },\n    public: {\n      http: ['https://monad-testnet.g.alchemy.com/v2/5OeRT0SHza89NcfCn83h1lQmRY8iGjsw'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'MonadExplorer',\n      url: 'https://explorer-devnet.monadinfra.com',\n    },\n  },\n  testnet: true,\n})\n\nexport const SOMNIA_TESTNET = defineChain({\n  id: SOMNIA_TESTNET_DECIMAL,\n  name: 'Somnia Testnet',\n  network: 'somnia-testnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Somnia',\n    symbol: 'STT',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://dream-rpc.somnia.network/'],\n    },\n    public: {\n      http: ['https://dream-rpc.somnia.network/'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'SomniaExplorer',\n      url: 'https://shannon-explorer.somnia.network/',\n    },\n  },\n  testnet: true,\n})\n\nexport const FUSE_EMBER = defineChain({\n  id: FUSE_EMBER_DECIMAL,\n  name: 'Flash Testnet',\n  network: 'fuse-ember',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Fuse',\n    symbol: 'FUSE',\n  },\n  rpcUrls: {\n    default: {\n      http: ['/fuse-rpc'],\n    },\n    public: {\n      http: ['/fuse-rpc'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'FuseExplorer',\n      url: 'https://explorer.flash.fuse.io',\n    },\n  },\n  testnet: true,\n})\n\nexport const CHILIZ_MAINNET = defineChain({\n  id: 88888,\n  name: 'Chiliz Chain',\n  network: 'Chiliz Mainnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Chiliz',\n    symbol: 'CHZ',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://rpc.chiliz.com'],\n    },\n    public: {\n      http: ['https://rpc.chiliz.com'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Chiliz Chain Explorer',\n      url: 'https://chiliscan.com/',\n    },\n  },\n  testnet: true,\n})\n\nexport const MANTA_TESTNET = defineChain({\n  id: 3441006,\n  name: 'Manta Pacific Sepolia Testnet',\n  network: 'Manta Testnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'MANTA',\n    symbol: 'MANTA',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://pacific-rpc.sepolia-testnet.manta.network/http'],\n    },\n    public: {\n      http: ['https://pacific-rpc.sepolia-testnet.manta.network/http'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Manta Sepolia Explorer',\n      url: 'https://pacific-explorer.sepolia-testnet.manta.network',\n    },\n  },\n  testnet: true,\n})\n\nexport const ARBITRUM_SEPOLIA_TESTNET = defineChain({\n  id: 421614,\n  name: 'Arbitrum Sepolia Testnet',\n  network: 'Arbitrum Testnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'ETH',\n    symbol: 'ETH',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://arbitrum-sepolia-rpc.publicnode.com'],\n    },\n    public: {\n      http: ['https://arbitrum-sepolia-rpc.publicnode.com'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Arbitrum Sepolia Explorer',\n      url: 'https://sepolia.arbiscan.io',\n    },\n  },\n  testnet: true,\n})\n\nexport const ABSTRACT_MAINNET = defineChain({\n  id: ABSTRACT_MAINNET_DECIMAL,\n  name: 'Abstract',\n  network: 'abstract',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'ETH',\n    symbol: 'ETH',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://api.mainnet.abs.xyz'],\n    },\n    public: {\n      http: ['https://api.mainnet.abs.xyz'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Abstract Explorer',\n      url: 'https://abscan.org/',\n    },\n  },\n  testnet: false,\n})\n\nexport const ABSTRACT_TESTNET = defineChain({\n  id: ABSTRACT_TESTNET_DECIMAL,\n  name: 'Abstract Testnet',\n  network: 'abstract-testnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'ETH',\n    symbol: 'ETH',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://api.testnet.abs.xyz'],\n    },\n    public: {\n      http: ['https://api.testnet.abs.xyz'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Abstract Testnet Explorer',\n      url: 'https://sepolia.abscan.org/',\n    },\n  },\n  testnet: true,\n})\n\nexport const SUPPORTED_CHAINS: Chain[] = [\n  MONAD_TESTNET, \n  FUSE_EMBER, \n  CHILIZ_MAINNET, \n  MANTA_TESTNET, \n  ARBITRUM_SEPOLIA_TESTNET, \n  SOMNIA_TESTNET,\n  ABSTRACT_MAINNET,\n  ABSTRACT_TESTNET\n]\n\nexport const DEFAULT_CHAIN = MONAD_TESTNET\n\n// Network switching configuration type\nexport interface NetworkConfig {\n  chainId: string\n  chainName: string\n  nativeCurrency: {\n    name: string\n    symbol: string\n    decimals: number\n  }\n  rpcUrls: string[]\n  blockExplorerUrls: string[]\n}\n\n// Network switching configurations for MetaMask\nexport const MONAD_NETWORK_CONFIG: NetworkConfig = {\n  chainId: MONAD_TESTNET_ID,\n  chainName: MONAD_TESTNET.name,\n  nativeCurrency: MONAD_TESTNET.nativeCurrency,\n  rpcUrls: [MONAD_TESTNET.rpcUrls.default.http[0]],\n  blockExplorerUrls: [MONAD_TESTNET.blockExplorers.default.url]\n}\n\nexport const FUSE_NETWORK_CONFIG: NetworkConfig = {\n  chainId: FUSE_EMBER_ID,\n  chainName: FUSE_EMBER.name,\n  nativeCurrency: FUSE_EMBER.nativeCurrency,\n  rpcUrls: [FUSE_EMBER.rpcUrls.default.http[0]],\n  blockExplorerUrls: [FUSE_EMBER.blockExplorers.default.url]\n}\n\n// Add Somnia network config\nexport const SOMNIA_NETWORK_CONFIG: NetworkConfig = {\n  chainId: SOMNIA_TESTNET_ID,\n  chainName: SOMNIA_TESTNET.name,\n  nativeCurrency: SOMNIA_TESTNET.nativeCurrency,\n  rpcUrls: [SOMNIA_TESTNET.rpcUrls.default.http[0]],\n  blockExplorerUrls: [SOMNIA_TESTNET.blockExplorers.default.url]\n}\n\n// Error messages for network switching\nexport const NETWORK_ERRORS = {\n  WRONG_NETWORK: 'Please switch to a supported network',\n  NETWORK_SWITCH_FAILED: 'Failed to switch network',\n  USER_REJECTED: 'User rejected network switch',\n  CHAIN_NOT_ADDED: 'Network not added to wallet'\n} as const ","import { \n  type WalletClient, \n  createWalletClient, \n  createPublicClient,\n  custom, \n  http \n} from 'viem';\nimport { MONAD_TESTNET } from '../constants/networks';\n\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n\n// Local storage keys\nexport const STORAGE_KEYS = {\n  AUTH: 'tribes_auth',\n  PROFILE: 'tribes_profile',\n  FOLLOWERS: 'tribes_followers'\n} as const;\n\nexport interface FollowedProfile {\n  address: string;\n  username: string;\n  avatar: string;\n}\n\n// Save auth data to local storage\nexport const saveAuthData = (data: { address: string | null; isConnected: boolean }) => {\n  localStorage.setItem(STORAGE_KEYS.AUTH, JSON.stringify(data));\n};\n\n// Get auth data from local storage\nexport const getAuthData = () => {\n  const data = localStorage.getItem(STORAGE_KEYS.AUTH);\n  return data ? JSON.parse(data) : { address: null, isConnected: false };\n};\n\n// Save profile data to local storage\nexport const saveProfileData = (data: any) => {\n  // Handle BigInt serialization\n  const profileDataString = JSON.stringify(data, (key, value) => {\n    // Convert BigInt to string with a special marker\n    if (typeof value === 'bigint') {\n      return { __bigint: value.toString() };\n    }\n    return value;\n  });\n  \n  localStorage.setItem(STORAGE_KEYS.PROFILE, profileDataString);\n};\n\n// Get profile data from local storage\nexport const getProfileData = () => {\n  const data = localStorage.getItem(STORAGE_KEYS.PROFILE);\n  if (!data) return null;\n  \n  // Handle BigInt deserialization\n  return JSON.parse(data, (key, value) => {\n    // Check if the value is our special BigInt marker object\n    if (value && typeof value === 'object' && value.__bigint) {\n      return BigInt(value.__bigint);\n    }\n    return value;\n  });\n};\n\n// Save followed profiles to local storage\nexport const saveFollowedProfiles = (profiles: FollowedProfile[]) => {\n  localStorage.setItem(STORAGE_KEYS.FOLLOWERS, JSON.stringify(profiles));\n};\n\n// Get followed profiles from local storage\nexport const getFollowedProfiles = (): FollowedProfile[] => {\n  const data = localStorage.getItem(STORAGE_KEYS.FOLLOWERS);\n  return data ? JSON.parse(data) : [];\n};\n\n// Check if user has followed minimum required profiles\nexport const hasMinimumFollows = () => {\n  const profiles = getFollowedProfiles();\n  return profiles.length >= 3;\n};\n\nexport const getEthereumProvider = async () => {\n  if (typeof window === 'undefined' || !window.ethereum) {\n    console.warn('No ethereum provider found');\n    return null;\n  }\n  \n  try {\n    // Ensure the provider is initialized\n    await window.ethereum.request({ method: 'eth_chainId' });\n    return window.ethereum;\n  } catch (error) {\n    console.error('Error initializing ethereum provider:', error);\n    return null;\n  }\n};\n\nexport const getPublicClient = () => {\n  return createPublicClient({\n    chain: MONAD_TESTNET,\n    transport: http()\n  });\n};\n\nexport const getWalletClient = () => {\n  if (!window.ethereum) throw new Error('No ethereum provider found');\n  return createWalletClient({\n    chain: MONAD_TESTNET,\n    transport: custom(window.ethereum)\n  });\n};\n\nexport function createWalletClientFromProvider(provider: any): WalletClient {\n  return createWalletClient({\n    chain: MONAD_TESTNET,\n    transport: custom(provider)\n  });\n} ","import ProfileNFTMinterABI from '../abi/ProfileNFTMinter.json';\nimport TribeControllerABI from '../abi/TribeController.json';\nimport CollectibleControllerABI from '../abi/CollectibleController.json';\nimport EventControllerABI from '../abi/EventController.json';\nimport CommunityPointsABI from '../abi/CommunityPoints.json';\nimport VotingABI from '../abi/Voting.json';\nimport RoleManagerABI from '../abi/RoleManager.json';\nimport SuperCommunityControllerABI from '../abi/SuperCommunityController.json';\nimport ContentManagerABI from '../abi/ContentManager.json';\nimport PostMinterABI from '../abi/PostMinter.json';\n\n// Export all ABIs with proper typing\nexport const ABIS = {\n  ProfileNFTMinter: ProfileNFTMinterABI,\n  TribeController: TribeControllerABI,\n  CollectibleController: CollectibleControllerABI,\n  EventController: EventControllerABI,\n  CommunityPoints: CommunityPointsABI,\n  Voting: VotingABI,\n  RoleManager: RoleManagerABI,\n  SuperCommunityController: SuperCommunityControllerABI,\n  ContentManager: ContentManagerABI,\n  PostMinter: PostMinterABI\n} as const; ","import { MONAD_TESTNET, FUSE_EMBER, SUPPORTED_CHAINS, MANTA_TESTNET, CHILIZ_MAINNET } from './networks';\nimport { createPublicClient, createWalletClient, http, custom, Chain, PublicClient, WalletClient } from 'viem';\n\ntype ContractAddresses = {\n  ROLE_MANAGER: `0x${string}`;\n  PROFILE_NFT_MINTER: `0x${string}`;\n  TRIBE_CONTROLLER: `0x${string}`;\n  COLLECTIBLE_CONTROLLER: `0x${string}`;\n  EVENT_CONTROLLER: `0x${string}`;\n  SUPER_COMMUNITY_CONTROLLER: `0x${string}`;\n  COMMUNITY_POINTS: `0x${string}`;\n  VOTING: `0x${string}`;\n  CONTENT_MANAGER: `0x${string}`;\n  POST_MINTER: `0x${string}`;\n};\n\ntype ChainAddresses = {\n  [key: number]: ContractAddresses;\n};\n\n// Separate caches for public and wallet clients\nconst publicClientCache = new Map<number, PublicClient>();\nconst walletClientCache = new Map<number, WalletClient>();\n\n// Contract Addresses by Chain\nexport const CONTRACT_ADDRESSES: ChainAddresses = {\n  \n  [MANTA_TESTNET.id]: {\n    ROLE_MANAGER: '0x2F86722E927f1f080AF80E943eaE45fa28C7C296',\n    PROFILE_NFT_MINTER: '0xc7B5f9BE4F716eE179674E2f055d866a797D1126',\n    TRIBE_CONTROLLER: '0x575Cc6B211b33aDA87C075AfE3bB878f6B0a8984',\n    COLLECTIBLE_CONTROLLER: '0xD750B3e3A361B701c6C53B86A425F4CC345f142d',\n    EVENT_CONTROLLER: '0x03f8E7E304dB8615207a0b6fdd02Eb2e30e89557',\n    SUPER_COMMUNITY_CONTROLLER: '0x9814514576184fB43AAD956873AE806AA811851E',\n    COMMUNITY_POINTS: '0xE05022e242778c50Be3f6b4DD156ac222A311eEb',\n    VOTING: '0x1E644d081E2a702A6D4e816D8dc04A9DBaa12Acc',\n    CONTENT_MANAGER: '0x4DAD0f1E02374CB221E8822787bbdb0b0b18B9Fb',\n    POST_MINTER: '0xA1c3162cE3515bb876Ee4928fB0FD0B20bC37f34'\n  },\n  [CHILIZ_MAINNET.id]: {\n    ROLE_MANAGER: '0x2F86722E927f1f080AF80E943eaE45fa28C7C296',\n    PROFILE_NFT_MINTER: '0xc7B5f9BE4F716eE179674E2f055d866a797D1126',\n    TRIBE_CONTROLLER: '0x575Cc6B211b33aDA87C075AfE3bB878f6B0a8984',\n    COLLECTIBLE_CONTROLLER: '0xD750B3e3A361B701c6C53B86A425F4CC345f142d',\n    EVENT_CONTROLLER: '0x03f8E7E304dB8615207a0b6fdd02Eb2e30e89557',\n    SUPER_COMMUNITY_CONTROLLER: '0x9814514576184fB43AAD956873AE806AA811851E',\n    COMMUNITY_POINTS: '0xE05022e242778c50Be3f6b4DD156ac222A311eEb',\n    VOTING: '0x1E644d081E2a702A6D4e816D8dc04A9DBaa12Acc',\n    CONTENT_MANAGER: '0x4DAD0f1E02374CB221E8822787bbdb0b0b18B9Fb',\n    POST_MINTER: '0xA1c3162cE3515bb876Ee4928fB0FD0B20bC37f34'\n  },\n  [MONAD_TESTNET.id]: {\n    ROLE_MANAGER: \"0xd1e6F54a47705659856cdCf1De6bCf992668f7B8\",\n    CONTENT_MANAGER: '0x4c1B99D32A3671a35c3229cb3647d080CFb94380',\n    PROFILE_NFT_MINTER: \"0xb5D7997bE927511328a983387A0B8c08A78C2Ff6\",\n    TRIBE_CONTROLLER: \"0x90628Ed5C38C5a902782911Be5b4C811A7bEf4F4\",\n    COLLECTIBLE_CONTROLLER: \"0xE82448DEbBF0cD369912d58aA68F7b2371E24846\",\n    POST_MINTER: \"0xb4a6E494a86679de41Bb18De850C1a497066ec1e\",\n    VOTING: \"0x014656936ea2C31493Ce1374328819370D2443DE\",\n    COMMUNITY_POINTS: \"0x8D682a9917c2d5F2b63Ede57D5d046ff4e08c27E\",\n    EVENT_CONTROLLER: \"0x68Cb873203dc5Af0DbAC292eF94f83054Bc70fc8\",\n    SUPER_COMMUNITY_CONTROLLER: \"0xe1B158fc958C3F8Af64949e40d973ebA32462E1F\",\n  },\n  [FUSE_EMBER.id]: {\n    ROLE_MANAGER: '0x661C2B7f1C3EC1ACEeA2c02818459061D40823bD',\n    PROFILE_NFT_MINTER: '0x6fB6B1DDD4EA6640e04D70979C57E9C01c7b974a',\n    TRIBE_CONTROLLER: '0x54812005171F747f5E69afA08989F41Cf06eeE48',\n    COLLECTIBLE_CONTROLLER: '0xFD4E7c9AbEab99C9d23605519A883F1a3814595b',\n    EVENT_CONTROLLER: '0xF4515E673EF9ED006dbFAF702A87Cd579b128f37',\n    SUPER_COMMUNITY_CONTROLLER: '0x214653d9Cc9bbd148B0A1Fc833867c2cE8A0e609',\n    COMMUNITY_POINTS: '0xdcF66412c2F2E76938Ed4F991f350Eb4CEA0c377',\n    VOTING: '0xFCF9C955fB3A4B137E9526E1De979c67c9a7b45B',\n    CONTENT_MANAGER: '0x8fa7A72aAB8595E0EA48bDd0A26e7c1b7F72B362',\n    POST_MINTER: '0x58a1F6A010Eb711f5e564C073fC24bDa4AFA2392'\n  }\n\n} as const;\n\n// Helper to get contract addresses for current chain\nexport const getContractAddresses = (chainId: number): ContractAddresses => {\n  const addresses = CONTRACT_ADDRESSES[chainId];\n  if (!addresses) {\n    console.warn(`No contract addresses found for chain ${chainId}, falling back to Monad Devnet`);\n    return CONTRACT_ADDRESSES[MONAD_TESTNET.id];\n  }\n  return addresses;\n};\n\n// Get the current chain configuration\nexport const getCurrentChain = (chainId: number): Chain => {\n  const chain = SUPPORTED_CHAINS.find(chain => chain.id === chainId);\n  if (!chain) {\n    console.warn(`Chain ${chainId} not supported, falling back to Monad Devnet`);\n    return MONAD_TESTNET;\n  }\n  return chain;\n};\n\nexport const getPublicClient = (chainId?: number): PublicClient => {\n  const chain = chainId ? getCurrentChain(chainId) : MONAD_TESTNET;\n  const cached = publicClientCache.get(chain.id);\n  \n  if (cached) {\n    return cached;\n  }\n\n  const client = createPublicClient({\n    chain,\n    transport: http(),\n    batch: {\n      multicall: true\n    }\n  });\n\n  publicClientCache.set(chain.id, client);\n  return client;\n};\n\nexport const getWalletClient = (chainId?: number): WalletClient => {\n  if (!window.ethereum) throw new Error('No ethereum provider found');\n  \n  const chain = chainId ? getCurrentChain(chainId) : MONAD_TESTNET;\n  const cached = walletClientCache.get(chain.id);\n  \n  if (cached) {\n    return cached;\n  }\n\n  const client = createWalletClient({\n    chain,\n    transport: custom(window.ethereum)\n  });\n\n  walletClientCache.set(chain.id, client);\n  return client;\n};\n\n// Profile NFT Minter ABI\nexport const PROFILE_NFT_MINTER_ABI = [\n  // Profile Creation\n  {\n    inputs: [\n      { internalType: \"string\", name: \"username\", type: \"string\" },\n      { internalType: \"string\", name: \"metadataURI\", type: \"string\" }\n    ],\n    name: \"createProfile\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  // Username Checks\n  {\n    inputs: [{ internalType: \"string\", name: \"username\", type: \"string\" }],\n    name: \"usernameExists\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  // Profile Updates\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\n      { internalType: \"string\", name: \"newMetadataURI\", type: \"string\" }\n    ],\n    name: \"updateProfileMetadata\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  // Profile Queries\n  {\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\n    name: \"getProfileByTokenId\",\n    outputs: [\n      { internalType: \"string\", name: \"username\", type: \"string\" },\n      { internalType: \"string\", name: \"metadataURI\", type: \"string\" },\n      { internalType: \"address\", name: \"owner\", type: \"address\" }\n    ],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"string\", name: \"username\", type: \"string\" }],\n    name: \"getTokenIdByUsername\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n] as const; ","import { PublicClient, WalletClient, createPublicClient, createWalletClient, http, custom } from 'viem';\nimport { ABIS } from './abis';\nimport { MONAD_TESTNET } from '../constants/networks';\nimport { getCurrentChain, getContractAddresses as getAddresses } from '../constants/contracts';\n\n// Use the same interface as in constants/contracts.ts to avoid mismatches\ninterface ContractAddresses {\n  ROLE_MANAGER: `0x${string}`;\n  PROFILE_NFT_MINTER: `0x${string}`;\n  TRIBE_CONTROLLER: `0x${string}`;\n  COLLECTIBLE_CONTROLLER: `0x${string}`;\n  EVENT_CONTROLLER: `0x${string}`;\n  SUPER_COMMUNITY_CONTROLLER: `0x${string}`;\n  COMMUNITY_POINTS: `0x${string}`;\n  VOTING: `0x${string}`;\n  CONTENT_MANAGER: `0x${string}`;\n  POST_MINTER: `0x${string}`;\n}\n\n// Get addresses directly from constants/contracts.ts to avoid duplication\nexport function getContractAddresses(chainId: number = MONAD_TESTNET.id): ContractAddresses {\n  return getAddresses(chainId);\n}\n\n// Get chain-specific public client\nexport function getPublicClient(chainId: number = MONAD_TESTNET.id): PublicClient {\n  const chain = getCurrentChain(chainId);\n  return createPublicClient({\n    chain,\n    transport: http()\n  });\n}\n\n// Get chain-specific wallet client\nexport async function getWalletClient(chainId: number = MONAD_TESTNET.id): Promise<WalletClient> {\n  const provider = window.ethereum;\n  if (!provider) {\n    throw new Error('No provider available');\n  }\n\n  const chain = getCurrentChain(chainId);\n  const [account] = await provider.request({ method: 'eth_requestAccounts' });\n\n  return createWalletClient({\n    account,\n    chain,\n    transport: custom(provider)\n  });\n}\n\n// Get chain-specific contract configurations\nexport function getContracts(chainId: number = MONAD_TESTNET.id) {\n  const addresses = getContractAddresses(chainId);\n  \n  return {\n    profileNFTMinter: {\n      address: addresses.PROFILE_NFT_MINTER,\n      abi: ABIS.ProfileNFTMinter\n    },\n    // Use TRIBE_CONTROLLER for tribesContract for backward compatibility\n    tribesContract: {\n      address: addresses.TRIBE_CONTROLLER,\n      abi: ABIS.TribeController\n    },\n    tribeController: {\n      address: addresses.TRIBE_CONTROLLER,\n      abi: ABIS.TribeController\n    },\n    collectibleController: {\n      address: addresses.COLLECTIBLE_CONTROLLER,\n      abi: ABIS.CollectibleController\n    },\n    eventController: {\n      address: addresses.EVENT_CONTROLLER,\n      abi: ABIS.EventController\n    },\n    communityPoints: {\n      address: addresses.COMMUNITY_POINTS,\n      abi: ABIS.CommunityPoints\n    },\n    voting: {\n      address: addresses.VOTING,\n      abi: ABIS.Voting\n    },\n    roleManager: {\n      address: addresses.ROLE_MANAGER,\n      abi: ABIS.RoleManager\n    },\n    superCommunityController: {\n      address: addresses.SUPER_COMMUNITY_CONTROLLER,\n      abi: ABIS.SuperCommunityController\n    },\n    contentManager: {\n      address: addresses.CONTENT_MANAGER,\n      abi: ABIS.ContentManager\n    },\n    postMinter: {\n      address: addresses.POST_MINTER,\n      abi: ABIS.PostMinter\n    }\n  } as const;\n}\n\n// Helper to get current chain info\nexport const getCurrentChainInfo = (chainId?: number) => {\n  const chain = chainId ? getCurrentChain(chainId) : MONAD_TESTNET;\n  return {\n    chain,\n    contracts: getContracts(chain.id),\n    publicClient: getPublicClient(chain.id),\n    getWalletClient: () => getWalletClient(chain.id)\n  };\n}; ","/**\n * Utilities for blockchain operations\n */\nimport { type Log, type PublicClient, type Abi, type TransactionReceipt } from 'viem';\nimport { getPublicClient as viemGetPublicClient, getContracts as configGetContracts } from '../config/contracts';\nimport { SUPPORTED_CHAINS, MONAD_TESTNET } from '../constants/networks';\nimport { getEthereumProvider } from './ethereum';\nimport { type Chain } from 'viem';\nimport { ZeroAddress } from 'ethers';\nimport { getContractAddresses as contractsGetContractAddresses } from '../constants/contracts';\n\n// Define a more specific type for contract function parameters\ntype ContractReadFunction = (...args: unknown[]) => Promise<unknown>;\ntype ContractWriteFunction = (...args: unknown[]) => Promise<`0x${string}`>;\n\n// Define WalletClient interface\ninterface WalletClient {\n  address?: string;\n  signMessage?: (message: string) => Promise<string>;\n}\n\n// Re-export functions from other modules for consistency\nexport const getPublicClient = viemGetPublicClient;\nexport const getContracts = configGetContracts;\nexport const getContractAddresses = contractsGetContractAddresses;\n\n/**\n * Get the current chain ID from connected wallet\n * @returns Current chain ID\n */\nexport const getCurrentChainId = async (): Promise<number> => {\n  try {\n    const provider = await getEthereumProvider();\n    if (!provider) {\n      console.warn('No provider available, using Monad Devnet');\n      return MONAD_TESTNET.id;\n    }\n    \n    // Different providers have different methods to get chain ID\n    // Try multiple approaches\n    try {\n      // Try using eth_chainId RPC method directly\n      const chainIdHex = await provider.request({ method: 'eth_chainId' });\n      if (chainIdHex) {\n        const chainId = parseInt(chainIdHex, 16);\n        \n        // Check if the chain is supported\n        const isSupported = SUPPORTED_CHAINS.some(chain => chain.id === chainId);\n        if (!isSupported) {\n          console.warn(`Chain ID ${chainId} not supported, using Monad Devnet`);\n          return MONAD_TESTNET.id;\n        }\n        \n        return chainId;\n      }\n    } catch (requestError) {\n      console.warn('Failed to get chainId via request method:', requestError);\n    }\n    \n    // Fallback to using chainId property if it exists\n    if (provider.chainId) {\n      const chainId = typeof provider.chainId === 'string' \n        ? parseInt(provider.chainId, 16) \n        : Number(provider.chainId);\n      \n      return chainId;\n    }\n    \n    // Don't try to use provider.getNetwork() as it may not exist on all providers\n    // This was causing the TypeError: provider.getNetwork is not a function error\n    \n    console.warn('Could not determine chain ID, using Monad Devnet');\n    return MONAD_TESTNET.id;\n  } catch (error) {\n    console.error('Error getting current chain ID:', error);\n    // Return Monad Devnet as default\n    return MONAD_TESTNET.id;\n  }\n};\n\n/**\n * Get chain configuration by ID\n * @param chainId Chain ID\n * @returns Chain configuration\n */\nexport const getChainConfig = (chainId: number): Chain => {\n  const chain = SUPPORTED_CHAINS.find((c: Chain) => c.id === chainId);\n  if (!chain) {\n    throw new Error(`Chain ID ${chainId} is not supported`);\n  }\n  return chain;\n};\n\n/**\n * Extract metadata from transaction\n * @param chainId Chain ID\n * @param tribeId Tribe ID\n * @param publicClient Public client for blockchain interaction\n * @returns Metadata string\n */\nexport const extractMetadataFromTransaction = async (\n  chainId: number,\n  tribeId: number,\n  publicClient: PublicClient\n): Promise<string> => {\n  try {\n    const { tribeController } = getContracts(chainId);\n    \n    // Get tribe creation transaction\n    const events = await publicClient.getLogs({\n      address: tribeController.address,\n      event: {\n        type: 'event',\n        name: 'TribeCreated',\n        inputs: [\n          { type: 'uint256', name: 'tribeId', indexed: true },\n          { type: 'address', name: 'creator', indexed: true },\n          { type: 'string', name: 'name' },\n          { type: 'string', name: 'metadata' }\n        ]\n      },\n      args: {\n        tribeId: BigInt(tribeId)\n      },\n      fromBlock: 'earliest',\n      toBlock: 'latest'\n    });\n\n    if (events && events.length > 0) {\n      const event = events[0];\n      return event.args.metadata || '{}';\n    }\n\n    return '{}';\n  } catch (error) {\n    console.error('Error extracting metadata from transaction:', error);\n    return '{}';\n  }\n};\n\n/**\n * Wait for transaction confirmation\n * @param txHash Transaction hash\n * @param chainId Chain ID\n * @returns Transaction receipt\n */\nexport const waitForTransaction = async (\n  txHash: `0x${string}`,\n  chainId: number\n): Promise<TransactionReceipt> => {\n  const publicClient = getPublicClient(chainId);\n  return await publicClient.waitForTransactionReceipt({ hash: txHash });\n};\n\n/**\n * Extract event logs from transaction receipt\n * @param receipt Transaction receipt\n * @param eventSignature Event signature to filter by\n * @returns Found log or undefined\n */\nexport const extractEventFromLogs = (\n  receipt: TransactionReceipt,\n  eventSignature: string\n): Log | undefined => {\n  return receipt.logs.find(\n    (log: Log) => log.topics[0] === eventSignature\n  );\n};\n\n/**\n * Check if address is zero address\n * @param address Address to check\n * @returns Whether address is zero address\n */\nexport const isZeroAddress = (address: string): boolean => {\n  return address === ZeroAddress || address === '0x0000000000000000000000000000000000000000';\n};\n\n/**\n * Get contract instance\n * @param params Contract parameters\n * @returns Contract instance\n */\nexport async function getContract(params: { address: string; abi: Abi }): Promise<{\n  address: string;\n  abi: Abi;\n  read: Record<string, ContractReadFunction>;\n  write: Record<string, ContractWriteFunction>;\n}> {\n  try {\n    const publicClient = getPublicClient();\n    \n    // Get the current chain ID and verify\n    const chainId = await getCurrentChainId();\n    console.log('Current chain ID:', chainId);\n    console.log('Expected chain ID for this contract:', 1264453517); // Replace with your expected chain ID\n\n    // Check if we're on the correct network\n    if (chainId !== 1264453517) { // Replace with your expected chain ID\n      console.error('Wrong network. Please switch to the correct network.');\n      throw new Error('Wrong network');\n    }\n    \n    // Create a contract instance with read capabilities\n    return {\n      address: params.address,\n      abi: params.abi,\n      // Set up read functions based on the ABI\n      read: buildContractReadFunctions(params.abi, params.address, publicClient),\n      // Set up write functions if needed\n      write: {}\n    };\n  } catch (error) {\n    console.error('Error creating contract instance:', error);\n    // Return a minimal contract instance as fallback\n    return {\n      address: params.address,\n      abi: params.abi,\n      read: {\n        balanceOf: async () => BigInt(0)\n      },\n      write: {}\n    };\n  }\n}\n\n/**\n * Build contract read functions based on ABI\n * @param abi Contract ABI\n * @param address Contract address\n * @param publicClient Public client\n * @returns Object with read functions\n */\nfunction buildContractReadFunctions(abi: Abi, address: string, publicClient: PublicClient): Record<string, ContractReadFunction> {\n  const readFunctions: Record<string, ContractReadFunction> = {};\n  \n  // Find all read functions in the ABI\n  abi.forEach(item => {\n    if (item.type === 'function' && \n        (item.stateMutability === 'view' || item.stateMutability === 'pure')) {\n      readFunctions[item.name] = async (...args: unknown[]) => {\n        try {\n          // Call the contract function\n          return await publicClient.readContract({\n            address: address as `0x${string}`,\n            abi: [item],\n            functionName: item.name,\n            args\n          });\n        } catch (error) {\n          console.error(`Error calling ${item.name}:`, error);\n          throw error;\n        }\n      };\n    }\n  });\n  \n  return readFunctions;\n}\n\n/**\n * Get wallet client\n */\nexport async function getWalletClient(): Promise<WalletClient> {\n  try {\n    const provider = await getEthereumProvider();\n    if (!provider) {\n      throw new Error('No wallet provider available');\n    }\n    \n    // Real implementation should use the provider to get a wallet client\n    return {\n      address: provider.selectedAddress\n    };\n  } catch (error) {\n    console.error('Error getting wallet client:', error);\n    return {};\n  }\n}\n\n/**\n * Blockchain object for compatibility with existing code\n * This should use the ORIGINAL implementation that was working before\n */\nexport const blockchain = {\n  // Connect to the blockchain\n  connect: async () => {\n    try {\n      const provider = await getEthereumProvider();\n      if (!provider) {\n        throw new Error('No provider available');\n      }\n      \n      // Request accounts to ensure connection\n      await provider.request({ method: 'eth_requestAccounts' });\n      return true;\n    } catch (error) {\n      console.error('Error connecting to blockchain:', error);\n      throw error;\n    }\n  },\n  \n  // Get the connected wallet address\n  getAddress: async () => {\n    try {\n      const provider = await getEthereumProvider();\n      if (!provider || !provider.selectedAddress) {\n        throw new Error('No wallet connected');\n      }\n      return provider.selectedAddress;\n    } catch (error) {\n      console.error('Error getting wallet address:', error);\n      throw error;\n    }\n  },\n  \n  // Get the current chain ID\n  getCurrentChainId,\n  getChainId: getCurrentChainId, // Alias\n  \n  // Get the Ethereum provider\n  getProvider: async () => {\n    return getEthereumProvider();\n  },\n  \n  // Get a signer for transactions\n  getSigner: async () => {\n    try {\n      const provider = await getEthereumProvider();\n      if (!provider) {\n        throw new Error('No provider available');\n      }\n      \n      // Import ethers\n      const { ethers } = await import('ethers');\n      \n      // Create a Web3Provider wrapped around our provider\n      const ethersProvider = new ethers.BrowserProvider(provider);\n      \n      // Get the signer from the ethers provider\n      const signer = await ethersProvider.getSigner();\n      \n      return signer;\n    } catch (error) {\n      console.error('Error getting signer:', error);\n      throw error;\n    }\n  },\n  \n  // Create a post in a tribe\n  createTribePost: async (params: Record<string, unknown>) => {\n    try {\n      console.log('Creating tribe post with params:', params);\n      \n      // Connect to blockchain\n      await blockchain.connect();\n      \n      // Get the current chain ID\n      const chainId = await getCurrentChainId();\n      console.log('Using chain ID for post creation:', chainId);\n      \n      // Get contract addresses for the current chain\n      const addresses = getContractAddresses(chainId);\n      if (!addresses.POST_MINTER) {\n        throw new Error(`No tribes contract address for chain ID ${chainId}`);\n      }\n      \n      // Get provider and signer\n      const provider = await blockchain.getProvider();\n      const signer = await blockchain.getSigner();\n      if (!signer) {\n        throw new Error('No signer available for transaction');\n      }\n      \n      console.log('Provider:', provider);\n      console.log('Signer:', signer);\n      \n      // Get the contract instance\n      const { ethers } = await import('ethers');\n      const { ABIS } = await import('../config/abis');\n      \n      // Log the contract address and ABI to verify\n      console.log('Contract address:', addresses.POST_MINTER);\n      console.log('Contract ABI first few methods:', ABIS.PostMinter.slice(0, 3));\n\n      // Create contract with signer only\n      const contractWithSigner = new ethers.Contract(addresses.POST_MINTER, ABIS.PostMinter, signer);\n      console.log('Contract with signer:', contractWithSigner);\n\n      // Get user address\n      const userAddress = await signer.getAddress();\n      console.log('User address:', userAddress);\n      \n      // Define the tribe ID to use\n      const tribeId = params.tribeId ? Number(params.tribeId) : 1;\n      console.log(`Using tribe ID: ${tribeId}`);\n      \n      // Check if tribe exists and join if needed\n      // await ensureTribeMembership(contractWithSigner, tribeId, userAddress);\n      console.log('Ensuring tribe parmas...', params);\n      // Prepare metadata with required fields\n      const metadata = JSON.stringify({\n        content: params.content || 'Sample content',\n        title: params.title || 'Untitled Post',\n        type: params.postType,\n        createdAt: new Date().toISOString(),\n        ...(params.postType === 'event' && { ...params })\n      });\n      \n      console.log('Post metadata:', metadata);\n      \n      // Send the transaction\n      console.log('Sending createPost transaction...');\n      const tx = await contractWithSigner.createPost(\n        tribeId,\n        metadata,\n        false, // isGated\n        '0x0000000000000000000000000000000000000000', // collectibleContract\n        0, // collectibleId\n        {\n          gas: 1000000\n        }\n      );\n      \n      console.log('Transaction sent:', tx.hash);\n      const receipt = await tx.wait();\n      console.log('Transaction receipt:', receipt);\n      \n      return tx.hash as `0x${string}`;\n    } catch (error) {\n      console.error('Error creating tribe post:', error);\n      throw error;\n    }\n  },\n  \n  // Get a post from a tribe\n  getTribePost: async (tribeId: number, postId: string) => {\n    try {\n      console.log(`Getting post ${postId} from tribe ${tribeId}`);\n      \n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // Make the actual contract call to get a post\n      // This should integrate with the actual blockchain implementation\n      // Temporary placeholder response\n      return {\n        id: postId,\n        content: 'Sample post content',\n        title: 'Sample Post',\n        author: '0x0000000000000000000000000000000000000000',\n        timestamp: Math.floor(Date.now() / 1000),\n        likes: 0,\n        comments: [],\n        metadata: '{}'\n      };\n    } catch (error) {\n      console.error('Error getting tribe post:', error);\n      return null;\n    }\n  },\n  \n  // Vote on a poll\n  voteOnPoll: async (tribeId: number, postId: string, optionIndex: number) => {\n    try {\n      console.log(`Voting on poll ${postId} in tribe ${tribeId}, option ${optionIndex}`);\n      \n      // Get the necessary contracts and client\n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // This should make the actual contract call to vote on a poll\n      // For now, let's return a hash that matches the expected type\n      return `0x${Math.random().toString(16).substring(2).padStart(64, '0')}` as `0x${string}`;\n    } catch (error) {\n      console.error('Error voting on poll:', error);\n      throw error;\n    }\n  },\n  \n  // RSVP to an event\n  rsvpToEvent: async (tribeId: number, postId: string, attending: boolean) => {\n    try {\n      console.log(`RSVP to event ${postId} in tribe ${tribeId}, attending: ${attending}`);\n      \n      // Get the necessary contracts and client\n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // This should make the actual contract call to RSVP to an event\n      // For now, let's return a hash that matches the expected type\n      return `0x${Math.random().toString(16).substring(2).padStart(64, '0')}` as `0x${string}`;\n    } catch (error) {\n      console.error('Error RSVPing to event:', error);\n      throw error;\n    }\n  },\n  \n  // Like a post\n  likePost: async (tribeId: number, postId: string) => {\n    try {\n      console.log(`Liking post ${postId} in tribe ${tribeId}`);\n      \n      // Get the necessary contracts and client\n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // This should make the actual contract call to like a post\n      // For now, let's return a hash that matches the expected type\n      return `0x${Math.random().toString(16).substring(2).padStart(64, '0')}` as `0x${string}`;\n    } catch (error) {\n      console.error('Error liking post:', error);\n      throw error;\n    }\n  },\n  \n  // Comment on a post\n  commentOnPost: async (tribeId: number, postId: string, comment: string) => {\n    try {\n      console.log(`Commenting on post ${postId} in tribe ${tribeId}`);\n      \n      // Get the necessary contracts and client\n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // This should make the actual contract call to comment on a post\n      // For now, let's return a hash that matches the expected type\n      return `0x${Math.random().toString(16).substring(2).padStart(64, '0')}`\n    } catch (error) {\n      console.error('Error commenting on post:', error);\n      throw error;\n    }\n  },\n};\n\n/**\n * Ensure the user is a member of the specified tribe\n * @param contract The contract instance\n * @param tribeId The tribe ID\n * @param userAddress The user's address\n */\n// async function ensureTribeMembership(contract, tribeId, userAddress) {\n//   // try {\n//   //   console.log(`Checking membership for tribe ${tribeId}...`);\n    \n//   //   // Check if tribe exists\n//   //   // const tribeExists = await contract.tribeExists(tribeId);\n//   //   // console.log(`Tribe ${tribeId} exists:`, tribeExists);\n    \n//   //   if (!tribeExists) {\n//   //     console.log(`Tribe ${tribeId} does not exist, creating it...`);\n      \n//   //     // Create the tribe if it doesn't exist\n//   //     if (typeof contract.createTribe === 'function') {\n//   //       const createTribeTx = await contract.createTribe(\n//   //         `Tribe ${tribeId}`,\n//   //         `A tribe with ID ${tribeId}`,\n//   //         false, // isPrivate\n//   //         '0x0000000000000000000000000000000000000000', // collectibleContract\n//   //         0, // collectibleId\n//   //         {\n//   //           gasLimit: 500000\n//   //         }\n//   //       );\n        \n//   //       console.log('Create tribe transaction sent:', createTribeTx.hash);\n//   //       const createReceipt = await createTribeTx.wait();\n//   //       console.log('Create tribe transaction receipt:', createReceipt);\n//   //     } else {\n//   //       throw new Error(`Cannot create tribe ${tribeId} - function not available`);\n//   //     }\n//   //   }\n    \n//   //   // Check if user is a member\n//   //   const isMember = await contract.isTribeMember(tribeId, userAddress);\n//   //   console.log(`Is member of tribe ${tribeId}:`, isMember);\n    \n//   //   if (!isMember) {\n//   //     console.log(`Not a member of tribe ${tribeId}, joining...`);\n      \n//   //     // Join the tribe\n//   //     if (typeof contract.joinTribe === 'function') {\n//   //       const joinTx = await contract.joinTribe(tribeId, {\n//   //         gasLimit: 300000\n//   //       });\n        \n//   //       console.log('Join tribe transaction sent:', joinTx.hash);\n//   //       const joinReceipt = await joinTx.wait();\n//   //       console.log('Join tribe transaction receipt:', joinReceipt);\n        \n//   //       // Verify membership after joining\n//   //       const isMemberNow = await contract.isTribeMember(tribeId, userAddress);\n//   //       console.log(`Is member of tribe ${tribeId} now:`, isMemberNow);\n        \n//   //       if (!isMemberNow) {\n//   //         throw new Error(`Failed to join tribe ${tribeId}`);\n//   //       }\n//   //     } else {\n//   //       throw new Error(`Cannot join tribe ${tribeId} - function not available`);\n//   //     }\n//   //   }\n    \n//   //   console.log(`Successfully confirmed membership in tribe ${tribeId}`);\n//   //   return true;\n//   // } catch (error) {\n//   //   console.error(`Error ensuring tribe membership for tribe ${tribeId}:`, error);\n//   //   throw error;\n//   // }\n// }","import { BrowserProvider } from 'ethers';\n\n// Singleton provider instance\nlet provider: BrowserProvider | null = null;\nlet isInitialized = false;\n\nexport async function initializeProvider(): Promise<BrowserProvider> {\n  if (!window.ethereum) {\n    throw new Error('MetaMask is not installed');\n  }\n  \n  if (!provider) {\n    provider = new BrowserProvider(window.ethereum);\n  }\n  \n  // Request accounts to trigger the MetaMask popup if needed\n  await provider.send('eth_requestAccounts', []);\n  isInitialized = true;\n  \n  return provider;\n}\n\nexport function getProvider(): BrowserProvider {\n  if (!isInitialized || !provider) {\n    throw new Error('Provider not initialized. Call initializeProvider first.');\n  }\n  return provider;\n}\n\nexport function resetProvider(): void {\n  provider = null;\n  isInitialized = false;\n}\n\n// Listen for network changes\nif (typeof window !== 'undefined' && window.ethereum) {\n  window.ethereum.on('chainChanged', () => {\n    resetProvider();\n  });\n  \n  window.ethereum.on('accountsChanged', () => {\n    resetProvider();\n  });\n} ","import { useState, useEffect, useRef } from 'react';\nimport { getEthereumProvider } from '../utils/ethereum';\nimport { blockchain } from '../utils/blockchainUtils';\nimport { initializeProvider, getProvider } from '../utils/provider';\nimport { ProfileData, ProfileMetadata } from '../types/user';\nconst STORAGE_KEY = 'tribes_auth_state';\nconst AUTH_EXPIRATION = 24 * 60 * 60 * 1000; // 24 hours\n\n// Extend ProfileData with tokenId as bigint\nexport interface Profile extends Omit<ProfileData, 'tokenId'> {\n  tokenId: bigint;\n}\n\ninterface AuthState {\n  address: string;\n  chainId: number;\n  profile?: {\n    tokenId: string;\n    username: string;\n    metadata: {\n      uri: string;\n    };\n  };\n  timestamp: number;\n}\n\n// Validate stored auth state\nconst isValidAuthState = (state: AuthState): boolean => {\n  return (\n    !!state &&\n    typeof state.address === 'string' &&\n    state.address.startsWith('0x') &&\n    typeof state.chainId === 'number' &&\n    state.chainId > 0 &&\n    typeof state.timestamp === 'number' &&\n    Date.now() - state.timestamp <= AUTH_EXPIRATION\n  );\n};\n\nexport function useAuth() {\n  const [address, setAddress] = useState<string | null>(() => {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY);\n      if (stored) {\n        const state = JSON.parse(stored) as AuthState;\n        if (isValidAuthState(state)) {\n          return state.address;\n        }\n        localStorage.removeItem(STORAGE_KEY);\n      }\n    } catch (error) {\n      console.error('Error loading auth state:', error);\n      localStorage.removeItem(STORAGE_KEY);\n    }\n    return null;\n  });\n\n  const [chainId, setChainId] = useState<number | null>(() => {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY);\n      if (stored) {\n        const state = JSON.parse(stored) as AuthState;\n        if (isValidAuthState(state)) {\n          return state.chainId;\n        }\n      }\n    } catch (error) {\n      console.error('Error loading chain ID:', error);\n    }\n    return null;\n  });\n  \n  const [isConnected, setIsConnected] = useState<boolean>(() => !!address && !!chainId);\n  const [profile, setProfile] = useState<Profile | null>(() => {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY);\n      if (stored) {\n        const state = JSON.parse(stored) as AuthState;\n        if (isValidAuthState(state) && state.profile) {\n          const metadata: ProfileMetadata = {\n            avatar: state.profile.metadata?.uri || '',\n            bio: '',\n            createdAt: Date.now()\n          };\n          \n          return {\n            tokenId: BigInt(state.profile.tokenId || '0'),\n            username: state.profile.username,\n            metadata,\n            nftUri: state.profile.metadata?.uri || '',\n            owner: state.address as `0x${string}`\n          };\n        }\n      }\n    } catch (error) {\n      console.error('Error loading profile:', error);\n    }\n    return null;\n  });\n\n  const [isInitializing, setIsInitializing] = useState(false);\n  const initializationRef = useRef(false);\n  const providerInitializedRef = useRef(false);\n\n  // Handle chain changes\n  useEffect(() => {\n    if (typeof window !== 'undefined' && window.ethereum) {\n      const handleChainChanged = (newChainId: string) => {\n        setChainId(parseInt(newChainId, 16));\n      };\n\n      window.ethereum.on('chainChanged', handleChainChanged);\n      return () => {\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, []);\n\n  // Handle account changes\n  useEffect(() => {\n    if (typeof window !== 'undefined' && window.ethereum) {\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length === 0) {\n          disconnect();\n        } else if (accounts[0] !== address) {\n          setAddress(accounts[0]);\n          fetchProfile(accounts[0]);\n        }\n      };\n\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      };\n    }\n  }, [address]);\n\n  // Consolidated initialization effect\n  useEffect(() => {\n    let mounted = true;\n\n    const initialize = async () => {\n      if (initializationRef.current || isInitializing) return;\n      \n      try {\n        setIsInitializing(true);\n        initializationRef.current = true;\n        \n        const provider = await getEthereumProvider();\n        if (!provider || !mounted) return;\n\n        try {\n          const chainIdHex = await provider.request({ method: 'eth_chainId' });\n          const chainIdNum = parseInt(chainIdHex as string, 16);\n          setChainId(chainIdNum);\n        } catch (error) {\n          console.error('Error getting chain ID:', error);\n          return;\n        }\n\n        if (provider.selectedAddress) {\n          if (typeof window !== 'undefined' && window.ethereum && !providerInitializedRef.current) {\n            await initializeProvider();\n            providerInitializedRef.current = true;\n          }\n\n          setAddress(provider.selectedAddress);\n          setIsConnected(true);\n\n          if (!profile && mounted) {\n            await fetchProfile(provider.selectedAddress);\n          }\n        }\n      } catch (error) {\n        console.error('Error in initialization:', error);\n      } finally {\n        if (mounted) {\n          setIsInitializing(false);\n        }\n      }\n    };\n\n    initialize();\n\n    return () => {\n      mounted = false;\n      initializationRef.current = false;\n    };\n  }, []);\n\n  // Single effect for auth state persistence\n  useEffect(() => {\n    if (!isInitializing && address && chainId) {\n      const state: Partial<AuthState> = {\n        address,\n        chainId,\n        timestamp: Date.now()\n      };\n\n      if (profile) {\n        state.profile = {\n          tokenId: profile.tokenId.toString(),\n          username: profile.username,\n          metadata: {\n            uri: profile.nftUri || ''\n          }\n        };\n      }\n\n      saveAuthState(state);\n    }\n  }, [address, chainId, profile, isInitializing]);\n\n  // Save auth state\n  const saveAuthState = (state: Partial<AuthState>) => {\n    try {\n      const currentState = localStorage.getItem(STORAGE_KEY);\n      const parsedState = currentState ? JSON.parse(currentState) as AuthState : null;\n      \n      const newState: AuthState = {\n        address: state.address || parsedState?.address || '',\n        chainId: state.chainId || parsedState?.chainId || 0,\n        profile: state.profile || parsedState?.profile,\n        timestamp: Date.now()\n      };\n      \n      if (newState.address) {\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(newState));\n        localStorage.setItem('tribes_auth', JSON.stringify({\n          isConnected: true,\n          address: newState.address,\n          chainId: newState.chainId\n        }));\n        \n        if (newState.profile) {\n          localStorage.setItem('tribes_profile', JSON.stringify(newState.profile));\n        }\n      }\n    } catch (err) {\n      console.error('Failed to save auth state:', err);\n    }\n  };\n\n  const connect = async () => {\n    try {\n      if (isInitializing) return;\n      setIsInitializing(true);\n      \n      if (typeof window !== 'undefined' && window.ethereum) {\n        await initializeProvider();\n      }\n      \n      const provider = await getEthereumProvider();\n      if (!provider) {\n        throw new Error('No provider found');\n      }\n\n      await provider.request({ method: 'eth_requestAccounts' });\n      const address = provider.selectedAddress;\n      if (!address) {\n        throw new Error('No address found');\n      }\n\n      setAddress(address);\n      setIsConnected(true);\n      await fetchProfile(address);\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      throw error;\n    } finally {\n      setIsInitializing(false);\n    }\n  };\n\n  const disconnect = () => {\n    setAddress(null);\n    setIsConnected(false);\n    setProfile(null);\n    \n    localStorage.removeItem(STORAGE_KEY);\n    localStorage.removeItem('tribes_auth');\n    localStorage.removeItem('tribes_profile');\n    localStorage.removeItem('redirect_attempts');\n  };\n\n  const fetchProfile = async (userAddress: string) => {\n    try {\n      if (typeof window !== 'undefined' && window.ethereum) {\n        await initializeProvider();\n      }\n      \n      const result = await blockchain.getProfileByAddress(userAddress);\n      \n      if (!result) {\n        return null;\n      }\n      \n      if (result.profile) {\n        const [username, metadataStr] = result.profile;\n        \n        let metadata: ProfileMetadata;\n        try {\n          metadata = JSON.parse(metadataStr);\n        } catch (e) {\n          metadata = { avatar: '', bio: '', createdAt: Date.now() };\n        }\n        \n        const profile: Profile = {\n          tokenId: BigInt(0),\n          username,\n          metadata,\n          nftUri: metadata.avatar || '',\n          owner: userAddress as `0x${string}`\n        };\n        \n        setProfile(profile);\n        return profile;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      return null;\n    }\n  };\n\n  return {\n    address,\n    isConnected,\n    profile,\n    connect,\n    disconnect,\n    fetchProfile,\n    chainId\n  };\n}","import { useAccount, useConfig } from 'wagmi';\nimport { SUPPORTED_CHAINS } from '../constants/networks';\n\nexport const useNetwork = () => {\n  const { chain } = useAccount();\n  const { chains } = useConfig();\n\n  const isSupported = (chainId?: number) => {\n    if (!chainId) return false;\n    return SUPPORTED_CHAINS.some(chain => chain.id === chainId);\n  };\n\n  const isCorrectNetwork = isSupported(chain?.id);\n\n  const switchNetwork = async (targetChainId: number) => {\n    if (!window.ethereum) {\n      throw new Error('No ethereum provider found');\n    }\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: `0x${targetChainId.toString(16)}` }],\n      });\n    } catch (error: any) {\n      // This error code indicates that the chain has not been added to MetaMask\n      if (error.code === 4902) {\n        const targetChain = SUPPORTED_CHAINS.find(chain => chain.id === targetChainId);\n        if (!targetChain) {\n          throw new Error(`Chain ID ${targetChainId} is not supported`);\n        }\n\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: `0x${targetChainId.toString(16)}`,\n            chainName: targetChain.name,\n            nativeCurrency: targetChain.nativeCurrency,\n            rpcUrls: targetChain.rpcUrls.default.http,\n            blockExplorerUrls: [targetChain.blockExplorers?.default.url],\n          }],\n        });\n      } else {\n        throw error;\n      }\n    }\n  };\n\n  return {\n    chainId: chain?.id,\n    isSupported,\n    isCorrectNetwork,\n    switchNetwork,\n  };\n}; ","import React from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { Menu, Bell, ChevronDown, LogOut } from 'lucide-react';\nimport { useAuth } from '../hooks/useAuth';\nimport { useNetwork } from '../hooks/useNetwork';\nimport { \n  MONAD_TESTNET, \n  FUSE_EMBER, \n  CHILIZ_MAINNET, \n  MANTA_TESTNET, \n  ARBITRUM_SEPOLIA_TESTNET,\n  SOMNIA_TESTNET,\n  ABSTRACT_MAINNET,\n  ABSTRACT_TESTNET\n} from '../constants/networks';\n\ninterface NavigationProps {\n  onMenuClick: () => void;\n}\n\nexport function Navigation({ onMenuClick }: NavigationProps) {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { disconnect } = useAuth();\n  const { chainId, switchNetwork } = useNetwork();\n  const [showDropdown, setShowDropdown] = React.useState(false);\n\n  // Don't show navigation on connect screen\n  if (['/connect'].includes(location.pathname)) {\n    return null;\n  }\n\n  const handleDisconnect = () => {\n    disconnect();\n    navigate('/connect');\n    setShowDropdown(false);\n  };\n\n  // Navigate to dashboard when logo is clicked\n  const navigateToDashboard = () => {\n    navigate('/dashboard');\n  };\n\n  const formatChainName = () => {\n    if (chainId === MONAD_TESTNET.id) {\n      return 'Monad Testnet';\n    }\n    if (chainId === FUSE_EMBER.id) {\n      return 'Flash Testnet';\n    }\n    if (chainId === CHILIZ_MAINNET.id) {\n      return 'Chiliz Mainnet';\n    }\n    if (chainId === MANTA_TESTNET.id) {\n      return 'Manta Testnet';\n    }\n    // if (chainId === ARBITRUM_SEPOLIA_TESTNET.id) {\n    //   return 'Arbitrum Testnet';\n    // }\n    // if (chainId === SOMNIA_TESTNET.id) {\n    //   return 'Somnia Testnet';\n    // }\n    // if (chainId === ABSTRACT_MAINNET.id) {\n    //   return 'Abstract';\n    // }\n    // if (chainId === ABSTRACT_TESTNET.id) {\n    //   return 'Abstract Testnet';\n    // }\n    return 'Unsupported Chain';\n  };\n\n  const getChainLogo = () => {\n    if (chainId === MONAD_TESTNET.id) {\n      return '/monad-white.svg';\n    }\n    if (chainId === FUSE_EMBER.id) {\n      return '/fuse-white.svg';\n    }\n    // Add logos for other chains if available\n    return '/monad-white.svg'; // Default logo\n  };\n\n  const getChainLogoAlt = () => {\n    if (chainId === MONAD_TESTNET.id) {\n      return 'Monad Logo';\n    }\n    if (chainId === FUSE_EMBER.id) {\n      return 'Fuse Logo';\n    }\n    return 'Chain Logo';\n  };\n\n  // Get the primary color based on the current chain\n  const getChainColor = () => {\n    if (chainId === MONAD_TESTNET.id) {\n      return 'monad-purple'; // Monad's purple\n    }\n    if (chainId === FUSE_EMBER.id) {\n      return 'fuse-orange'; // Fuse's orange\n    }\n    return 'monad-purple'; // Default color\n  };\n\n  const primaryColor = getChainColor();\n\n  // Get the first letter of the chain name for the icon\n  const getChainInitial = (chainName: string) => {\n    return chainName.charAt(0);\n  };\n\n  // All available networks\n  const networks = [\n    {\n      id: MONAD_TESTNET.id,\n      name: 'Monad Testnet',\n      initial: 'M'\n    },\n    {\n      id: FUSE_EMBER.id,\n      name: 'Flash Testnet',\n      initial: 'F'\n    },\n    {\n      id: CHILIZ_MAINNET.id,\n      name: 'Chiliz Mainnet',\n      initial: 'C'\n    },\n    {\n      id: MANTA_TESTNET.id,\n      name: 'Manta Testnet',\n      initial: 'M'\n    },\n    {\n      id: ARBITRUM_SEPOLIA_TESTNET.id,\n      name: 'Arbitrum Sepolia Testnet',\n      initial: 'A'\n    },\n    {\n      id: SOMNIA_TESTNET.id,\n      name: 'Somnia Testnet',\n      initial: 'S'\n    },\n    {\n      id: ABSTRACT_MAINNET.id,\n      name: 'Abstract',\n      initial: 'A'\n    },\n    {\n      id: ABSTRACT_TESTNET.id,\n      name: 'Abstract Testnet',\n      initial: 'A'\n    }\n  ];\n\n  return (\n    <nav className=\"sticky top-0 z-50 shadow-md\" style={{ backgroundColor: 'var(--chain-bg)' }}>\n      <div className=\"flex items-center justify-between py-5 px-5\">\n        <div className=\"flex items-center space-x-4\">\n          <button onClick={onMenuClick} className=\"md:hidden text-text-primary hover:bg-black/20 p-2 rounded-full transition-colors\">\n            <Menu className=\"w-6 h-6\" />\n          </button>\n          <div \n            className=\"flex items-center space-x-3 cursor-pointer\" \n            onClick={navigateToDashboard}\n            aria-label=\"Go to Dashboard\"\n          >\n            <img \n              src={getChainLogo()}\n              alt={getChainLogoAlt()}\n              className=\"w-9 h-9\"\n            />\n            <span className=\"text-xl font-bold font-['Inter'] text-text-primary\">Tribes</span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative\">\n            <button\n              onClick={() => setShowDropdown(!showDropdown)}\n              className=\"flex items-center justify-between space-x-3 px-4 py-2.5 rounded-full bg-black/20 hover:bg-theme-primary/10 text-text-primary transition-colors min-w-[180px]\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-6 h-6 rounded-full bg-theme-primary flex items-center justify-center text-text-primary text-xs font-bold\">\n                  {chainId === MONAD_TESTNET.id ? 'M' : \n                   chainId === FUSE_EMBER.id ? 'F' : \n                   chainId === CHILIZ_MAINNET.id ? 'C' : \n                   chainId === MANTA_TESTNET.id ? 'M' : \n                   chainId === ARBITRUM_SEPOLIA_TESTNET.id ? 'A' :\n                   chainId === SOMNIA_TESTNET.id ? 'S' :\n                   chainId === ABSTRACT_MAINNET.id ? 'A' :\n                   chainId === ABSTRACT_TESTNET.id ? 'A' : '?'}\n                </div>\n                <span className=\"font-medium\">{formatChainName()}</span>\n              </div>\n              <ChevronDown className=\"w-4 h-4\" />\n            </button>\n\n            {showDropdown && (\n              <div \n                className=\"absolute top-full mt-2 right-0 w-64 backdrop-blur-sm rounded-xl shadow-lg overflow-hidden border border-white/10\" \n                style={{ backgroundColor: 'var(--chain-bg)', opacity: 0.95 }}\n              >\n                <div className=\"py-2\">\n                  <div className=\"px-4 py-2 text-xs text-gray-400 uppercase font-semibold\">\n                    Select Network\n                  </div>\n                  {networks.map(network => (\n                    <button\n                      key={network.id}\n                      onClick={() => {\n                        switchNetwork(network.id);\n                        setShowDropdown(false);\n                      }}\n                      className={`w-full flex items-center px-4 py-3.5 hover:bg-theme-primary/10 text-text-primary text-left transition-colors ${chainId === network.id ? 'bg-theme-primary/15' : ''}`}\n                    >\n                      <div className=\"flex items-center space-x-3 flex-1\">\n                        <div className=\"w-6 h-6 rounded-full bg-theme-primary flex items-center justify-center text-xs font-bold\">\n                          {network.initial}\n                        </div>\n                        <span className=\"font-medium\">{network.name}</span>\n                      </div>\n                      {chainId === network.id && (\n                        <span className=\"text-xs bg-theme-primary/20 px-2 py-1 rounded-full\">Active</span>\n                      )}\n                    </button>\n                  ))}\n                </div>\n                <div className=\"border-t border-white/10 mt-1\">\n                  <button\n                    onClick={handleDisconnect}\n                    className=\"w-full flex items-center space-x-2 px-4 py-3.5 text-error-main hover:bg-black/20 transition-colors\"\n                  >\n                    <LogOut className=\"w-4 h-4\" />\n                    <span className=\"font-medium\">Disconnect Wallet</span>\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n          <button className={`w-10 h-10 flex items-center justify-center text-text-primary hover:bg-black/20 rounded-full transition-colors`}>\n            <Bell className=\"w-5 h-5\" />\n          </button>\n        </div>\n      </div>\n    </nav>\n  );\n}","/**\n * Types for post-related data structures\n */\n\nimport { PostInteractions } from './interaction';\n\nexport enum PostType {\n  TEXT = 0,\n  IMAGE = 1,\n  VIDEO = 2,\n  LINK = 3,\n  EVENT = 4,\n  POLL = 5\n}\n\nexport interface PostStats {\n  viewCount?: number;\n  shareCount?: number;\n  saveCount?: number;\n  commentCount?: number;\n  likeCount?: number;\n  views?: number;\n  engagement?: number;\n}\n\nexport interface PostMetadata {\n  type: PostType;\n  content: string;\n  title?: string;\n  description?: string;\n  media?: {\n    url: string;\n    type: string;\n    width?: number;\n    height?: number;\n  }[];\n  poll?: {\n    question: string;\n    options: string[];\n    endDate?: string;\n  };\n  event?: {\n    title: string;\n    location?: string;\n    startDate: string;\n    endDate?: string;\n  };\n  link?: {\n    url: string;\n    title?: string;\n    description?: string;\n    image?: string;\n  };\n  tags?: string[];\n  mentions?: string[];\n  createdAt: string;\n  [key: string]: any;\n}\n\nexport interface Post {\n  id: string;\n  content: string;\n  author: `0x${string}`;\n  tribeId: number;\n  createdAt: number;\n  type: PostType;\n  likes?: number;\n  comments?: number;\n  shares?: number;\n  stats?: PostStats;\n  metadata?: PostMetadata;\n}\n\nexport interface PostWithMetadata extends Post {\n  metadata: PostMetadata;\n}\n\nexport interface BatchPostData {\n  posts: Post[];\n  total: number;\n}\n\nexport interface CreatePostInput {\n  content: string;\n  tribeId: number;\n  type: PostType;\n  metadata?: {\n    title?: string;\n    description?: string;\n    image?: string;\n    link?: string;\n    eventDate?: string;\n    eventLocation?: string;\n    pollOptions?: string[];\n  };\n}\n\nexport interface CreateReplyInput {\n  parentPostId: number;\n  content: string;\n  type?: PostType;\n  isGated?: boolean;\n}\n\nexport interface CreateEncryptedPostInput {\n  tribeId: number;\n  content: string;\n  encryptionKeyHash: string;\n  accessSigner: string;\n}\n\nexport interface UpdatePostInput {\n  postId: number;\n  content: string;\n  title?: string;\n  type?: PostType;\n}","import { Post, PostType, PostMetadata } from '../types/post';\nimport { blockchain } from './blockchainUtils';\nimport { keccak256, encodeAbiParameters } from 'viem';\nimport { EventDetails } from '../types/event';\n\n// Interface for post creation parameters\nexport interface PostCreateParams {\n  title?: string;\n  content: string;\n  type: string;\n  tags?: string[];\n  eventDetails?: EventDetails;\n  pollDetails?: any;\n  projectDetails?: any;\n  resourceDetails?: any;\n  mediaContent?: any;\n  isPremium?: boolean;\n}\n\n// This function creates a post on the blockchain\nexport const createBlockchainPost = async (\n  params: PostCreateParams & { tribeId: string }\n): Promise<{ hash: `0x${string}`; postId: string }> => {\n  try {\n    // First, prepare the post metadata for blockchain storage\n    const metadata = JSON.stringify(preparePostMetadata(params));\n    console.log(`[createBlockchainPost]: metadata: ${metadata}`);\n    \n    // Use blockchain utility to send the transaction\n    const tribeId = parseInt(params.tribeId);\n    console.log(`[createBlockchainPost]: tribeId: ${tribeId}`);\n    \n    // Call the postMinter contract's createPost function\n    const hash = await blockchain.createTribePost({\n      tribeId,\n      metadata, // Now we pass metadata as a JSON string\n      postType: params.type, \n      content: params.content,\n      // No longer need options since we're using the postMinter contract\n    });\n\n    console.log(`[createBlockchainPost]: Post created with hash: ${hash}`);\n    // Generate a temporary post ID until we get the real one from event\n    const tempPostId = `post-${Date.now()}`;\n    \n    return { hash, postId: tempPostId };\n  } catch (error) {\n    console.error('Error creating blockchain post:', error);\n    throw error;\n  }\n};\n\n// Prepare metadata based on post type\nconst preparePostMetadata = (params: PostCreateParams): Record<string, any> => {\n  const baseMetadata = {\n    title: params.title || '',\n    content: params.content,\n    type: params.type,\n    tags: params.tags || [],\n    createdAt: new Date().toISOString(),\n  };\n  \n  switch (params.type) {\n    case 'EVENT':\n      return {\n        ...baseMetadata,\n        eventDetails: params.eventDetails,\n        // For backward compatibility\n        event: {\n          title: params.title || '',\n          startDate: params.eventDetails?.startDate,\n          endDate: params.eventDetails?.endDate,\n          location: params.eventDetails?.location\n        }\n      };\n      \n    case 'POLL':\n      return {\n        ...baseMetadata,\n        pollDetails: params.pollDetails\n      };\n      \n    case 'PROJECT':\n      return {\n        ...baseMetadata,\n        projectDetails: params.projectDetails\n      };\n      \n    case 'RESOURCE':\n      return {\n        ...baseMetadata,\n        resourceDetails: params.resourceDetails\n      };\n      \n    case 'RICH_MEDIA':\n      return {\n        ...baseMetadata,\n        mediaContent: params.mediaContent\n      };\n      \n    case 'COMMUNITY_UPDATE':\n      return {\n        ...baseMetadata,\n        isPremium: params.isPremium || false\n      };\n      \n    default:\n      return baseMetadata;\n  }\n};\n\n// Get specific options needed based on post type\nconst getPostTypeSpecificOptions = (params: PostCreateParams): Record<string, any> => {\n  switch (params.type) {\n    case 'POLL':\n      return {\n        options: params.pollDetails?.options?.map((opt: { text: string }) => opt.text) || [],\n        endDate: params.pollDetails?.endDate ? new Date(params.pollDetails.endDate).getTime() / 1000 : 0,\n        allowMultiple: params.pollDetails?.allowMultipleChoices || false\n      };\n      \n    case 'EVENT':\n      return {\n        startTime: params.eventDetails?.startDate ? new Date(params.eventDetails.startDate).getTime() / 1000 : 0,\n        endTime: params.eventDetails?.endDate ? new Date(params.eventDetails.endDate).getTime() / 1000 : 0,\n        maxAttendees: params.eventDetails?.maxAttendees || 0,\n        location: encodeEventLocation(params.eventDetails?.location)\n      };\n      \n    case 'PROJECT':\n      return {\n        status: encodeProjectStatus(params.projectDetails?.status),\n        budget: params.projectDetails?.budget || '0'\n      };\n      \n    default:\n      return {};\n  }\n};\n\n// Helper function to encode event location for blockchain\nconst encodeEventLocation = (location: any): string => {\n  if (!location) return '';\n  \n  const locationData = {\n    type: location.type || 'PHYSICAL',\n    physical: location.physical || '',\n    virtual: location.virtual || ''\n  };\n  \n  return JSON.stringify(locationData);\n};\n\n// Helper function to encode project status for blockchain\nconst encodeProjectStatus = (status?: 'PLANNING' | 'IN_PROGRESS' | 'COMPLETED'): number => {\n  switch (status) {\n    case 'PLANNING': return 0;\n    case 'IN_PROGRESS': return 1;\n    case 'COMPLETED': return 2;\n    default: return 0;\n  }\n};\n\n// Function to decode post data from blockchain\nexport const decodeBlockchainPost = (\n  blockchainData: any,\n  tribeId: string\n): Post => {\n  try {\n    // Parse metadata from blockchain\n    const parsedMetadata = typeof blockchainData.metadata === 'string' \n      ? JSON.parse(blockchainData.metadata) \n      : blockchainData.metadata;\n    \n    // Ensure metadata has all required properties\n    const metadata: PostMetadata = {\n      type: blockchainData.postType,\n      content: blockchainData.content,\n      createdAt: new Date(blockchainData.timestamp * 1000).toISOString(),\n      ...parsedMetadata\n    };\n    \n    return {\n      id: blockchainData.id || `post-${Date.now()}`,\n      author: blockchainData.author,\n      content: blockchainData.content,\n      type: blockchainData.postType,\n      createdAt: blockchainData.timestamp * 1000,\n      likes: blockchainData.likes || 0,\n      comments: blockchainData.comments || 0,\n      shares: blockchainData.shares || 0,\n      tribeId: parseInt(tribeId),\n      metadata: metadata,\n      stats: {\n        views: blockchainData.views || 0,\n        engagement: blockchainData.engagement || 0\n      }\n    };\n  } catch (error) {\n    console.error('Error decoding blockchain post:', error);\n    throw error;\n  }\n};\n\n// Get post by ID from blockchain\nexport const getBlockchainPost = async (\n  tribeId: number,\n  postId: string\n): Promise<Post | null> => {\n  try {\n    const blockchainData = await blockchain.getTribePost(tribeId, postId);\n    if (!blockchainData) return null;\n    \n    return decodeBlockchainPost(blockchainData, tribeId.toString());\n  } catch (error) {\n    console.error('Error getting blockchain post:', error);\n    return null;\n  }\n};\n\n// Vote on a poll post\nexport const voteOnPoll = async (\n  tribeId: number,\n  postId: string,\n  optionIndex: number\n): Promise<`0x${string}`> => {\n  try {\n    return await blockchain.voteOnPoll(tribeId, postId, optionIndex);\n  } catch (error) {\n    console.error('Error voting on poll:', error);\n    throw error;\n  }\n};\n\n// RSVP to an event\nexport const rsvpToEvent = async (\n  tribeId: number,\n  postId: string,\n  attending: boolean\n): Promise<`0x${string}`> => {\n  try {\n    return await blockchain.rsvpToEvent(tribeId, postId, attending);\n  } catch (error) {\n    console.error('Error RSVPing to event:', error);\n    throw error;\n  }\n};\n\n// Like a post\nexport const likePost = async (\n  tribeId: number,\n  postId: string\n): Promise<`0x${string}`> => {\n  try {\n    return await blockchain.likePost(tribeId, postId);\n  } catch (error) {\n    console.error('Error liking post:', error);\n    throw error;\n  }\n};\n\n// Add comment to a post\n// export const commentOnPost = async (\n//   tribeId: number,\n//   postId: string,\n//   comment: string\n// ): Promise<`0x${string}`> => {\n//   try {\n//     return await blockchain.commentOnPost(tribeId, postId, comment);\n//   } catch (error) {\n//     console.error('Error commenting on post:', error);\n//     throw error;\n//   }\n// };\n\n// Update post metadata (for editing posts)\n// export const updatePostMetadata = async (\n//   tribeId: number,\n//   postId: string,\n//   metadata: Record<string, any>\n// ): Promise<`0x${string}`> => {\n//   try {\n//     return await blockchain.updatePostMetadata(tribeId, postId, JSON.stringify(metadata));\n//   } catch (error) {\n//     console.error('Error updating post metadata:', error);\n//     throw error;\n//   }\n// }; ","import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { Post, PostType, PostMetadata, PostStats } from '../../types/post';\nimport { RootState } from '../store';\nimport { \n  createBlockchainPost, \n  getBlockchainPost, \n  PostCreateParams \n} from '../../utils/postHelpers';\n\n// Define the BlockchainData interface\ninterface BlockchainData {\n  txHash: `0x${string}`;\n  confirmed: boolean;\n  blockNumber?: number;\n  timestamp?: number;\n}\n\n// Extend the PostCreateParams to include tribeId which is needed for our app\ninterface ExtendedPostCreateParams extends PostCreateParams {\n  tribeId: string;\n  description?: string;\n}\n\nexport interface PostsState {\n  loading: boolean;\n  creatingPost: boolean;\n  error: string | null;\n  posts: Post[];\n  draft: ExtendedPostCreateParams;\n  pendingPosts: string[]; // List of pending transaction hashes\n}\n\nconst initialState: PostsState = {\n  loading: false,\n  creatingPost: false,\n  error: null,\n  posts: [],\n  draft: {\n    type: 'TEXT', // Use string instead of enum\n    content: '',\n    tribeId: '',\n    title: '',\n    description: '',\n    tags: [],\n    mediaContent: [],\n  },\n  pendingPosts: [],\n};\n\n// Validate post data before submission\nconst validatePostData = (draft: ExtendedPostCreateParams): { valid: boolean; error?: string } => {\n  // Common validation for all post types\n  if (!draft.content?.trim()) {\n    return { valid: false, error: 'Content is required' };\n  }\n\n  // Type-specific validation\n  switch (draft.type) {\n    case 'EVENT':\n      if (draft.eventDetails && !draft.eventDetails.startDate) {\n        return { valid: false, error: 'Event start date is required' };\n      }\n      break;\n    case 'POLL':\n      if (!draft.pollDetails?.options?.length) {\n        return { valid: false, error: 'Poll options are required' };\n      }\n      break;\n  }\n\n  return { valid: true };\n};\n\n// Helper to create a post metadata object that satisfies PostMetadata requirements\nconst createMetadata = (postData: ExtendedPostCreateParams): PostMetadata => {\n  // Convert string type to enum\n  const postType = \n    typeof postData.type === 'string' \n      ? postData.type === 'TEXT' ? PostType.TEXT\n      : postData.type === 'IMAGE' ? PostType.IMAGE\n      : postData.type === 'VIDEO' ? PostType.VIDEO\n      : postData.type === 'LINK' ? PostType.LINK\n      : postData.type === 'EVENT' ? PostType.EVENT\n      : postData.type === 'POLL' ? PostType.POLL\n      : PostType.TEXT\n      : PostType.TEXT;\n\n  return {\n    type: postType,\n    content: postData.content,\n    title: postData.title || '',\n    description: postData.description || '',\n    tags: postData.tags || [],\n    media: postData.mediaContent?.map((m: any) => ({\n      url: m.url,\n      type: m.type,\n      width: m.width,\n      height: m.height,\n    })) || [],\n    // Handle event data\n    event: postData.type === 'EVENT' && postData.eventDetails ? {\n      title: postData.eventDetails.title || postData.title || '',\n      startDate: postData.eventDetails.startDate,\n      endDate: postData.eventDetails.endDate,\n      location: postData.eventDetails.location,\n    } : undefined,\n    // Handle poll data\n    poll: postData.type === 'POLL' && postData.pollDetails ? {\n      question: postData.title || 'Poll',\n      options: Array.isArray(postData.pollDetails.options) \n        ? typeof postData.pollDetails.options[0] === 'string'\n          ? postData.pollDetails.options \n          : postData.pollDetails.options.map((o: any) => o.text || o.toString())\n        : [],\n      endDate: postData.pollDetails.endDate,\n    } : undefined,\n    // Add required createdAt field\n    createdAt: new Date().toISOString(),\n  };\n};\n\nexport const createPost = createAsyncThunk(\n  'posts/createPost',\n  async (postData: any, { rejectWithValue }) => {\n    try {\n      // Call the blockchain utility\n      const postId = await createBlockchainPost(postData);\n      console.log(`[createPost]: Post created with hash in PostSlice: ${postData}`);\n      // Return the created post with ID\n      return {\n        id: postId,\n        ...postData,\n        createdAt: Date.now()\n      };\n    } catch (error: any) {\n      console.error('Error in createPost thunk:', error);\n      return rejectWithValue(error.message || 'Failed to create post');\n    }\n  }\n);\n\nexport const fetchPostsByTribe = createAsyncThunk(\n  'posts/fetchByTribe',\n  async (tribeId: string, { rejectWithValue }) => {\n    try {\n      // Mock API call to fetch posts\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // In a real app, this would call an API to fetch posts\n      // For now, we'll generate some dummy data\n      const dummyPosts: Post[] = [];\n      for (let i = 0; i < 5; i++) {\n        const postTypeString = ['TEXT', 'EVENT', 'POLL', 'IMAGE', 'VIDEO'][i % 5];\n        const postType = \n          postTypeString === 'TEXT' ? PostType.TEXT\n          : postTypeString === 'IMAGE' ? PostType.IMAGE\n          : postTypeString === 'VIDEO' ? PostType.VIDEO\n          : postTypeString === 'LINK' ? PostType.LINK\n          : postTypeString === 'EVENT' ? PostType.EVENT\n          : postTypeString === 'POLL' ? PostType.POLL\n          : PostType.TEXT;\n        \n        const post: Post = {\n          id: `post-${i}-${Date.now()}`,\n          content: `This is post #${i} content with some text content.`,\n          author: '0x0000000000000000000000000000000000000000',\n          createdAt: Date.now() - (i * 86400000), // days ago\n          type: postType,\n          tribeId: parseInt(tribeId),\n          metadata: {\n            type: postType,\n            content: `This is post #${i} content with some text content.`,\n            title: `Post #${i}`,\n            description: `This is a ${postTypeString} post #${i}`,\n            tags: [],\n            createdAt: new Date(Date.now() - (i * 86400000)).toISOString(),\n            event: postTypeString === 'EVENT' ? {\n              title: `Event #${i}`,\n              startDate: new Date(Date.now() + 86400000).toISOString(),\n              endDate: new Date(Date.now() + 90000000).toISOString(),\n              location: 'Virtual',\n            } : undefined,\n            poll: postTypeString === 'POLL' ? {\n              question: `Poll Question #${i}`,\n              options: ['Option 1', 'Option 2'],\n              endDate: new Date(Date.now() + 86400000).toISOString(),\n            } : undefined,\n          },\n          stats: {\n            viewCount: Math.floor(Math.random() * 500),\n            shareCount: Math.floor(Math.random() * 10),\n            saveCount: Math.floor(Math.random() * 5),\n            commentCount: Math.floor(Math.random() * 20),\n            likeCount: Math.floor(Math.random() * 50),\n          }\n        };\n        \n        dummyPosts.push(post);\n      }\n      \n      return dummyPosts;\n    } catch (error) {\n      return rejectWithValue('Failed to fetch posts');\n    }\n  }\n);\n\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    setCreatingPost: (state, action: PayloadAction<boolean>) => {\n      state.creatingPost = action.payload;\n    },\n    // Re-add the setPostType action for backward compatibility\n    setPostType: (state, action: PayloadAction<PostType | string>) => {\n      state.draft.type = typeof action.payload === 'string' ? action.payload : PostType[action.payload];\n    },\n    updateDraft: (state, action: PayloadAction<Partial<ExtendedPostCreateParams>>) => {\n      state.draft = {\n        ...state.draft,\n        ...action.payload\n      };\n    },\n    resetDraft: (state) => {\n      state.draft = initialState.draft;\n    },\n    updatePostStatus: (state, action: PayloadAction<{ txHash: string; confirmed: boolean; postId?: string }>) => {\n      const { txHash, confirmed, postId } = action.payload;\n      // Find post by blockchain transaction hash\n      const post = state.posts.find(p => {\n        if (p.metadata) {\n          const blockchainData = p.metadata.blockchainData as BlockchainData | undefined;\n          return blockchainData?.txHash === txHash;\n        }\n        return false;\n      });\n      \n      if (post && post.metadata) {\n        // Update blockchain data if it exists\n        const blockchainData = post.metadata.blockchainData as BlockchainData | undefined;\n        if (blockchainData) {\n          blockchainData.confirmed = confirmed;\n        } else {\n          // Create blockchain data if it doesn't exist\n          post.metadata.blockchainData = {\n            txHash: txHash as `0x${string}`,\n            confirmed\n          };\n        }\n        \n        // Update post ID if provided\n        if (postId) {\n          post.id = postId;\n        }\n      }\n      \n      // Remove from pending posts if confirmed\n      if (confirmed) {\n        state.pendingPosts = state.pendingPosts.filter(hash => hash !== txHash);\n      }\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(createPost.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(createPost.fulfilled, (state, action) => {\n        state.loading = false;\n        state.posts.unshift(action.payload);\n        state.creatingPost = false;\n        state.draft = initialState.draft;\n      })\n      .addCase(createPost.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload as string;\n      })\n      .addCase(fetchPostsByTribe.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchPostsByTribe.fulfilled, (state, action) => {\n        state.loading = false;\n        state.posts = action.payload;\n      })\n      .addCase(fetchPostsByTribe.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload as string;\n      });\n  }\n});\n\nexport const { setCreatingPost, setPostType, updateDraft, resetDraft, updatePostStatus } = postsSlice.actions;\n\nexport const selectPostsState = (state: RootState) => state.posts;\nexport const selectPostDraft = (state: RootState) => state.posts.draft;\nexport const selectCreatingPost = (state: RootState) => state.posts.creatingPost;\nexport const selectPostsError = (state: RootState) => state.posts.error;\nexport const selectPendingPosts = (state: RootState) => state.posts.pendingPosts;\n\nexport default postsSlice.reducer; ","import { useState, useCallback, useEffect } from 'react'\nimport { WalletClient, createWalletClient, custom } from 'viem'\nimport { useAccount, useConnect, useDisconnect } from 'wagmi'\nimport { injected } from 'wagmi/connectors'\nimport { useNetwork } from './useNetwork'\n\nexport const useWallet = () => {\n  const { address, isConnected } = useAccount()\n  const { chainId } = useNetwork()\n  const { connectAsync } = useConnect()\n  const { disconnectAsync } = useDisconnect()\n  const [walletClient, setWalletClient] = useState<WalletClient | null>(null)\n\n  // Initialize wallet client when connected\n  useEffect(() => {\n    const initWalletClient = async () => {\n      if (isConnected && window.ethereum) {\n        try {\n          console.log('[useWallet] Initializing wallet client with ethereum provider');\n          \n          // Create a wallet client using viem\n          const client = createWalletClient({\n            transport: custom(window.ethereum)\n          });\n          \n          console.log('[useWallet] Wallet client created:', { \n            hasClient: !!client,\n            hasAccount: !!client.account,\n            address: address\n          });\n          \n          setWalletClient(client);\n        } catch (error) {\n          console.error('[useWallet] Failed to initialize wallet client:', error);\n        }\n      } else if (!isConnected) {\n        setWalletClient(null);\n      }\n    };\n    \n    initWalletClient();\n  }, [isConnected, address]);\n\n  const connectWallet = useCallback(async () => {\n    try {\n      if (!window.ethereum) {\n        throw new Error('No ethereum provider found')\n      }\n      await connectAsync({\n        connector: injected()\n      })\n    } catch (error) {\n      console.error('Failed to connect wallet:', error)\n    }\n  }, [connectAsync])\n\n  const disconnectWallet = useCallback(async () => {\n    try {\n      await disconnectAsync()\n      setWalletClient(null)\n    } catch (error) {\n      console.error('Failed to disconnect wallet:', error)\n    }\n  }, [disconnectAsync])\n\n  return {\n    address,\n    isConnected,\n    chainId,\n    walletClient,\n    connectWallet,\n    disconnectWallet,\n  }\n} ","/**\n * Utilities for handling metadata in various formats\n */\nimport { MetadataCache, MetadataCacheEntry } from '../types/tribe';\n\n/**\n * Parse stringified BigInt values in an object\n * @param value String or numeric value\n * @returns Parsed BigInt value\n */\nexport const parseStringifiedBigInt = (value: string | number): bigint => {\n  if (typeof value === 'number') {\n    return BigInt(value);\n  }\n  // Handle stringified BigInt format (e.g. \"123n\")\n  if (typeof value === 'string' && value.endsWith('n')) {\n    return BigInt(value.slice(0, -1));\n  }\n  return BigInt(value);\n};\n\n/**\n * Replace BigInt values with strings in an object for JSON serialization\n * @param key Object key\n * @param value Object value\n * @returns Value with BigInt converted to string\n */\nexport const replaceBigIntWithString = (key: string, value: any): any => {\n  if (typeof value === 'bigint') {\n    return value.toString();\n  }\n  return value;\n};\n\n/**\n * Parse JSON metadata safely\n * @param metadata JSON string metadata\n * @param defaultValue Default value if parsing fails\n * @returns Parsed metadata object\n */\nexport const parseMetadata = <T>(metadata: string, defaultValue: T): T => {\n  try {\n    if (!metadata || metadata === '{}') {\n      return defaultValue;\n    }\n    return JSON.parse(metadata) as T;\n  } catch (error) {\n    console.error('Error parsing metadata:', error);\n    return defaultValue;\n  }\n};\n\n/**\n * Stringify metadata object safely\n * @param metadata Metadata object\n * @returns JSON string\n */\nexport const stringifyMetadata = (metadata: any): string => {\n  try {\n    return JSON.stringify(metadata, replaceBigIntWithString);\n  } catch (error) {\n    console.error('Error stringifying metadata:', error);\n    return '{}';\n  }\n};\n\n/**\n * In-memory metadata cache\n */\nconst metadataCache: MetadataCache = {};\n\n/**\n * Cache timeout in milliseconds (5 minutes)\n */\nconst CACHE_TIMEOUT_MS = 5 * 60 * 1000;\n\n/**\n * Get metadata from cache\n * @param key Cache key\n * @returns Cached metadata or undefined if not found/expired\n */\nexport const getMetadataFromCache = (key: string): MetadataCacheEntry | undefined => {\n  const cachedData = metadataCache[key];\n  if (!cachedData) {\n    return undefined;\n  }\n\n  // Check if cache is expired\n  if (Date.now() - cachedData.timestamp > CACHE_TIMEOUT_MS) {\n    delete metadataCache[key];\n    return undefined;\n  }\n\n  return cachedData;\n};\n\n/**\n * Store metadata in cache\n * @param key Cache key\n * @param data Data to cache\n * @param metadata Original metadata string\n */\nexport const storeMetadataInCache = (\n  key: string,\n  data: any,\n  metadata?: string\n): void => {\n  metadataCache[key] = {\n    data,\n    metadata,\n    timestamp: Date.now()\n  };\n};\n\n/**\n * Clear metadata cache\n * @param key Optional specific key to clear, clears all if not provided\n */\nexport const clearMetadataCache = (key?: string): void => {\n  if (key) {\n    delete metadataCache[key];\n  } else {\n    Object.keys(metadataCache).forEach(k => delete metadataCache[k]);\n  }\n}; ","export enum ErrorType {\n  CONNECTION_ERROR = 'CONNECTION_ERROR',\n  VALIDATION_ERROR = 'VALIDATION_ERROR',\n  CONTRACT_ERROR = 'CONTRACT_ERROR',\n  BLOCKCHAIN_ERROR = 'BLOCKCHAIN_ERROR',\n  ALREADY_EXISTS = 'ALREADY_EXISTS',\n  NOT_FOUND = 'NOT_FOUND',\n  UNAUTHORIZED = 'UNAUTHORIZED',\n  UNKNOWN = 'UNKNOWN'\n}\n\nexport interface ErrorDetails {\n  type: ErrorType;\n  message: string;\n  details?: any;\n} ","/**\n * Type mapping utilities\n * \n * These utilities help convert between different versions of the same types \n * to maintain compatibility during the transition to the new architecture.\n */\n\nimport { \n  Post, \n  PostType, \n  PostStats, \n  PostWithMetadata,\n  PostMetadata \n} from '../types/post';\nimport { Tribe, TribeData, NFTRequirement } from '../types/tribe';\nimport { User, ProfileData } from '../types/user';\nimport { PostInteractions } from '../types/interaction';\n\n/**\n * Convert blockchain post data to UI-ready post\n * @param postData Raw post data from blockchain\n * @returns Formatted post for UI display\n */\nexport function mapPostDataToUI(postData: any): Post {\n  // Format the post metadata into content\n  const content = postData.metadata?.content || '';\n  \n  // Calculate or provide default stats\n  const interactions = postData.interactions || {\n    likes: 0,\n    comments: 0,\n    shares: 0,\n    views: 0,\n    engagement: 0\n  };\n  \n  // Map stats from interactions\n  const stats: PostStats = {\n    likeCount: interactions.likes,\n    commentCount: interactions.comments,\n    shareCount: interactions.shares,\n    viewCount: interactions.views,\n    saveCount: 0\n  };\n  \n  // Create the metadata object if needed\n  const metadata: PostMetadata | undefined = postData.metadata ? {\n    type: postData.metadata.type || PostType.TEXT,\n    content: content,\n    title: postData.metadata.title,\n    createdAt: typeof postData.createdAt === 'string' ? \n      postData.createdAt : \n      new Date(postData.createdAt || Date.now()).toISOString()\n  } : undefined;\n  \n  // Ensure author has 0x prefix\n  const authorAddress = postData.creator || postData.author || '0x0000000000000000000000000000000000000000';\n  const formattedAuthor = authorAddress.startsWith('0x') ? \n    authorAddress as `0x${string}` : \n    `0x${authorAddress}` as `0x${string}`;\n  \n  // Return the formatted post that matches the Post interface\n  const mappedPost: Post = {\n    id: postData.id.toString(),\n    content,\n    author: formattedAuthor,\n    tribeId: Number(postData.tribeId),\n    createdAt: typeof postData.createdAt === 'string' \n      ? Math.floor(new Date(postData.createdAt).getTime() / 1000) \n      : (postData.createdAt || Math.floor(Date.now() / 1000)),\n    type: postData.metadata?.type || PostType.TEXT,\n    stats,\n    metadata\n  };\n  \n  return mappedPost;\n}\n\n// /**\n//  * Convert UI post to blockchain format\n//  * @param post UI post\n//  * @returns Post in blockchain format\n//  */\n// export function mapUIPostToBlockchain(post: Post): PostWithMetadata {\n//   // Create post metadata\n//   const metadata: PostMetadata = {\n//     type: post.type,\n//     content: post.content,\n//     title: post.title,\n//     createdAt: post.createdAt,\n//     media: post.mediaUrls?.map(url => ({\n//       url,\n//       type: url.toLowerCase().endsWith('.mp4') ? 'video' : 'image'\n//     }))\n//   };\n  \n//   // Create interactions\n//   const interactions: PostInteractions = {\n//     likes: post.stats?.likeCount || 0,\n//     comments: post.stats?.commentCount || 0,\n//     shares: post.stats?.shareCount || 0,\n//     views: post.stats?.viewCount || 0,\n//     engagement: 0\n//   };\n  \n//   // Return the blockchain format\n//   return {\n//     id: parseInt(post.id),\n//     creator: typeof post.author === 'string' ? post.author : post.author.id,\n//     tribeId: parseInt(post.tribeId),\n//     parentId: post.parentId ? parseInt(post.parentId) : null,\n//     metadata,\n//     isGated: post.isGated || false,\n//     collectibleContract: '0x0000000000000000000000000000000000000000',\n//     collectibleId: 0,\n//     createdAt: post.createdAt,\n//     interactions\n//   };\n// }\n\n/**\n * Convert blockchain tribe data to UI format\n * @param tribeData Tribe data from blockchain\n * @param chainId Chain ID\n * @returns UI-formatted tribe\n */\nexport function mapTribeDataToUI(tribeData: TribeData, chainId: number): Tribe {\n  console.log('Original tribeData before mapping:', JSON.stringify({\n    ...tribeData,\n    entryFee: tribeData.entryFee?.toString() || '0'\n  }));\n  \n  // Parse metadata if it's a string\n  let metadataObj: any = {};\n  if (typeof tribeData.metadata === 'string' && tribeData.metadata) {\n    try {\n      metadataObj = JSON.parse(tribeData.metadata);\n      console.log('Successfully parsed metadata string for tribe', tribeData.id, ':', metadataObj);\n    } catch (error) {\n      console.error(`Failed to parse tribe ${tribeData.id} metadata:`, error);\n    }\n  } else if (typeof tribeData.metadata === 'object' && tribeData.metadata !== null) {\n    metadataObj = tribeData.metadata;\n    console.log('Using metadata object directly for tribe', tribeData.id, ':', metadataObj);\n  }\n  \n  // Get basic properties with improved name handling\n  const contractName = tribeData.name || '';\n  const metadataName = metadataObj?.name || metadataObj?.displayName || '';\n  const tribeId = tribeData.id.toString();\n  \n  // Log all possible name sources for debugging\n  console.log(`Tribe ${tribeId} name sources:`, {\n    contractName,\n    metadataName,\n    rawMetadataString: typeof tribeData.metadata === 'string' ? \n      (tribeData.metadata.length > 100 ? `${tribeData.metadata.substring(0, 100)}...` : tribeData.metadata) : \n      'Not a string'\n  });\n  \n  // Determine the best name to use with detailed logging\n  let name: string;\n  \n  // Check if contract name is meaningful (not empty and not a generic \"Tribe X\" format)\n  const isGenericContractName = !contractName || \n    contractName === `Tribe ${tribeId}` || \n    contractName.trim() === '';\n  \n  // Check if metadata name is meaningful\n  const hasMetadataName = metadataName && metadataName.trim() !== '';\n  \n  if (!isGenericContractName) {\n    // Use contract name if it's meaningful\n    name = contractName.trim();\n    console.log(`Using contract name for tribe ${tribeId}: \"${name}\"`);\n  } else if (hasMetadataName) {\n    // Use metadata name if contract name is generic but metadata name exists\n    name = metadataName.trim();\n    console.log(`Using metadata name for tribe ${tribeId}: \"${name}\"`);\n  } else {\n    // Use a better default format if neither is available\n    name = `Tribe #${tribeId}`;\n    console.log(`Using default name for tribe ${tribeId}: \"${name}\"`);\n  }\n  \n  // Determine creation time - try to use value from metadata if available\n  let createdAt: number;\n  if (metadataObj?.createdAt) {\n    try {\n      // Try to parse the createdAt from metadata (could be string date or timestamp)\n      if (typeof metadataObj.createdAt === 'string') {\n        createdAt = Math.floor(new Date(metadataObj.createdAt).getTime() / 1000);\n      } else {\n        createdAt = Number(metadataObj.createdAt);\n      }\n    } catch (e) {\n      createdAt = tribeData.createdAt || Math.floor(Date.now() / 1000);\n    }\n  } else {\n    createdAt = tribeData.createdAt || Math.floor(Date.now() / 1000);\n  }\n  \n  // Get membership status\n  const isMember = tribeData.userMembershipStatus?.isMember || false;\n  const isAdmin = tribeData.userMembershipStatus?.isAdmin || false;\n  \n  // Process NFT requirements\n  const nftRequirements: NFTRequirement[] = tribeData.nftRequirements || [];\n  \n  // Convert entry fee to bigint\n  let entryFee: bigint;\n  try {\n    if (typeof tribeData.entryFee === 'bigint') {\n      entryFee = tribeData.entryFee;\n    } else if (typeof tribeData.entryFee === 'string') {\n      entryFee = BigInt(tribeData.entryFee);\n    } else if (typeof tribeData.entryFee === 'number') {\n      entryFee = BigInt(tribeData.entryFee);\n    } else {\n      entryFee = BigInt(0);\n    }\n  } catch (e) {\n    console.error('Error converting entryFee to bigint:', e);\n    entryFee = BigInt(0);\n  }\n\n  // Create the UI tribe object\n  return {\n    id: tribeId,\n    name,\n    metadata: typeof tribeData.metadata === 'string' ? tribeData.metadata : JSON.stringify(metadataObj),\n    owner: tribeData.owner,\n    admins: tribeData.admins || [],\n    memberCount: tribeData.memberCount,\n    createdAt,\n    joinType: tribeData.joinType,\n    entryFee,\n    nftRequirements\n  };\n}\n\n// /**\n//  * Convert profile data to user format\n//  * @param profile Profile data\n//  * @returns User data\n//  */\n// export function mapProfileToUser(profile: ProfileData): User {\n//   return {\n//     id: profile.id.toString(),\n//     username: profile.username,\n//     address: profile.walletAddress,\n//     avatar: profile.avatar || '',\n//     bio: profile.metadata?.bio || '',\n//     website: profile.metadata?.website,\n//     twitter: profile.metadata?.twitter,\n//     createdAt: profile.createdAt,\n//     isVerified: false,\n//     postCount: 0,\n//     followerCount: 0,\n//     followingCount: 0\n//   };\n// } ","/**\n * Implementation of the Tribe Service\n */\nimport { ITribeService } from './ITribeService';\nimport { getPublicClient, getContracts } from '../../config/contracts';\nimport { \n  Tribe, \n  TribeConfig, \n  TribeConfigResponse, \n  TribeData, \n  NFTRequirement,\n  TribeMetadata\n} from '../../types/tribe';\nimport { parseMetadata, getMetadataFromCache, storeMetadataInCache } from '../../utils/metadataUtils';\nimport { \n  getCurrentChainId, \n  extractMetadataFromTransaction, \n  getChainConfig,\n  waitForTransaction\n} from '../../utils/blockchainUtils';\nimport { ErrorType } from '../../types/error';\nimport { createWalletClient, custom, WalletClient } from 'viem';\nimport { getEthereumProvider } from '../../utils/ethereum';\nimport { mapTribeDataToUI } from '../../utils/typeMappers';\n\n/**\n * Service for interacting with tribes on the blockchain\n */\nexport class TribeService implements ITribeService {\n  private chainId: number;\n  private walletClient: WalletClient | undefined;\n  private publicClient: any;\n  private userAddress: `0x${string}` | undefined;\n\n  private static CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache duration\n  private static INVALID_TRIBE_IDS = new Set<number>(); // Track invalid tribe IDs\n\n  /**\n   * Create a new TribeService\n   * @param chainId Chain ID to use\n   */\n  constructor(chainId: number) {\n    this.chainId = chainId;\n    this.initializeClients();\n  }\n\n  /**\n   * Initialize blockchain clients\n   */\n  private async initializeClients(): Promise<void> {\n    try {\n      this.publicClient = getPublicClient(this.chainId);\n      \n      // Only initialize wallet client if we have a provider\n      const provider = await getEthereumProvider();\n      if (provider) {\n        const [account] = await provider.request({ method: 'eth_requestAccounts' });\n        if (account) {\n          this.userAddress = account as `0x${string}`;\n          this.walletClient = createWalletClient({\n            account,\n            chain: getChainConfig(this.chainId),\n            transport: custom(provider)\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Failed to initialize clients:', error);\n    }\n  }\n\n  /**\n   * Handle errors consistently\n   * @param type Error type\n   * @param message Error message\n   * @param originalError Original error\n   * @returns Error object\n   */\n  private handleError(type: ErrorType, message: string, originalError?: any): Error {\n    console.error(`${type}: ${message}`, originalError);\n    const error = new Error(message);\n    (error as any).type = type;\n    (error as any).originalError = originalError;\n    return error;\n  }\n\n  /**\n   * Connect wallet to the service\n   * @param walletClient Wallet client\n   * @param address User address\n   */\n  public async connect(walletClient: WalletClient, address: string): Promise<void> {\n    this.walletClient = walletClient;\n    this.userAddress = address as `0x${string}`;\n  }\n\n  /**\n   * Create a new tribe\n   * @param name Tribe name\n   * @param metadata Tribe metadata\n   * @param admins Admin addresses\n   * @param joinType Join type\n   * @param entryFee Entry fee\n   * @param nftRequirements NFT requirements\n   * @returns Created tribe ID\n   */\n  public async createTribe(\n    name: string,\n    metadata: string,\n    admins: string[] = [],\n    joinType: number = 0,\n    entryFee: bigint = 0n,\n    nftRequirements: NFTRequirement[] = []\n  ): Promise<number> {\n    if (!this.walletClient || !this.userAddress) {\n      throw this.handleError(ErrorType.CONNECTION_ERROR, 'Wallet not connected');\n    }\n\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      const chain = getChainConfig(this.chainId);\n      \n      // Ensure creator is in admins list\n      if (!admins.includes(this.userAddress as string)) {\n        admins = [...admins, this.userAddress as string];\n      }\n      \n      // Validate and clean inputs\n      const trimmedName = name.trim();\n      if (!trimmedName) {\n        throw this.handleError(ErrorType.VALIDATION_ERROR, 'Tribe name cannot be empty');\n      }\n      \n      // Parse metadata to ensure name is included\n      let metadataObj;\n      try {\n        metadataObj = JSON.parse(metadata);\n        // Ensure name is in metadata\n        if (!metadataObj.name || metadataObj.name.trim() === '') {\n          metadataObj.name = trimmedName;\n          metadata = JSON.stringify(metadataObj);\n        }\n      } catch (error) {\n        console.error(\"Couldn't parse metadata JSON:\", error);\n        // If metadata parsing fails, ensure we continue with valid empty metadata\n        metadata = JSON.stringify({ name: trimmedName });\n      }\n      \n      // Log the final data being sent to the contract\n      console.log('Creating tribe with:', {\n        name: trimmedName,\n        metadataPreview: typeof metadataObj === 'object' ? \n          { ...metadataObj, fullString: metadata.length > 100 ? `${metadata.substring(0, 100)}...` : metadata } : \n          { error: 'Invalid metadata', metadata },\n        admins,\n        joinType,\n        entryFee: entryFee.toString()\n      });\n\n      // Create tribe transaction\n      const hash = await this.walletClient.writeContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'createTribe',\n        args: [trimmedName, metadata, admins, BigInt(joinType), entryFee, nftRequirements],\n        account: this.userAddress,\n        chain\n      });\n\n      // Wait for transaction confirmation\n      const receipt = await waitForTransaction(hash, this.chainId);\n      \n      // Extract tribe ID from event\n      const tribeCreatedEvent = receipt.logs.find(\n        (log: any) => log.address.toLowerCase() === tribeController.address.toLowerCase()\n      );\n\n      if (!tribeCreatedEvent || !tribeCreatedEvent.topics[1]) {\n        throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to get tribe ID from transaction');\n      }\n\n      const tribeId = parseInt(tribeCreatedEvent.topics[1], 16);\n      return tribeId;\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to create tribe', error);\n    }\n  }\n\n  /**\n   * Get tribe configuration\n   * @param tribeId Tribe ID\n   * @returns Tribe configuration\n   */\n  public async getTribeConfig(tribeId: number): Promise<TribeConfig> {\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      const publicClient = getPublicClient(this.chainId);\n      \n      let rawConfig: unknown;\n      let config: TribeConfigResponse = { success: true };\n      \n      try {\n        rawConfig = await publicClient.readContract({\n          address: tribeController.address,\n          abi: tribeController.abi,\n          functionName: 'getTribeConfigView',\n          args: [BigInt(tribeId)]\n        });\n        \n        // Handle different response formats\n        if (Array.isArray(rawConfig)) {\n          console.log(`Tribe ${tribeId} raw config (array):`, rawConfig);\n          config = {\n            success: true,\n            name: rawConfig[0] || `Tribe ${tribeId}`,\n            metadata: rawConfig[1] || '{}',\n            admins: rawConfig[2] || [],\n            joinType: Number(rawConfig[3] || 0),\n            entryFee: (rawConfig[4] || 0).toString(),\n            nftRequirements: rawConfig[5] || []\n          };\n        } else if (typeof rawConfig === 'object' && rawConfig !== null) {\n          // Ensure all required fields exist with fallbacks\n          const rc = rawConfig as any;\n          console.log(`Tribe ${tribeId} raw config (object):`, rc);\n          config = {\n            success: true,\n            name: rc.name || `Tribe ${tribeId}`,\n            metadata: rc.metadata || '{}',\n            admins: Array.isArray(rc.admins) ? rc.admins : [],\n            joinType: typeof rc.joinType === 'number' ? rc.joinType : 0,\n            entryFee: rc.entryFee?.toString() || '0',\n            nftRequirements: Array.isArray(rc.nftRequirements) ? rc.nftRequirements : []\n          };\n        } else {\n          throw new Error('Invalid config format');\n        }\n      } catch (error) {\n        console.error('Error getting tribe config from contract:', error);\n        config = {\n          success: false,\n          error: 'Failed to get tribe config'\n        };\n      }\n\n      // If config was successfully fetched from contract\n      if (config.success && config.metadata) {\n        // Parse metadata\n        let parsedMetadata;\n        try {\n          // Log the raw metadata string for debugging\n          console.log(`Tribe ${tribeId} raw metadata string:`, config.metadata);\n          \n          parsedMetadata = parseMetadata<TribeMetadata>(config.metadata, {\n            description: '',\n            createdAt: new Date().toISOString()\n          });\n          console.log(`Tribe ${tribeId} parsed metadata:`, parsedMetadata);\n        } catch (error) {\n          console.error(`Error parsing metadata for tribe ${tribeId}:`, error);\n          parsedMetadata = {\n            description: '',\n            createdAt: new Date().toISOString()\n          };\n        }\n\n        // Determine the best name to use\n        let name = config.name || `Tribe ${tribeId}`;\n        \n        // If we have a name in metadata and it's not empty, consider using it\n        if (parsedMetadata.name && parsedMetadata.name.trim() !== '') {\n          // If the contract name is generic (like \"Tribe 1\"), use the metadata name\n          if (!name || name === `Tribe ${tribeId}` || name.trim() === '') {\n            name = parsedMetadata.name.trim();\n            console.log(`Using metadata name for tribe ${tribeId}: \"${name}\"`);\n          } else {\n            console.log(`Keeping contract name for tribe ${tribeId}: \"${name}\" (metadata name was: \"${parsedMetadata.name}\")`);\n          }\n        }\n\n        return {\n          name,\n          description: parsedMetadata.description || '',\n          coverImage: parsedMetadata.coverImage,\n          avatar: parsedMetadata.avatar,\n          isPrivate: parsedMetadata.isPrivate || false,\n          entryFee: config.entryFee || '0',\n          nftRequirements: config.nftRequirements || [],\n          metadata: parsedMetadata,\n          admins: config.admins || [],\n          joinType: config.joinType || 0\n        };\n      }\n\n      // Fallback to extracting metadata from transaction\n      try {\n        const metadataStr = await extractMetadataFromTransaction(\n          this.chainId,\n          tribeId,\n          publicClient\n        );\n        \n        const parsedMetadata = parseMetadata<TribeMetadata>(metadataStr, {\n          description: '',\n          createdAt: new Date().toISOString()\n        });\n\n        return {\n          name: config.name || `Tribe ${tribeId}`,\n          description: parsedMetadata.description || '',\n          coverImage: parsedMetadata.coverImage,\n          avatar: parsedMetadata.avatar,\n          isPrivate: parsedMetadata.isPrivate || false,\n          entryFee: config.entryFee || '0',\n          nftRequirements: config.nftRequirements || [],\n          metadata: parsedMetadata,\n          admins: config.admins || [],\n          joinType: config.joinType || 0\n        };\n      } catch (error) {\n        console.error('Error extracting metadata from transaction:', error);\n      }\n\n      // Final fallback\n      return {\n        name: config.name || `Tribe ${tribeId}`,\n        description: '',\n        isPrivate: false,\n        entryFee: '0',\n        nftRequirements: [],\n        metadata: {\n          description: '',\n          createdAt: new Date().toISOString()\n        },\n        admins: config.admins || [],\n        joinType: config.joinType || 0\n      };\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to get tribe config', error);\n    }\n  }\n\n  /**\n   * Get tribe data\n   * @param tribeId Tribe ID\n   * @returns Tribe data\n   */\n  public async getTribeData(tribeId: number): Promise<TribeData> {\n    try {\n      // Check if tribe ID is known to be invalid\n      if (TribeService.INVALID_TRIBE_IDS.has(tribeId)) {\n        throw new Error('Invalid tribe ID');\n      }\n\n      // Check cache first\n      const cacheKey = `tribe_${this.chainId}_${tribeId}`;\n      const cachedData = getMetadataFromCache(cacheKey);\n      \n      if (cachedData) {\n        const age = Date.now() - cachedData.timestamp;\n        if (age < TribeService.CACHE_DURATION) {\n          return cachedData.data as TribeData;\n        }\n      }\n      \n      const { tribeController } = getContracts(this.chainId);\n      \n      // First try getTribeDetails as it provides the most complete information\n      try {\n        const details = await this.publicClient.readContract({\n          address: tribeController.address,\n          abi: tribeController.abi,\n          functionName: 'getTribeDetails',\n          args: [BigInt(tribeId)]\n        });\n\n        // Parse metadata\n        let metadataObj: TribeMetadata = {\n          description: '',\n          createdAt: new Date().toISOString(),\n          isPrivate: false,\n          avatar: '',\n          coverImage: '',\n          topics: []\n        };\n        \n        try {\n          const parsed = JSON.parse(details.metadata || '{}');\n          metadataObj = {\n            ...metadataObj,\n            ...parsed\n          };\n        } catch (error) {\n          console.error(`Error parsing metadata for tribe ${tribeId}:`, error);\n        }\n\n        const tribeData: TribeData = {\n          id: tribeId.toString(),\n          name: details.name || `Tribe #${tribeId}`,\n          metadata: details.metadata || '{}',\n          owner: details.admin,\n          admins: [],\n          memberCount: Number(details.memberCount),\n          createdAt: Math.floor(Date.now() / 1000),\n          joinType: Number(details.joinType),\n          entryFee: details.entryFee,\n          nftRequirements: [],\n          isPrivate: Boolean(metadataObj.isPrivate),\n          isActive: details.isActive,\n          canMerge: details.canMerge,\n          members: []\n        };\n\n        // Get NFT requirements and other data in parallel\n        const [configView, admins, userStatus] = await Promise.all([\n          this.getNFTRequirements(tribeId),\n          this.getTribeAdmins(tribeId),\n          this.userAddress ? this.getMemberStatus(tribeId, this.userAddress) : Promise.resolve(null)\n        ]);\n\n        // Update tribe data with fetched information\n        tribeData.nftRequirements = configView?.nftRequirements || [];\n        tribeData.admins = admins;\n        tribeData.members = admins.map(address => ({\n          id: address,\n          username: address,\n          avatar: `https://api.dicebear.com/7.x/shapes/svg?seed=${address}`,\n          role: 'admin'\n        }));\n\n        if (userStatus !== null) {\n          tribeData.userMembershipStatus = {\n            isMember: userStatus === 1,\n            isAdmin: userStatus === 2,\n            isPending: userStatus === 3,\n            status: userStatus\n          };\n        }\n\n        // Cache the result\n        storeMetadataInCache(cacheKey, {\n          data: tribeData,\n          timestamp: Date.now()\n        });\n        \n        return tribeData;\n      } catch (error: any) {\n        // If the error is due to invalid tribe ID, cache this information\n        if (error?.message?.includes('Invalid tribe ID')) {\n          TribeService.INVALID_TRIBE_IDS.add(tribeId);\n        }\n        throw error;\n      }\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to get tribe data', error);\n    }\n  }\n\n  /**\n   * Get NFT requirements for a tribe\n   */\n  private async getNFTRequirements(tribeId: number): Promise<{ nftRequirements: NFTRequirement[] } | null> {\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      const configView = await this.publicClient.readContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'getTribeConfigView',\n        args: [BigInt(tribeId)]\n      });\n      return configView as { nftRequirements: NFTRequirement[] };\n    } catch (error) {\n      console.error(`Error fetching NFT requirements for tribe ${tribeId}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Get admins for a tribe\n   */\n  private async getTribeAdmins(tribeId: number): Promise<`0x${string}`[]> {\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      const admins = await this.publicClient.readContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'getTribeWhitelist',\n        args: [BigInt(tribeId)]\n      }) as `0x${string}`[];\n      return admins;\n    } catch (error) {\n      console.error(`Error fetching admins for tribe ${tribeId}:`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Join a tribe\n   * @param tribeId Tribe ID\n   */\n  public async joinTribe(tribeId: number): Promise<void> {\n    if (!this.walletClient || !this.userAddress) {\n      throw this.handleError(ErrorType.CONNECTION_ERROR, 'Wallet not connected');\n    }\n\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      const chain = getChainConfig(this.chainId);\n      \n      const hash = await this.walletClient.writeContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'joinTribe',\n        args: [BigInt(tribeId)],\n        account: this.userAddress,\n        chain\n      });\n\n      await waitForTransaction(hash, this.chainId);\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to join tribe', error);\n    }\n  }\n\n  /**\n   * Request to join a tribe\n   * @param tribeId Tribe ID\n   * @param entryFee Entry fee\n   */\n  public async requestToJoinTribe(tribeId: number, entryFee: bigint): Promise<void> {\n    if (!this.walletClient || !this.userAddress) {\n      throw this.handleError(ErrorType.CONNECTION_ERROR, 'Wallet not connected');\n    }\n\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      const chain = getChainConfig(this.chainId);\n      \n      const hash = await this.walletClient.writeContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'requestToJoinTribe',\n        args: [BigInt(tribeId)],\n        value: entryFee,\n        account: this.userAddress,\n        chain\n      });\n\n      await waitForTransaction(hash, this.chainId);\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to request to join tribe', error);\n    }\n  }\n\n  /**\n   * Get member status in tribe\n   * @param tribeId Tribe ID\n   * @param memberAddress Member address\n   * @returns Member status\n   */\n  public async getMemberStatus(tribeId: number, memberAddress: string): Promise<number> {\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      \n      const status = await this.publicClient.readContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'getMemberStatus',\n        args: [BigInt(tribeId), memberAddress as `0x${string}`]\n      });\n\n      return Number(status);\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to get member status', error);\n    }\n  }\n\n  /**\n   * Get the total number of tribes\n   * @returns Tribes count\n   */\n  public async getTribesCount(): Promise<number> {\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      \n      const nextId = await this.publicClient.readContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'nextTribeId',\n        args: []\n      }) as bigint;\n      \n      console.log(`Got tribes count from nextTribeId: ${nextId}`);\n      return Number(nextId);\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to get tribes count', error);\n    }\n  }\n\n  /**\n   * Get user tribes\n   * @param userAddress User address\n   * @returns Array of tribe IDs\n   */\n  public async getUserTribes(userAddress: string): Promise<number[]> {\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      \n      const tribes = await this.publicClient.readContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'getUserTribes',\n        args: [userAddress as `0x${string}`]\n      }) as bigint[];\n\n      return tribes.map(Number);\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to get user tribes', error);\n    }\n  }\n\n  /**\n   * Map tribe data to UI format\n   * @param tribeData Tribe data\n   * @param chainId Chain ID\n   * @returns UI-formatted tribe\n   */\n  public mapTribeDataToUIFormat(tribeData: TribeData, chainId: number): Tribe {\n    // Use the shared utility function from typeMappers\n    return mapTribeDataToUI(tribeData, chainId);\n  }\n} ","import { WalletClient, Address } from 'viem';\nimport { IProfileService } from './IProfileService';\nimport { ProfileData, ProfileMetadata } from '../../types/user';\nimport { getPublicClient, getContracts } from '../../config/contracts';\nimport { getCurrentChain } from '../../constants/contracts';\n\nexport class ProfileService implements IProfileService {\n  private chainId: number;\n  private walletClient: WalletClient | null = null;\n  private userAddress: string | null = null;\n\n  constructor(chainId: number) {\n    this.chainId = chainId;\n  }\n\n  async connect(walletClient: WalletClient, address: string): Promise<void> {\n    this.walletClient = walletClient;\n    this.userAddress = address;\n  }\n\n  /**\n   * Check if the wallet is connected\n   * @returns Whether the wallet is connected\n   */\n  isWalletConnected(): boolean {\n    return !!this.walletClient && !!this.userAddress;\n  }\n\n  async getProfileById(profileId: number): Promise<ProfileData> {\n    const publicClient = getPublicClient(this.chainId);\n    const { profileNFTMinter } = getContracts(this.chainId);\n\n    const result = await publicClient.readContract({\n      address: profileNFTMinter.address,\n      abi: profileNFTMinter.abi,\n      functionName: 'getProfileByTokenId',\n      args: [BigInt(profileId)]\n    }) as [string, string, Address];\n\n    const [username, metadataStr] = result;\n    const metadata = this.parseMetadata(metadataStr);\n\n    return {\n      tokenId: profileId.toString(),\n      username,\n      metadata,\n      nftUri: metadata.avatar,\n      owner: this.userAddress || ''\n    };\n  }\n\n  async getProfileByUsername(username: string): Promise<ProfileData> {\n    const publicClient = getPublicClient(this.chainId);\n    const { profileNFTMinter } = getContracts(this.chainId);\n\n    const profileId = await publicClient.readContract({\n      address: profileNFTMinter.address,\n      abi: profileNFTMinter.abi,\n      functionName: 'getProfileIdByUsername',\n      args: [username]\n    }) as bigint;\n\n    return this.getProfileById(Number(profileId));\n  }\n\n  async getProfileByAddress(address: string): Promise<ProfileData | null> {\n    console.log(`[ProfileService] Getting profile for address: ${address}`);\n    try {\n      const publicClient = getPublicClient(this.chainId);\n      const { profileNFTMinter } = getContracts(this.chainId);\n\n      // First check if the address has a profile NFT\n      const balance = await publicClient.readContract({\n        address: profileNFTMinter.address,\n        abi: profileNFTMinter.abi,\n        functionName: 'balanceOf',\n        args: [address as Address]\n      }) as bigint;\n\n      console.log(`[ProfileService] Profile NFT balance for ${address}: ${balance}`);\n\n      if (!balance || balance === 0n) {\n        console.log(`[ProfileService] No profile found for address ${address}`);\n        return null;\n      }\n\n      // Find the token ID by checking ownership\n      let userTokenId: bigint | null = null;\n      for (let i = 0; i < 10; i++) {\n        try {\n          const owner = await publicClient.readContract({\n            address: profileNFTMinter.address,\n            abi: profileNFTMinter.abi,\n            functionName: 'ownerOf',\n            args: [BigInt(i)]\n          }) as Address;\n\n          if (owner.toLowerCase() === address.toLowerCase()) {\n            userTokenId = BigInt(i);\n            break;\n          }\n        } catch {\n          continue;\n        }\n      }\n\n      if (userTokenId === null) {\n        console.log(`[ProfileService] Could not find token ID for address ${address}`);\n        return null;\n      }\n\n      // Get profile data using token ID\n      const result = await publicClient.readContract({\n        address: profileNFTMinter.address,\n        abi: profileNFTMinter.abi,\n        functionName: 'getProfileByTokenId',\n        args: [userTokenId]\n      }) as [string, string, Address];\n\n      const [username, metadataStr] = result;\n      const metadata = this.parseMetadata(metadataStr);\n\n      console.log(`[ProfileService] Found profile for ${address}: ${username}`);\n\n      return {\n        tokenId: userTokenId.toString(),\n        username,\n        metadata,\n        nftUri: metadata.avatar,\n        owner: address\n      };\n    } catch (error) {\n      console.error(`[ProfileService] Error getting profile for ${address}:`, error);\n      return null;\n    }\n  }\n\n  async createProfile(username: string, metadata: ProfileMetadata): Promise<number> {\n    if (!this.walletClient) {\n      throw new Error('Wallet not connected: walletClient is missing');\n    }\n    \n    if (!this.userAddress) {\n      throw new Error('Wallet not connected: userAddress is missing');\n    }\n\n    const { profileNFTMinter } = getContracts(this.chainId);\n    const metadataStr = JSON.stringify(metadata);\n    const chain = getCurrentChain(this.chainId);\n\n    try {\n      const hash = await this.walletClient.writeContract({\n        chain,\n        address: profileNFTMinter.address,\n        abi: profileNFTMinter.abi,\n        functionName: 'createProfile',\n        args: [username, metadataStr],\n        account: this.userAddress as `0x${string}`\n      });\n\n      console.log(`Profile creation transaction submitted: ${hash}`);\n\n      // Wait for transaction receipt\n      const publicClient = getPublicClient(this.chainId);\n      const receipt = await publicClient.waitForTransactionReceipt({ hash });\n\n      // Find ProfileCreated event\n      const event = receipt.logs.find(log => \n        log.address.toLowerCase() === profileNFTMinter.address.toLowerCase()\n      );\n\n      if (!event || !event.topics || event.topics.length < 4) {\n        throw new Error('Failed to find profile creation event');\n      }\n\n      // Extract token ID from event\n      const tokenId = parseInt(event.topics[3] || '0', 16);\n      return tokenId;\n    } catch (error) {\n      console.error(`[ProfileService] Error creating profile:`, error);\n      throw error;\n    }\n  }\n\n  async updateProfileMetadata(profileId: number, metadata: ProfileMetadata): Promise<void> {\n    if (!this.walletClient || !this.userAddress) {\n      throw new Error('Wallet not connected');\n    }\n\n    const { profileNFTMinter } = getContracts(this.chainId);\n    const metadataStr = JSON.stringify(metadata);\n    const chain = getCurrentChain(this.chainId);\n\n    const hash = await this.walletClient.writeContract({\n      chain,\n      address: profileNFTMinter.address,\n      abi: profileNFTMinter.abi,\n      functionName: 'updateProfileMetadata',\n      args: [BigInt(profileId), metadataStr],\n      account: this.userAddress as Address\n    });\n\n    const publicClient = getPublicClient(this.chainId);\n    await publicClient.waitForTransactionReceipt({ hash });\n  }\n\n  async checkUsernameAvailability(username: string): Promise<boolean> {\n    const publicClient = getPublicClient(this.chainId);\n    const { profileNFTMinter } = getContracts(this.chainId);\n\n    return !(await publicClient.readContract({\n      address: profileNFTMinter.address,\n      abi: profileNFTMinter.abi,\n      functionName: 'usernameExists',\n      args: [username]\n    }));\n  }\n\n  async findUsernameByAddress(address: string): Promise<string | null> {\n    const profile = await this.checkProfileOwnership(address);\n    return profile ? profile.username : null;\n  }\n\n  async skipProfileCreation(address: string): Promise<boolean> {\n    try {\n      localStorage.setItem('profile_creation_skipped', JSON.stringify({\n        address,\n        timestamp: Date.now()\n      }));\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async hasSkippedProfileCreation(address: string): Promise<boolean> {\n    try {\n      const skipped = localStorage.getItem('profile_creation_skipped');\n      if (!skipped) return false;\n\n      const { address: skippedAddress } = JSON.parse(skipped);\n      return skippedAddress.toLowerCase() === address.toLowerCase();\n    } catch {\n      return false;\n    }\n  }\n\n  async checkProfileOwnership(address: string): Promise<ProfileData | null> {\n    return this.getProfileByAddress(address);\n  }\n\n  private parseMetadata(metadataStr: string): ProfileMetadata {\n    try {\n      const parsed = JSON.parse(metadataStr);\n      return {\n        avatar: parsed.avatar || '',\n        bio: parsed.bio || '',\n        createdAt: parsed.createdAt || Date.now()\n      };\n    } catch {\n      return {\n        avatar: '',\n        bio: '',\n        createdAt: Date.now()\n      };\n    }\n  }\n} ","import { IIndexerService } from './IIndexerService';\nimport { Post, PostType } from '../../types/post';\nimport { Tribe } from '../../types/tribe';\nimport { ProfileData } from '../../types/user';\nimport { getPublicClient, getContracts } from '../../config/contracts';\nimport { Address, getAddress } from 'viem';\n\ntype CacheUpdateCallback = (type: 'profile' | 'posts' | 'tribes', data: any) => void;\n\ninterface CacheData {\n  posts: {\n    byId: Record<string, Post>;\n    byUser: Record<Address, string[]>;\n    byTribe: Record<number, string[]>;\n    lastUpdate: number;\n  };\n  tribes: {\n    byId: Record<string, Tribe>;\n    byUser: Record<Address, string[]>;\n    lastUpdate: number;\n  };\n  profiles: {\n    byAddress: Record<Address, ProfileData>;\n    lastUpdate: number;\n  };\n}\n\nexport class IndexerService implements IIndexerService {\n  private chainId: number;\n  private cache: CacheData;\n  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n  private lastConnectedAddress: Address | null = null;\n  private cacheUpdateCallbacks: CacheUpdateCallback[] = [];\n\n  constructor(chainId: number) {\n    console.log(`[IndexerService] Initializing with chainId: ${chainId}`);\n    this.chainId = chainId;\n    this.cache = {\n      posts: {\n        byId: {},\n        byUser: {},\n        byTribe: {},\n        lastUpdate: 0\n      },\n      tribes: {\n        byId: {},\n        byUser: {},\n        lastUpdate: 0\n      },\n      profiles: {\n        byAddress: {},\n        lastUpdate: 0\n      }\n    };\n  }\n\n  // Helper to safely check if the error has a specific message\n  private hasErrorMessage(error: unknown, partialMessage: string): boolean {\n    return error instanceof Error && \n           typeof error.message === 'string' && \n           error.message.includes(partialMessage);\n  }\n\n  // Simplified method to log errors consistently\n  private logError(context: string, error: unknown): void {\n    if (error instanceof Error) {\n      console.error(`[IndexerService] ${context}:`, error.message);\n    } else {\n      console.error(`[IndexerService] ${context}:`, error);\n    }\n  }\n\n  // Add callback registration for cache updates\n  public onCacheUpdate(callback: CacheUpdateCallback): () => void {\n    this.cacheUpdateCallbacks.push(callback);\n    return () => {\n      this.cacheUpdateCallbacks = this.cacheUpdateCallbacks.filter(cb => cb !== callback);\n    };\n  }\n\n  private notifyCacheUpdate(type: 'profile' | 'posts' | 'tribes', data: any): void {\n    this.cacheUpdateCallbacks.forEach(callback => callback(type, data));\n  }\n\n  // Helper to normalize addresses\n  private normalizeAddress(address: string): Address {\n    try {\n      return getAddress(address.toLowerCase());\n    } catch (e) {\n      throw new Error(`Invalid address format: ${address}`);\n    }\n  }\n\n  // Posts\n  async getPostsSince(timestamp: number): Promise<Post[]> {\n    await this.ensureCacheValid('posts');\n    return Object.values(this.cache.posts.byId).filter(post => \n      Number(post.createdAt) >= timestamp\n    );\n  }\n\n  async getPostsByUser(address: string): Promise<Post[]> {\n    await this.ensureCacheValid('posts');\n    const postIds = this.cache.posts.byUser[this.normalizeAddress(address)] || [];\n    return postIds.map(id => this.cache.posts.byId[id]).filter(Boolean);\n  }\n\n  async getPostsByTribe(tribeId: number): Promise<Post[]> {\n    await this.ensureCacheValid('posts');\n    const postIds = this.cache.posts.byTribe[tribeId] || [];\n    return postIds.map(id => this.cache.posts.byId[id]).filter(Boolean);\n  }\n\n  // Tribes\n  async getTribesSince(timestamp: number): Promise<Tribe[]> {\n    await this.ensureCacheValid('tribes');\n    return Object.values(this.cache.tribes.byId).filter(tribe => \n      Number(tribe.createdAt) >= timestamp\n    );\n  }\n\n  async getTribesByUser(address: string): Promise<Tribe[]> {\n    await this.ensureCacheValid('tribes');\n    const tribeIds = this.cache.tribes.byUser[this.normalizeAddress(address)] || [];\n    return tribeIds.map(id => this.cache.tribes.byId[id]).filter(Boolean);\n  }\n\n  // Profiles\n  async getProfilesByAddresses(addresses: string[]): Promise<ProfileData[]> {\n    await this.ensureCacheValid('profiles');\n    return addresses\n      .map(addr => this.cache.profiles.byAddress[this.normalizeAddress(addr)])\n      .filter(Boolean);\n  }\n\n  async updateUserMetadata(address: string, metadata: string): Promise<void> {\n    const publicClient = getPublicClient(this.chainId);\n    const { profileNFTMinter } = getContracts(this.chainId);\n\n    // Get the token ID for the address\n    const balance = await publicClient.readContract({\n      address: profileNFTMinter.address,\n      abi: profileNFTMinter.abi,\n      functionName: 'balanceOf',\n      args: [this.normalizeAddress(address)]\n    }) as bigint;\n\n    if (!balance || balance === 0n) {\n      throw new Error('No profile found for address');\n    }\n\n    // Find the token ID owned by this address\n    for (let tokenId = 0n; tokenId < 100n; tokenId++) {\n      try {\n        const owner = await publicClient.readContract({\n          address: profileNFTMinter.address,\n          abi: profileNFTMinter.abi,\n          functionName: 'ownerOf',\n          args: [tokenId]\n        }) as Address;\n\n        if (owner.toLowerCase() === this.normalizeAddress(address).toLowerCase()) {\n          const result = await publicClient.readContract({\n            address: profileNFTMinter.address,\n            abi: profileNFTMinter.abi,\n            functionName: 'getProfileByTokenId',\n            args: [tokenId]\n          }) as [string, string, Address];\n\n          const [username, , profileOwner] = result;\n          const parsedMetadata = JSON.parse(metadata);\n\n          // Update cache\n          this.cache.profiles.byAddress[this.normalizeAddress(address)] = {\n            tokenId: tokenId.toString(),\n            username,\n            metadata: {\n              avatar: parsedMetadata.avatar || '',\n              bio: parsedMetadata.bio || '',\n              createdAt: parsedMetadata.createdAt || Date.now()\n            },\n            nftUri: parsedMetadata.avatar || '',\n            owner: profileOwner\n          };\n          break;\n        }\n      } catch {\n        continue;\n      }\n    }\n  }\n\n  // Cache management\n  clearCache(): void {\n    this.cache = {\n      posts: {\n        byId: {},\n        byUser: {},\n        byTribe: {},\n        lastUpdate: 0\n      },\n      tribes: {\n        byId: {},\n        byUser: {},\n        lastUpdate: 0\n      },\n      profiles: {\n        byAddress: {},\n        lastUpdate: 0\n      }\n    };\n  }\n\n  async refreshCache(): Promise<void> {\n    await Promise.all([\n      this.updatePostsCache(),\n      this.updateTribesCache(),\n      this.updateProfilesCache()\n    ]);\n  }\n\n  private async ensureCacheValid(type: keyof CacheData): Promise<void> {\n    const now = Date.now();\n    if (now - this.cache[type].lastUpdate > this.CACHE_TTL) {\n      switch (type) {\n        case 'posts':\n          await this.updatePostsCache();\n          break;\n        case 'tribes':\n          await this.updateTribesCache();\n          break;\n        case 'profiles':\n          await this.updateProfilesCache();\n          break;\n      }\n    }\n  }\n\n  private async updatePostsCache(): Promise<void> {\n    const publicClient = getPublicClient(this.chainId);\n    const { postMinter } = getContracts(this.chainId);\n\n    try {\n      // Get total posts count\n      const nextPostId = await publicClient.readContract({\n        address: postMinter.address,\n        abi: postMinter.abi,\n        functionName: 'nextPostId',\n        args: []\n      }) as bigint;\n\n      if (nextPostId === undefined) {\n        throw new Error('Failed to get post count from contract');\n      }\n\n      // Fetch posts in batches\n      const batchSize = 50n;\n      const totalPosts = nextPostId;\n      const batches = Math.ceil(Number(totalPosts) / Number(batchSize));\n\n      for (let i = 0; i < batches; i++) {\n        const start = BigInt(i) * batchSize;\n        const end = (start + batchSize) > totalPosts ? totalPosts : (start + batchSize);\n\n        for (let postId = start; postId < end; postId++) {\n          try {\n            const postData = await publicClient.readContract({\n              address: postMinter.address,\n              abi: postMinter.abi,\n              functionName: 'getPost',\n              args: [postId]\n            }) as [bigint, Address, bigint, string, boolean, Address, bigint, boolean, Address];\n\n            const [id, creator, tribeId, metadata, isGated, collectibleContract, collectibleId, isEncrypted, accessSigner] = postData;\n\n            // Parse metadata\n            let parsedMetadata;\n            try {\n              parsedMetadata = JSON.parse(metadata);\n            } catch (err) {\n              console.error(`Error parsing metadata for post ${postId}:`, err);\n              continue;\n            }\n\n            const post: Post = {\n              id: postId.toString(),\n              content: parsedMetadata.content || '',\n              author: creator,\n              tribeId: Number(tribeId),\n              createdAt: parsedMetadata.createdAt || Date.now(),\n              type: parsedMetadata.type || 'text'\n            };\n\n            // Update cache\n            this.cache.posts.byId[post.id] = post;\n\n            // Update user index\n            const userPosts = this.cache.posts.byUser[creator] || [];\n            if (!userPosts.includes(post.id)) {\n              userPosts.push(post.id);\n              this.cache.posts.byUser[creator] = userPosts;\n            }\n\n            // Update tribe index\n            const tribePosts = this.cache.posts.byTribe[post.tribeId] || [];\n            if (!tribePosts.includes(post.id)) {\n              tribePosts.push(post.id);\n              this.cache.posts.byTribe[post.tribeId] = tribePosts;\n            }\n          } catch (err) {\n            console.error(`Error fetching post ${postId}:`, err);\n          }\n        }\n      }\n\n      this.cache.posts.lastUpdate = Date.now();\n    } catch (err) {\n      console.error('Error updating posts cache:', err);\n    }\n  }\n\n  private async updateTribesCache(): Promise<void> {\n    const publicClient = getPublicClient(this.chainId);\n    const { tribeController } = getContracts(this.chainId);\n\n    try {\n      // Get total tribes count\n      const nextTribeId = await publicClient.readContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'nextTribeId',\n        args: []\n      }) as bigint;\n\n      if (nextTribeId === undefined) {\n        throw new Error('Failed to get tribe count from contract');\n      }\n\n      // Fetch tribes\n      for (let tribeId = 1n; tribeId < nextTribeId; tribeId++) {\n        try {\n          // Get tribe config view for basic info\n          const configView = await publicClient.readContract({\n            address: tribeController.address,\n            abi: tribeController.abi,\n            functionName: 'getTribeConfigView',\n            args: [tribeId]\n          }) as { joinType: number; entryFee: bigint; nftRequirements: any[]; canMerge: boolean };\n\n          // Get tribe admin\n          const admin = await publicClient.readContract({\n            address: tribeController.address,\n            abi: tribeController.abi,\n            functionName: 'getTribeAdmin',\n            args: [tribeId]\n          }) as Address;\n\n          // Get member count\n          const memberCount = await publicClient.readContract({\n            address: tribeController.address,\n            abi: tribeController.abi,\n            functionName: 'getMemberCount',\n            args: [tribeId]\n          }) as bigint;\n          \n          // Try to get tribe name and metadata\n          let tribeName = `Tribe ${tribeId}`;\n          let tribeMetadata = '';\n          \n          try {\n            // Get full tribe config which includes name and metadata\n            const rawConfig = await publicClient.readContract({\n              address: tribeController.address,\n              abi: tribeController.abi,\n              functionName: 'getTribeConfigView',\n              args: [BigInt(tribeId)]\n            });\n            \n            // Handle different response formats\n            if (Array.isArray(rawConfig)) {\n              tribeName = rawConfig[0] || `Tribe ${tribeId}`;\n              tribeMetadata = rawConfig[1] || '{}';\n            } else if (typeof rawConfig === 'object' && rawConfig !== null) {\n              const rc = rawConfig as any;\n              tribeName = rc.name || `Tribe ${tribeId}`;\n              tribeMetadata = rc.metadata || '{}';\n            }\n          } catch (error) {\n            console.warn(`Failed to get name for tribe ${tribeId}, using default name:`, error);\n          }\n\n          const tribe: Tribe = {\n            id: tribeId.toString(),\n            name: tribeName,\n            metadata: tribeMetadata,\n            owner: admin,\n            admins: [admin],\n            memberCount: Number(memberCount),\n            createdAt: Date.now(),\n            joinType: configView.joinType,\n            entryFee: configView.entryFee,\n            nftRequirements: configView.nftRequirements || []\n          };\n\n          // Update cache\n          this.cache.tribes.byId[tribe.id] = tribe;\n\n          // Update user index\n          const userTribes = this.cache.tribes.byUser[admin] || [];\n          if (!userTribes.includes(tribe.id)) {\n            userTribes.push(tribe.id);\n            this.cache.tribes.byUser[admin] = userTribes;\n          }\n        } catch (err) {\n          console.error(`Error fetching tribe ${tribeId}:`, err);\n        }\n      }\n\n      this.cache.tribes.lastUpdate = Date.now();\n    } catch (err) {\n      console.error('Error updating tribes cache:', err);\n    }\n  }\n\n  private async updateProfilesCache(): Promise<void> {\n    console.log(`[IndexerService] Starting profile cache update`);\n    const publicClient = getPublicClient(this.chainId);\n    const { profileNFTMinter } = getContracts(this.chainId);\n\n    // Validate contract address\n    if (!profileNFTMinter?.address) {\n      console.error('[IndexerService] Profile NFT contract address not found');\n      return;\n    }\n\n    try {\n      // First verify the contract exists and is accessible\n      try {\n        const code = await publicClient.getBytecode({ address: profileNFTMinter.address });\n        if (!code || code === '0x') {\n          console.error('[IndexerService] Profile NFT contract not found at address:', profileNFTMinter.address);\n          return;\n        }\n      } catch (error) {\n        console.error('[IndexerService] Error verifying Profile NFT contract:', error);\n        return;\n      }\n\n      // Process profiles in small batches with delays\n      let consecutiveErrors = 0;\n      const MAX_CONSECUTIVE_ERRORS = 5;\n      const BATCH_SIZE = 5n;\n      let tokenId = 0n;\n      let profilesFound = 0;\n\n      while (consecutiveErrors < MAX_CONSECUTIVE_ERRORS) {\n        try {\n          // Try to get the owner of the token\n          const owner = await publicClient.readContract({\n            address: profileNFTMinter.address,\n            abi: profileNFTMinter.abi,\n            functionName: 'ownerOf',\n            args: [tokenId]\n          }) as Address;\n\n          // If we got here, the token exists. Get its profile data\n          const result = await publicClient.readContract({\n            address: profileNFTMinter.address,\n            abi: profileNFTMinter.abi,\n            functionName: 'getProfileByTokenId',\n            args: [tokenId]\n          }) as [string, string, Address];\n\n          const [username, metadataStr] = result;\n          const normalizedOwner = this.normalizeAddress(owner);\n          console.log(`[IndexerService] Found profile for tokenId ${tokenId}: ${username} (${normalizedOwner})`);\n\n          let metadata;\n          try {\n            metadata = JSON.parse(metadataStr);\n          } catch (e: any) {\n            console.log(`[IndexerService] Failed to parse metadata for ${username}: ${e.message}`);\n            metadata = {\n              avatar: '',\n              bio: '',\n              createdAt: Date.now()\n            };\n          }\n\n          // Update cache with normalized address\n          const profile: ProfileData = {\n            tokenId: tokenId.toString(),\n            username,\n            metadata: {\n              avatar: metadata.avatar || '',\n              bio: metadata.bio || '',\n              createdAt: metadata.createdAt || Date.now()\n            },\n            nftUri: metadata.avatar || '',\n            owner: normalizedOwner\n          };\n\n          this.cache.profiles.byAddress[normalizedOwner] = profile;\n          // Notify with hasProfile true since we found an actual profile\n          this.notifyCacheUpdate('profile', { \n            address: normalizedOwner, \n            profile,\n            hasProfile: true\n          });\n\n          profilesFound++;\n          consecutiveErrors = 0; // Reset error counter on success\n        } catch (error: unknown) {\n          // Check if this is a nonexistent token error\n          if (error instanceof Error && \n              error.message.includes('ERC721NonexistentToken')) {\n            // This is expected for non-minted tokens\n            console.log(`[IndexerService] Token ${tokenId} not minted yet, trying next token...`);\n            \n            // If we've found some profiles and hit a gap, we might be at the end\n            if (profilesFound > 0 && consecutiveErrors > 2) {\n              console.log(`[IndexerService] Found ${profilesFound} profiles and hit several gaps, assuming end of minted tokens`);\n              break;\n            }\n            \n            consecutiveErrors++;\n          } else {\n            console.error(`[IndexerService] Error fetching profile for tokenId ${tokenId}:`, error);\n            consecutiveErrors++;\n          }\n        }\n\n        tokenId += 1n;\n\n        // Add a delay between batches to avoid rate limiting\n        if (tokenId % BATCH_SIZE === 0n) {\n          await new Promise(resolve => setTimeout(resolve, 100)); // Reduced delay\n        }\n      }\n\n      console.log(`[IndexerService] Profile cache update complete. Found ${profilesFound} profiles.`);\n      this.cache.profiles.lastUpdate = Date.now();\n    } catch (err) {\n      console.error('[IndexerService] Error updating profiles cache:', err);\n    }\n  }\n\n  // User lookup methods\n  public getUsernameByAddress(address: string): string | null {\n    const userPosts = this.cache.posts.byUser[this.normalizeAddress(address)] || [];\n    if (userPosts.length > 0) {\n      const post = this.cache.posts.byId[userPosts[0]];\n      return post?.author || null;\n    }\n    return null;\n  }\n\n  public getAddressByUsername(username: string): string | null {\n    // Search through posts to find matching author\n    for (const post of Object.values(this.cache.posts.byId)) {\n      if (post.author.toLowerCase() === username.toLowerCase()) {\n        return post.author;\n      }\n    }\n    return null;\n  }\n\n  // Profile methods\n  public getUserMetadata(address: string): ProfileData | null {\n    return this.cache.profiles.byAddress[this.normalizeAddress(address)] || null;\n  }\n\n  // Force refresh methods\n  public async forceRefreshContent(contentType: 'post' | 'tribe' | 'profile', id: string): Promise<void> {\n    switch (contentType) {\n      case 'post':\n        await this.refreshPost(id);\n        break;\n      case 'tribe':\n        await this.refreshTribe(id);\n        break;\n      case 'profile':\n        await this.refreshProfile(id);\n        break;\n    }\n  }\n\n  private async refreshPost(postId: string): Promise<void> {\n    try {\n      const publicClient = getPublicClient(this.chainId);\n      const { contentManager } = getContracts(this.chainId);\n\n      const postData = await publicClient.readContract({\n        address: contentManager.address,\n        abi: contentManager.abi,\n        functionName: 'getPost',\n        args: [BigInt(postId)]\n      }) as [string, Address, bigint, bigint, number];\n\n      const [content, author, tribeId, timestamp, postType] = postData;\n\n      const post: Post = {\n        id: postId,\n        content,\n        author,\n        tribeId: Number(tribeId),\n        createdAt: Number(timestamp) * 1000,\n        type: postType as PostType\n      };\n\n      // Update cache\n      this.cache.posts.byId[post.id] = post;\n      \n      // Update user index\n      const userPosts = this.cache.posts.byUser[this.normalizeAddress(author)] || [];\n      if (!userPosts.includes(post.id)) {\n        userPosts.push(post.id);\n        this.cache.posts.byUser[this.normalizeAddress(author)] = userPosts;\n      }\n\n      // Update tribe index\n      const tribePosts = this.cache.posts.byTribe[post.tribeId] || [];\n      if (!tribePosts.includes(post.id)) {\n        tribePosts.push(post.id);\n        this.cache.posts.byTribe[post.tribeId] = tribePosts;\n      }\n    } catch (error) {\n      console.error(`Error refreshing post ${postId}:`, error);\n    }\n  }\n\n  private async refreshTribe(tribeId: string): Promise<void> {\n    try {\n      const publicClient = getPublicClient(this.chainId);\n      const { tribeController } = getContracts(this.chainId);\n\n      const tribeData = await publicClient.readContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'getTribe',\n        args: [BigInt(tribeId)]\n      }) as [string, string, Address, Address[], bigint, bigint, number, bigint, any[]];\n\n      const [name, metadata, owner, admins, memberCount, timestamp, joinType, entryFee, nftRequirements] = tribeData;\n\n      const tribe: Tribe = {\n        id: tribeId,\n        name,\n        metadata,\n        owner,\n        admins,\n        memberCount: Number(memberCount),\n        createdAt: Number(timestamp) * 1000,\n        joinType,\n        entryFee,\n        nftRequirements\n      };\n\n      // Update cache\n      this.cache.tribes.byId[tribe.id] = tribe;\n      \n      // Update user index\n      const userTribes = this.cache.tribes.byUser[this.normalizeAddress(owner)] || [];\n      if (!userTribes.includes(tribe.id)) {\n        userTribes.push(tribe.id);\n        this.cache.tribes.byUser[this.normalizeAddress(owner)] = userTribes;\n      }\n    } catch (error) {\n      console.error(`Error refreshing tribe ${tribeId}:`, error);\n    }\n  }\n\n  public async refreshProfile(address: string): Promise<void> {\n    const normalizedAddress = this.normalizeAddress(address);\n    \n    try {\n      const publicClient = getPublicClient(this.chainId);\n      const { profileNFTMinter } = getContracts(this.chainId);\n\n      if (!profileNFTMinter?.address) {\n        throw new Error('Profile NFT contract address not found');\n      }\n\n      // Check for profile NFT\n      const hasProfile = await publicClient.readContract({\n        address: profileNFTMinter.address,\n        abi: profileNFTMinter.abi,\n        functionName: 'balanceOf',\n        args: [normalizedAddress]\n      }) as bigint;\n\n      if (!hasProfile || hasProfile === 0n) {\n        const emptyProfile: ProfileData = {\n          tokenId: '0',\n          username: `User-${normalizedAddress.substring(2, 6)}`,\n          metadata: {\n            avatar: '',\n            bio: '',\n            createdAt: Date.now()\n          },\n          nftUri: '',\n          owner: normalizedAddress\n        };\n        \n        this.cache.profiles.byAddress[normalizedAddress] = emptyProfile;\n        this.notifyCacheUpdate('profile', { address: normalizedAddress, profile: emptyProfile, hasProfile: false });\n        return;\n      }\n\n      // Find the profile token\n      let found = false;\n      for (let id = 0n; id < 100n && !found; id++) {\n        try {\n          const owner = await publicClient.readContract({\n            address: profileNFTMinter.address,\n            abi: profileNFTMinter.abi,\n            functionName: 'ownerOf',\n            args: [id]\n          }) as Address;\n\n          const ownerNormalized = this.normalizeAddress(owner);\n          if (ownerNormalized === normalizedAddress) {\n            const [username, metadataStr] = await publicClient.readContract({\n              address: profileNFTMinter.address,\n              abi: profileNFTMinter.abi,\n              functionName: 'getProfileByTokenId',\n              args: [id]\n            }) as [string, string, Address];\n\n            const metadata = this.parseMetadata(metadataStr);\n            const profile: ProfileData = {\n              tokenId: id.toString(),\n              username,\n              metadata: {\n                avatar: metadata.avatar || '',\n                bio: metadata.bio || '',\n                createdAt: metadata.createdAt || Date.now()\n              },\n              nftUri: metadata.avatar || '',\n              owner: normalizedAddress\n            };\n\n            this.cache.profiles.byAddress[normalizedAddress] = profile;\n            this.notifyCacheUpdate('profile', { address: normalizedAddress, profile, hasProfile: true });\n            found = true;\n          }\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('ERC721NonexistentToken')) {\n            continue;\n          }\n          throw error;\n        }\n      }\n\n      // If we didn't find a profile but the user has a balance, something went wrong\n      if (!found && hasProfile > 0n) {\n        throw new Error(`Profile NFT found for ${normalizedAddress} but unable to locate token ID`);\n      }\n\n    } catch (error) {\n      this.logError(`Error refreshing profile for ${normalizedAddress}`, error);\n      throw error;\n    }\n  }\n  \n  // Helper to safely parse JSON metadata\n  private parseMetadata(metadataStr: string): any {\n    try {\n      return JSON.parse(metadataStr);\n    } catch (e: any) {\n      console.error(`[IndexerService] Failed to parse metadata: ${metadataStr.substring(0, 50)}...`, e);\n      return {\n        avatar: '',\n        bio: '',\n        createdAt: Date.now()\n      };\n    }\n  }\n\n  // Add a method to explicitly set connected user address\n  public setConnectedUser(address: string): void {\n    try {\n      const normalizedAddress = this.normalizeAddress(address);\n      \n      if (this.lastConnectedAddress !== normalizedAddress) {\n        this.lastConnectedAddress = normalizedAddress;\n        \n        // Initialize user data structures if needed\n        if (!this.cache.posts.byUser[normalizedAddress]) {\n          this.cache.posts.byUser[normalizedAddress] = [];\n        }\n        \n        // Check for existing profile and verify NFT ownership immediately\n        const profile = this.cache.profiles.byAddress[normalizedAddress];\n        const publicClient = getPublicClient(this.chainId);\n        const { profileNFTMinter } = getContracts(this.chainId);\n\n        // Always verify NFT ownership, even if we have a cached profile\n        publicClient.readContract({\n          address: profileNFTMinter.address,\n          abi: profileNFTMinter.abi,\n          functionName: 'balanceOf',\n          args: [normalizedAddress]\n        }).then((value: unknown) => {\n          const balance = value as bigint;\n          const hasProfile = balance > 0n;\n          \n          if (hasProfile) {\n            if (profile) {\n              // We have a cached profile and confirmed NFT ownership\n              this.notifyCacheUpdate('profile', { \n                address: normalizedAddress, \n                profile,\n                hasProfile: true\n              });\n            } else {\n              // We need to fetch the profile\n              this.refreshProfile(normalizedAddress);\n            }\n          } else {\n            // No NFT found, use empty profile\n            const emptyProfile: ProfileData = {\n              tokenId: '0',\n              username: `User-${normalizedAddress.substring(2, 6)}`,\n              metadata: {\n                avatar: '',\n                bio: '',\n                createdAt: Date.now()\n              },\n              nftUri: '',\n              owner: normalizedAddress\n            };\n            this.cache.profiles.byAddress[normalizedAddress] = emptyProfile;\n            this.notifyCacheUpdate('profile', { \n              address: normalizedAddress, \n              profile: emptyProfile,\n              hasProfile: false\n            });\n          }\n        }).catch((error) => {\n          this.logError(`Error checking profile balance in setConnectedUser`, error);\n          if (profile) {\n            // Use cached profile but mark as unverified\n            this.notifyCacheUpdate('profile', { \n              address: normalizedAddress, \n              profile,\n              hasProfile: false\n            });\n          }\n        });\n      }\n    } catch (error) {\n      this.logError(`Error in setConnectedUser`, error);\n      throw error;\n    }\n  }\n\n  // Add method to update chain ID\n  public updateChainId(chainId: number): void {\n    if (this.chainId !== chainId) {\n      console.log(`[IndexerService] Updating chain ID from ${this.chainId} to ${chainId}`);\n      this.chainId = chainId;\n      // Clear cache when chain ID changes\n      this.cache = {\n        posts: {\n          byId: {},\n          byUser: {},\n          byTribe: {},\n          lastUpdate: 0\n        },\n        tribes: {\n          byId: {},\n          byUser: {},\n          lastUpdate: 0\n        },\n        profiles: {\n          byAddress: {},\n          lastUpdate: 0\n        }\n      };\n    }\n  }\n} ","/**\n * Tribes SDK - Main entry point for the application\n * \n * This class serves as a facade for all tribe-related services and provides\n * a unified interface for the application to interact with the backend.\n */\nimport { TribeService } from './tribe/TribeService';\nimport { IPostService } from './post/IPostService';\nimport { IProfileService } from './profile/IProfileService';\nimport { ProfileService } from './profile/ProfileService';\nimport { IndexerService } from './indexer/IndexerService';\nimport { getCurrentChainId } from '../utils/blockchainUtils';\nimport { Tribe, TribeData, NFTRequirement } from '../types/tribe';\nimport { Post } from '../types/post';\nimport { ProfileData, ProfileMetadata } from '../types/user';\nimport { InteractionType } from '../types/interaction';\nimport { WalletClient } from 'viem';\n\n/**\n * Main SDK class that provides access to all services\n */\nexport class TribesSDK {\n  private tribeService: TribeService;\n  private postService: IPostService | null = null;\n  private profileService: IProfileService | null = null;\n  private indexerService: IndexerService;\n  private chainId: number;\n  private isInitialized = false;\n\n  /**\n   * Create a new TribesSDK instance\n   * @param chainId Optional chain ID, will be detected from wallet if not provided\n   */\n  constructor(chainId?: number) {\n    this.chainId = chainId || 0;\n    this.tribeService = new TribeService(this.chainId);\n    this.indexerService = new IndexerService(this.chainId);\n  }\n\n  /**\n   * Initialize the SDK\n   * @param chainId Optional chain ID override\n   */\n  async initialize(chainId?: number): Promise<void> {\n    try {\n      // If chain ID is provided, use it, otherwise detect from wallet\n      if (chainId) {\n        console.log(`[TribesSDK] Initializing with provided chainId: ${chainId}`);\n        this.chainId = chainId;\n      } else if (!this.chainId) {\n        try {\n          this.chainId = await getCurrentChainId();\n          console.log(`[TribesSDK] Auto-detected chainId: ${this.chainId}`);\n        } catch (error) {\n          console.warn(`[TribesSDK] Failed to auto-detect chainId, using default: ${this.chainId || 20143}`);\n          this.chainId = this.chainId || 20143; // Use Monad Devnet as fallback\n        }\n      }\n\n      // Initialize services\n      console.log(`[TribesSDK] Initializing services with chainId: ${this.chainId}`);\n      this.tribeService = new TribeService(this.chainId);\n      this.profileService = new ProfileService(this.chainId);\n      this.indexerService = new IndexerService(this.chainId);\n\n      // Initialize cache in a fire-and-forget manner to avoid blocking initialization\n      console.log(`[TribesSDK] Starting cache initialization (non-blocking)`);\n      this.initializeCache().catch(err => {\n        console.warn('[TribesSDK] Background cache initialization failed:', err);\n      });\n\n      // Mark as initialized immediately so the app can continue\n      this.isInitialized = true;\n      console.log(`[TribesSDK] Core initialization complete`);\n    } catch (error) {\n      console.error(`[TribesSDK] Initialization failed:`, error);\n      // Still mark as initialized to prevent repeated failures\n      this.isInitialized = true;\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize cache in the background\n   * @private\n   */\n  private async initializeCache(): Promise<void> {\n    try {\n      await this.indexerService.refreshCache();\n      console.log(`[TribesSDK] Cache successfully initialized`);\n    } catch (error) {\n      console.warn(`[TribesSDK] Cache initialization failed, will retry later:`, error);\n      // Schedule a retry after a few seconds\n      setTimeout(() => {\n        console.log(`[TribesSDK] Retrying cache initialization`);\n        this.indexerService.refreshCache().catch(e => \n          console.error(`[TribesSDK] Cache retry failed:`, e)\n        );\n      }, 5000);\n    }\n  }\n\n  /**\n   * Connect to a wallet\n   * @param walletClient Wallet client from wagmi or viem\n   * @param address Connected wallet address\n   */\n  public async connect(walletClient: any, address: string): Promise<void> {\n    console.log('[TribesSDK] Connecting to wallet', { \n      walletClientType: typeof walletClient, \n      hasWalletClient: !!walletClient,\n      address \n    });\n    \n    try {\n      // Connect all services to the wallet\n      if (this.tribeService) {\n        await this.tribeService.connect(walletClient, address);\n      }\n      \n      if (this.profileService) {\n        await this.profileService.connect(walletClient, address);\n      }\n      \n      // Register this user with the indexer service\n      this.indexerService.setConnectedUser(address);\n      \n      console.log('[TribesSDK] Successfully connected to wallet');\n    } catch (error) {\n      console.error('[TribesSDK] Failed to connect to wallet:', error);\n      throw error;\n    }\n  }\n\n  // Profile-related methods\n  public async getProfileById(profileId: number): Promise<ProfileData> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.getProfileById(profileId);\n  }\n\n  public async getProfileByUsername(username: string): Promise<ProfileData> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.getProfileByUsername(username);\n  }\n\n  public async getProfileByAddress(address: string): Promise<ProfileData | null> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.getProfileByAddress(address);\n  }\n\n  public async createProfile(username: string, metadata: ProfileMetadata): Promise<number> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    \n    // Pre-check wallet connection\n    if (!this.isWalletConnected()) {\n      throw new Error('Wallet connection check failed. Please reconnect your wallet and try again.');\n    }\n    \n    return this.profileService.createProfile(username, metadata);\n  }\n\n  public async updateProfileMetadata(profileId: number, metadata: ProfileMetadata): Promise<void> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.updateProfileMetadata(profileId, metadata);\n  }\n\n  public async checkUsernameAvailability(username: string): Promise<boolean> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.checkUsernameAvailability(username);\n  }\n\n  public async checkProfileOwnership(address: string): Promise<ProfileData | null> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.checkProfileOwnership(address);\n  }\n\n  public async findUsernameByAddress(address: string): Promise<string | null> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.findUsernameByAddress(address);\n  }\n\n  public async skipProfileCreation(address: string): Promise<boolean> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.skipProfileCreation(address);\n  }\n\n  public async hasSkippedProfileCreation(address: string): Promise<boolean> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.hasSkippedProfileCreation(address);\n  }\n\n  // Tribe-related methods\n  /**\n   * Create a new tribe\n   * @param name Tribe name\n   * @param metadata Tribe metadata\n   * @param admins Admin addresses\n   * @param joinType Join type\n   * @param entryFee Entry fee\n   * @param nftRequirements NFT requirements\n   * @returns Created tribe ID\n   */\n  public async createTribe(\n    name: string,\n    metadata: string,\n    admins?: string[],\n    joinType?: number,\n    entryFee?: bigint,\n    nftRequirements?: NFTRequirement[]\n  ): Promise<number> {\n    const tribeId = await this.tribeService.createTribe(\n      name,\n      metadata,\n      admins,\n      joinType,\n      entryFee,\n      nftRequirements\n    );\n\n    // Refresh cache after creating a new tribe\n    await this.indexerService.refreshCache();\n\n    return tribeId;\n  }\n\n  /**\n   * Get tribe data\n   * @param tribeId Tribe ID\n   * @returns Tribe data\n   */\n  public async getTribeData(tribeId: number): Promise<TribeData> {\n    return this.tribeService.getTribeData(tribeId);\n  }\n\n  /**\n   * Get tribe in UI format\n   * @param tribeId Tribe ID\n   * @returns Tribe in UI format\n   */\n  public async getTribe(tribeId: number): Promise<Tribe> {\n    try {\n      console.log(`[TribesSDK] Getting tribe data for ID: ${tribeId}`);\n      const tribeData = await this.tribeService.getTribeData(tribeId);\n      console.log(`[TribesSDK] Successfully fetched tribe data for ID: ${tribeId}`, tribeData);\n      \n      // Map the data to UI format\n      const uiTribe = this.tribeService.mapTribeDataToUIFormat(tribeData, this.chainId);\n      console.log(`[TribesSDK] Mapped tribe data to UI format:`, uiTribe);\n      \n      return uiTribe;\n    } catch (error) {\n      console.error(`[TribesSDK] Error getting tribe ${tribeId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Join a tribe\n   * @param tribeId Tribe ID\n   */\n  public async joinTribe(tribeId: number): Promise<void> {\n    await this.tribeService.joinTribe(tribeId);\n    // Refresh cache after joining a tribe\n    await this.indexerService.refreshCache();\n  }\n\n  /**\n   * Request to join a tribe\n   * @param tribeId Tribe ID\n   * @param entryFee Entry fee\n   */\n  public async requestToJoinTribe(tribeId: number, entryFee: bigint): Promise<void> {\n    await this.tribeService.requestToJoinTribe(tribeId, entryFee);\n    // Refresh cache after requesting to join a tribe\n    await this.indexerService.refreshCache();\n  }\n\n  /**\n   * Get member status in tribe\n   * @param tribeId Tribe ID\n   * @param memberAddress Member address\n   * @returns Member status\n   */\n  public async getMemberStatus(tribeId: number, memberAddress: string): Promise<number> {\n    return this.tribeService.getMemberStatus(tribeId, memberAddress);\n  }\n\n  /**\n   * Get tribes count\n   * @returns Tribes count\n   */\n  public async getTribesCount(): Promise<number> {\n    return this.tribeService.getTribesCount();\n  }\n\n  /**\n   * Get user tribes\n   * @param userAddress User address\n   * @returns Array of tribe IDs\n   */\n  public async getUserTribes(userAddress: string): Promise<number[]> {\n    const tribes = await this.indexerService.getTribesByUser(userAddress);\n    return tribes.map(tribe => Number(tribe.id));\n  }\n\n  /**\n   * Get all tribes with better error handling and fallbacks\n   */\n  public async getAllTribes(): Promise<Tribe[]> {\n    try {\n      console.log(`[TribesSDK] Getting all tribes from indexer`);\n      const tribes = await this.indexerService.getTribesSince(0);\n      console.log(`[TribesSDK] Found ${tribes.length} tribes from indexer`);\n      \n      // Ensure all tribe objects have the required properties\n      return tribes.map(tribe => {\n        // Make sure ID is a string\n        const id = tribe.id.toString();\n        \n        // Create a complete Tribe object with all required properties\n        const completeTribe: Tribe = {\n          ...tribe,\n          id,\n          // Ensure these required properties exist\n          metadata: tribe.metadata || '{}',\n          owner: tribe.owner || '0x0000000000000000000000000000000000000000',\n          nftRequirements: tribe.nftRequirements || []\n        };\n        \n        console.log(`[TribesSDK] Processed tribe ${id} from indexer:`, completeTribe);\n        return completeTribe;\n      });\n    } catch (error) {\n      console.error(`[TribesSDK] Error getting all tribes from indexer:`, error);\n      \n      // Fallback: Try using tribe service directly if indexer fails\n      try {\n        console.log(`[TribesSDK] Falling back to tribeService for getting tribes`);\n        const count = await this.tribeService.getTribesCount();\n        console.log(`[TribesSDK] Found ${count} tribes via fallback`);\n        \n        // Get first 20 tribes as a reasonable limit for fallback\n        const limit = Math.min(count, 20);\n        const tribes = [];\n        \n        for (let i = 1; i <= limit; i++) {\n          try {\n            const tribeData = await this.tribeService.getTribeData(i);\n            const tribe = this.tribeService.mapTribeDataToUIFormat(tribeData, this.chainId);\n            console.log(`[TribesSDK] Successfully mapped tribe ${i} via fallback:`, tribe);\n            tribes.push(tribe);\n          } catch (tribeError) {\n            console.warn(`[TribesSDK] Failed to get tribe ${i}:`, tribeError);\n          }\n        }\n        \n        console.log(`[TribesSDK] Fallback returned ${tribes.length} tribes`);\n        return tribes;\n      } catch (fallbackError) {\n        console.error(`[TribesSDK] Fallback also failed:`, fallbackError);\n        return []; // Return empty array as last resort\n      }\n    }\n  }\n\n  // Post-related methods\n  public async getPostsSince(timestamp: number): Promise<Post[]> {\n    return this.indexerService.getPostsSince(timestamp);\n  }\n\n  public async getPostsByUser(address: string): Promise<Post[]> {\n    return this.indexerService.getPostsByUser(address);\n  }\n\n  public async getPostsByTribe(tribeId: number): Promise<Post[]> {\n    return this.indexerService.getPostsByTribe(tribeId);\n  }\n\n  /**\n   * Check if the wallet is connected to the SDK\n   * @returns Whether the wallet is connected\n   */\n  public isWalletConnected(): boolean {\n    const profileServiceExists = !!this.profileService;\n    \n    // Check only the profile service since TribeService might not have isWalletConnected\n    let profileServiceConnected = false;\n    \n    if (profileServiceExists && this.profileService) {\n      try {\n        profileServiceConnected = this.profileService.isWalletConnected();\n      } catch (error) {\n        console.error('[TribesSDK] Error checking profile service wallet connection:', error);\n      }\n    }\n    \n    const isConnected = profileServiceExists && profileServiceConnected;\n    \n    console.log('[TribesSDK] Wallet connection status:', {\n      profileServiceExists,\n      profileServiceConnected,\n      overallStatus: isConnected\n    });\n    \n    return isConnected;\n  }\n\n  // Factory method to create SDK instance\n  public static async create(chainId?: number): Promise<TribesSDK> {\n    const sdk = new TribesSDK(chainId);\n    await sdk.initialize();\n    return sdk;\n  }\n} ","import { useState, useCallback, useEffect } from 'react';\nimport { Address } from 'viem';\nimport { useWallet } from './useWallet';\nimport { TribesSDK } from '../services/TribesSDK';\nimport { NFTRequirement } from '../types/tribe';\n\nexport interface TribesManagementHookResult {\n  // State\n  isLoading: boolean;\n  error: string | null;\n\n  // Actions\n  createTribe: (\n    name: string,\n    metadata: string,\n    admins?: string[],\n    joinType?: number,\n    entryFee?: bigint,\n    nftRequirements?: NFTRequirement[]\n  ) => Promise<number>;\n  joinTribe: (tribeId: number) => Promise<void>;\n  requestToJoinTribe: (tribeId: number, entryFee: bigint) => Promise<void>;\n  getTribesCount: () => Promise<number>;\n}\n\n/**\n * Hook for managing tribes (create, join, etc.)\n */\nexport function useTribesManagement(): TribesManagementHookResult {\n  const [sdk, setSdk] = useState<TribesSDK | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { address, chainId, isConnected, walletClient } = useWallet();\n\n  // Initialize SDK\n  useEffect(() => {\n    const initSdk = async () => {\n      try {\n        setIsLoading(true);\n        const tribesSDK = await TribesSDK.create(chainId);\n        setSdk(tribesSDK);\n        setIsLoading(false);\n      } catch (err) {\n        setError((err as Error).message);\n        setIsLoading(false);\n      }\n    };\n\n    initSdk();\n  }, [chainId]);\n\n  // Connect to wallet when available\n  useEffect(() => {\n    const connectSdk = async () => {\n      if (sdk && isConnected && walletClient && address) {\n        try {\n          await sdk.connect(walletClient, address);\n        } catch (err) {\n          setError((err as Error).message);\n        }\n      }\n    };\n\n    connectSdk();\n  }, [sdk, isConnected, walletClient, address]);\n\n  const createTribe = useCallback(async (\n    name: string,\n    metadata: string,\n    admins?: string[],\n    joinType?: number,\n    entryFee?: bigint,\n    nftRequirements?: NFTRequirement[]\n  ): Promise<number> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const tribeId = await sdk.createTribe(\n        name,\n        metadata,\n        admins,\n        joinType,\n        entryFee,\n        nftRequirements\n      );\n      return tribeId;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create tribe';\n      setError(errorMessage);\n      console.error('Error creating tribe:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk]);\n\n  const joinTribe = useCallback(async (tribeId: number): Promise<void> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      await sdk.joinTribe(tribeId);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to join tribe';\n      setError(errorMessage);\n      console.error('Error joining tribe:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk]);\n\n  const requestToJoinTribe = useCallback(async (tribeId: number, entryFee: bigint): Promise<void> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      await sdk.requestToJoinTribe(tribeId, entryFee);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to request to join tribe';\n      setError(errorMessage);\n      console.error('Error requesting to join tribe:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk]);\n\n  const getTribesCount = useCallback(async (): Promise<number> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    try {\n      return await sdk.getTribesCount();\n    } catch (err) {\n      console.error('Error getting tribes count:', err);\n      throw err;\n    }\n  }, [sdk]);\n\n  return {\n    isLoading,\n    error,\n    createTribe,\n    joinTribe,\n    requestToJoinTribe,\n    getTribesCount,\n  };\n} ","import { useState, useCallback, useEffect } from 'react';\nimport { blockchain } from '../utils/blockchainUtils';\nimport { useChainId } from 'wagmi';\nimport { ErrorType } from '../types';\nimport { getPublicClient, getContracts } from '../config/contracts';\n\ninterface ProfileData {\n  tokenId: string;\n  username: string;\n  metadata: string;\n  nftUri: string;\n  owner: string;\n}\n\ninterface TribesProfileHookResult {\n  // Profile data\n  profile: ProfileData | null;\n  isLoading: boolean;\n  error: string | null;\n  \n  // Actions\n  getProfileById: (profileId: number) => Promise<void>;\n  getProfileByUsername: (username: string) => Promise<void>;\n  createProfile: (username: string, metadata: string) => Promise<number>;\n  updateProfileMetadata: (profileId: number, metadata: string) => Promise<void>;\n  checkUsernameAvailability: (username: string) => Promise<boolean>;\n  \n  // Validation\n  validateUsername: (username: string) => boolean;\n}\n\n/**\n * Hook for managing profiles in the Tribes ecosystem\n */\nexport function useTribesProfile(): TribesProfileHookResult {\n  const chainId = useChainId();\n  const [profile, setProfile] = useState<ProfileData | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  /**\n   * Get profile by ID\n   */\n  const getProfileById = useCallback(async (profileId: number) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const result = await blockchain.getProfileByTokenId(profileId);\n      if (!result) {\n        throw new Error('Profile not found');\n      }\n      \n      // Destructure the result object properly\n      const { username, metadata, owner } = result;\n      \n      // Parse metadata to get nftUri\n      let parsedMetadata;\n      try {\n        parsedMetadata = JSON.parse(metadata);\n      } catch {\n        parsedMetadata = { avatar: '' };\n      }\n      \n      setProfile({\n        tokenId: profileId.toString(),\n        username,\n        metadata,\n        nftUri: parsedMetadata.avatar || '',\n        owner\n      });\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to get profile';\n      setError(errorMessage);\n      console.error('Error getting profile:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Get profile by username\n   */\n  const getProfileByUsername = useCallback(async (username: string) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // This should make an API call to get profile by username\n      // For now, we'll simulate it with a mock\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const mockProfile = {\n        tokenId: Math.floor(Math.random() * 1000).toString(),\n        username,\n        metadata: JSON.stringify({ avatar: '' }),\n        nftUri: '',\n        owner: '0x0000000000000000000000000000000000000000'\n      };\n      \n      setProfile(mockProfile);\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to get profile by username';\n      setError(errorMessage);\n      console.error('Error getting profile by username:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Create a new profile\n   */\n  const createProfile = useCallback(async (username: string, metadata: string): Promise<number> => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // In a real implementation, this would call the blockchain to create a profile\n      // For now, just simulate a delay and return a mock profile ID\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const mockProfileId = Math.floor(Math.random() * 1000);\n      \n      return mockProfileId;\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to create profile';\n      setError(errorMessage);\n      console.error('Error creating profile:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Update profile metadata\n   */\n  const updateProfileMetadata = useCallback(async (profileId: number, metadata: string) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // Use the correct type for tokenId (number, not string)\n      await blockchain.updateProfile({\n        tokenId: profileId, // Pass as number\n        metadata\n      });\n      \n      // Update local state if this is the current profile\n      if (profile && profile.tokenId === profileId.toString()) {\n        setProfile({\n          ...profile,\n          metadata\n        });\n      }\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to update profile';\n      setError(errorMessage);\n      console.error('Error updating profile:', err);\n      throw err; // Re-throw to allow caller to handle\n    } finally {\n      setIsLoading(false);\n    }\n  }, [profile]);\n\n  /**\n   * Check if username is available\n   */\n  const checkUsernameAvailability = useCallback(async (username: string): Promise<boolean> => {\n    try {\n      // In a real implementation, this would check if the username is already taken\n      // For now, just simulate a delay and return true most of the time\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Mock: usernames that start with \"user_\" are considered taken\n      return !username.startsWith('user_');\n    } catch (err: any) {\n      console.error('Error checking username availability:', err);\n      return false; // Safer to return false (username taken) on error\n    }\n  }, []);\n\n  /**\n   * Validate username format\n   */\n  const validateUsername = useCallback((username: string): boolean => {\n    // Simple validation: 3-20 chars, alphanumeric or underscore\n    const usernameRegex = /^[a-z0-9_]{3,20}$/;\n    return usernameRegex.test(username);\n  }, []);\n\n  return {\n    profile,\n    isLoading,\n    error,\n    getProfileById,\n    getProfileByUsername,\n    createProfile,\n    updateProfileMetadata,\n    checkUsernameAvailability,\n    validateUsername\n  };\n} ","import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n} ","import React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Loader2 } from 'lucide-react';\nimport { cn } from '../../../utils/cn';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center rounded-lg font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-accent disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n      },\n      size: {\n        default: 'h-9 px-4 py-2',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-10 rounded-md px-8',\n        icon: 'h-9 w-9',\n        'icon-sm': 'h-5 w-5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  isLoading?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, isLoading, leftIcon, rightIcon, children, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        disabled={isLoading || props.disabled}\n        {...props}\n      >\n        {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n        {!isLoading && leftIcon && <span className=\"mr-2\">{leftIcon}</span>}\n        {children}\n        {!isLoading && rightIcon && <span className=\"ml-2\">{rightIcon}</span>}\n      </button>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants }; ","import React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../../utils/cn';\n\nconst badgeVariants = cva(\n  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default: 'border-transparent bg-primary text-primary-foreground',\n        secondary: 'border-transparent bg-secondary text-secondary-foreground',\n        outline: 'text-foreground',\n        success: 'border-transparent bg-[#B0E681]/20 text-[#B0E681]',\n        warning: 'border-transparent bg-yellow-500/20 text-yellow-500',\n        error: 'border-transparent bg-red-500/20 text-red-500',\n        info: 'border-transparent bg-blue-500/20 text-blue-500',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }; ","import React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../../utils/cn';\n\nconst cardVariants = cva(\n  'relative rounded-xl transition-all duration-200',\n  {\n    variants: {\n      variant: {\n        default: 'bg-card text-card-foreground',\n        enhanced: [\n          'bg-[rgba(15,23,42,0.15)]',\n          'backdrop-blur-[16px]',\n          'border',\n          'border-[rgba(255,255,255,0.05)]',\n          'shadow-[0_4px_24px_0_rgba(0,0,0,0.05)]',\n          'hover:translate-y-[-2px]',\n          'hover:bg-[rgba(15,23,42,0.2)]',\n          'hover:shadow-[0_8px_32px_0_rgba(0,0,0,0.1)]',\n        ],\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\nexport interface CardProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof cardVariants> {}\n\nconst Card = React.forwardRef<HTMLDivElement, CardProps>(\n  ({ className, variant, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(cardVariants({ variant, className }))}\n        {...props}\n      />\n    );\n  }\n);\nCard.displayName = 'Card';\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('flex flex-col space-y-1.5 p-6', className)}\n    {...props}\n  />\n));\nCardHeader.displayName = 'CardHeader';\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn('font-semibold leading-none tracking-tight', className)}\n    {...props}\n  />\n));\nCardTitle.displayName = 'CardTitle';\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nCardDescription.displayName = 'CardDescription';\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />\n));\nCardContent.displayName = 'CardContent';\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('flex items-center p-6 pt-0', className)}\n    {...props}\n  />\n));\nCardFooter.displayName = 'CardFooter';\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}; ","import React from 'react';\nimport { X } from 'lucide-react';\nimport { cn } from '../../../utils/cn';\n\ninterface DialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function Dialog({ isOpen, onClose, children, className }: DialogProps) {\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div\n        className=\"fixed inset-0 bg-background/80 backdrop-blur-sm z-50\"\n        onClick={onClose}\n      />\n\n      {/* Dialog */}\n      <div className=\"fixed inset-0 flex items-center justify-center z-50\">\n        <div\n          className={cn(\n            'relative bg-card border border-border rounded-xl shadow-lg max-h-[85vh] w-full max-w-lg overflow-auto animate-in fade-in-0 zoom-in-95',\n            className\n          )}\n          onClick={(e) => e.stopPropagation()}\n        >\n          {/* Close button */}\n          <button\n            onClick={onClose}\n            className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"\n          >\n            <X className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Close</span>\n          </button>\n\n          {children}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport const DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn('flex flex-col space-y-1.5 p-6', className)}\n    {...props}\n  />\n);\n\nexport const DialogContent = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('p-6', className)} {...props} />\n);\n\nexport const DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 p-6 pt-0', className)}\n    {...props}\n  />\n);\n\nexport const DialogTitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h2\n    ref={ref}\n    className={cn('text-lg font-semibold leading-none tracking-tight', className)}\n    {...props}\n  />\n));\nDialogTitle.displayName = 'DialogTitle';\n\nexport const DialogDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = 'DialogDescription'; ","import React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../../utils/cn';\n\nconst inputVariants = cva(\n  'flex rounded-lg border bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'border-input',\n        ghost: 'border-none bg-transparent shadow-none focus-visible:ring-0 focus-visible:ring-offset-0',\n        enhanced: [\n          'bg-white/5',\n          'border-white/10',\n          'focus:border-accent',\n          'transition-colors',\n        ],\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\nexport interface InputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'>,\n    VariantProps<typeof inputVariants> {\n  error?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, variant, error, leftIcon, rightIcon, type, ...props }, ref) => {\n    return (\n      <div className=\"relative\">\n        {leftIcon && (\n          <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n            {leftIcon}\n          </div>\n        )}\n        <input\n          type={type}\n          className={cn(\n            inputVariants({ variant }),\n            error && 'border-destructive focus-visible:ring-destructive',\n            leftIcon && 'pl-10',\n            rightIcon && 'pr-10',\n            className\n          )}\n          ref={ref}\n          {...props}\n        />\n        {rightIcon && (\n          <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n            {rightIcon}\n          </div>\n        )}\n      </div>\n    );\n  }\n);\nInput.displayName = 'Input';\n\nexport { Input, inputVariants }; ","/**\n * Types for tribe-related data structures\n */\n\nimport { PostInteractions } from './interaction';\n\nexport enum TribeJoinType {\n  Open = 0,\n  Approval = 1,\n  Closed = 2\n}\n\nexport enum MemberStatus {\n  NotMember = 0,\n  Member = 1,\n  Admin = 2,\n  Pending = 3,\n  Rejected = 4\n}\n\nexport interface TribeMetadata {\n  description: string;\n  coverImage?: string;\n  avatar?: string;\n  createdAt: string;\n  topics?: string[];\n  website?: string;\n  social?: {\n    twitter?: string;\n    discord?: string;\n    telegram?: string;\n    [key: string]: string | undefined;\n  };\n  [key: string]: any;\n}\n\nexport interface TribeConfig {\n  name: string;\n  description: string;\n  coverImage?: string;\n  avatar?: string;\n  isPrivate: boolean;\n  entryFee: string;\n  nftRequirements: NFTRequirement[];\n  metadata: TribeMetadata;\n  admins: string[];\n  joinType: number;\n}\n\nexport interface NFTRequirement {\n  contractAddress: `0x${string}`;\n  tokenId: bigint;\n  minBalance: bigint;\n}\n\nexport interface TribeConfigResponse {\n  success: boolean;\n  name?: string;\n  metadata?: any;\n  admins?: string[];\n  joinType?: number;\n  entryFee?: string;\n  nftRequirements?: NFTRequirement[];\n  data?: TribeConfig;\n  error?: string;\n}\n\nexport interface TribeMember {\n  id: string;\n  username: string;\n  avatar: string;\n  role?: 'admin' | 'member';\n}\n\nexport interface Topic {\n  id: string;\n  name: string;\n  postCount?: number;\n}\n\nexport interface TribeData {\n  id: string;\n  name: string;\n  metadata: string;\n  owner: `0x${string}`;\n  admins: `0x${string}`[];\n  memberCount: number;\n  createdAt: number;\n  joinType: number;\n  entryFee: bigint;\n  nftRequirements: NFTRequirement[];\n  isPrivate?: boolean;\n  isActive?: boolean;\n  canMerge?: boolean;\n  userMembershipStatus?: MembershipData;\n  members?: TribeMember[];\n}\n\nexport interface Tribe {\n  id: string;\n  name: string;\n  metadata: string;\n  owner: `0x${string}`;\n  admins: `0x${string}`[];\n  memberCount: number;\n  createdAt: number;\n  joinType: number;\n  entryFee: bigint;\n  nftRequirements: NFTRequirement[];\n}\n\nexport interface MembershipData {\n  isMember: boolean;\n  isAdmin: boolean;\n  isPending: boolean;\n  status: MemberStatus;\n}\n\nexport interface DefaultImageConfig {\n  avatar: string;\n  cover: string;\n}\n\nexport interface DefaultImages {\n  [chainId: string]: DefaultImageConfig;\n}\n\nexport interface MetadataCacheEntry {\n  data: any;\n  metadata?: string;\n  timestamp: number;\n}\n\nexport interface MetadataCache {\n  [key: string]: MetadataCacheEntry;\n}","import React, { useState, useEffect, useRef, KeyboardEvent } from 'react';\nimport { useTribesManagement } from '../../hooks/useTribesManagement';\nimport { useTribesProfile } from '../../hooks/useTribesProfile';\nimport { useChainId } from 'wagmi';\nimport { SUPPORTED_CHAINS } from '../../constants/networks';\nimport { useTribesData } from '../../hooks/useTribesData';\nimport { AlignLeft, ImageIcon, Users, Lock, Globe } from 'lucide-react';\nimport { Card, CardContent } from '../common/ui';\nimport { TribeMetadata, TribeJoinType } from '../../types/tribe';\n\n// Mock addTribe method - in a real app, this would come from useTribesData hook\nconst addTribe = (tribeId: number, data: any) => {\n  console.log(`Adding tribe ${tribeId} to local cache`, data);\n};\n\n// Extend the Window interface to include our tribes global\ndeclare global {\n  interface Window {\n    tribes?: {\n      users?: Record<string, {\n        username?: string;\n        address?: string;\n        metadata?: string;\n        [key: string]: any;\n      }>;\n      [key: string]: any;\n    };\n  }\n}\n\ninterface TribeCreationFormProps {\n  onSuccess?: (tribeId: number) => void;\n  onCancel?: () => void;\n}\n\ninterface AdminUser {\n  username: string;\n  address: string;\n  isResolved: boolean;\n  isValid: boolean;\n  isLoading: boolean;\n  statusMessage?: string;\n}\n\n// Interface for profile lookup result\ninterface ProfileLookupResult {\n  isValid: boolean;\n  address?: string;\n  statusMessage?: string;\n}\n\nexport const TribeCreationForm: React.FC<TribeCreationFormProps> = ({\n  onSuccess,\n  onCancel\n}) => {\n  // Form state\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [avatar, setAvatar] = useState('');\n  const [coverImage, setCoverImage] = useState('');\n  const [adminInput, setAdminInput] = useState(''); // For username input\n  const [adminUsers, setAdminUsers] = useState<AdminUser[]>([]); // For tracking usernames with addresses\n  const [joinType, setJoinType] = useState<TribeJoinType>(TribeJoinType.Open); // Default join type\n  const [entryFee, setEntryFee] = useState('0');\n  const [chainError, setChainError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const adminInputRef = useRef<HTMLInputElement>(null);\n  \n  // Get current chain ID from wallet\n  const chainId = useChainId();\n  \n  // Tribe management hook\n  const {\n    isLoading,\n    error,\n    createTribe\n  } = useTribesManagement();\n\n  // Profile management hook for username lookup\n  const {\n    profile,\n    checkUsernameAvailability,\n    validateUsername\n  } = useTribesProfile();\n  \n  // Add tribes data hook\n  // const { addTribe } = useTribesData();\n  \n  // Check if on a supported chain\n  useEffect(() => {\n    // Also check the chainId from window.ethereum as a backup\n    if (window.ethereum && window.ethereum.chainId) {\n      const detectedChainId = parseInt(window.ethereum.chainId as string, 16);\n    }\n    \n    if (chainId) {\n      // We have a chainId, check if it's supported\n      const isSupported = SUPPORTED_CHAINS.some(chain => chain.id === chainId);\n      if (!isSupported) {\n        const supportedChainIds = SUPPORTED_CHAINS.map(chain => chain.id).join(', ');\n        setChainError(`Network not supported. Please switch to one of the supported networks (Chain IDs: ${supportedChainIds})`);\n      } else {\n        setChainError(null);\n      }\n    } else {\n      // No chainId from wagmi, check if we can get it from window.ethereum\n      if (window.ethereum && window.ethereum.chainId) {\n        const detectedChainId = parseInt(window.ethereum.chainId as string, 16);\n        const isSupported = SUPPORTED_CHAINS.some(chain => chain.id === detectedChainId);\n        if (!isSupported) {\n          const supportedChainIds = SUPPORTED_CHAINS.map(chain => chain.id).join(', ');\n          setChainError(`Network not supported. Please switch to one of the supported networks (Chain IDs: ${supportedChainIds})`);\n        } else {\n          setChainError(null);\n        }\n      } else {\n        // Cannot determine chain, show generic error\n        const supportedChainIds = SUPPORTED_CHAINS.map(chain => chain.id).join(', ');\n        setChainError(`Cannot detect network. Please connect to one of the supported networks (Chain IDs: ${supportedChainIds})`);\n      }\n    }\n  }, [chainId]);\n  \n  // Create metadata object\n  const getTribeMetadata = (): string => {\n    // Build a complete metadata object for consistent display\n    const metadata: TribeMetadata = {\n      description: description,\n      avatar: avatar || '/monad-white.svg', // Default avatar if not provided\n      coverImage: coverImage || '/monad-banner.png', // Default cover if not provided\n      createdAt: new Date().toISOString(),\n      topics: [],\n      social: {\n        twitter: '',\n        discord: '',\n        telegram: ''\n      }\n    };\n    \n    // Convert to string for contract storage\n    return JSON.stringify(metadata);\n  };\n  \n  // Get admin addresses from resolved usernames\n  const getAdminAddresses = (): string[] => {\n    return adminUsers\n      .filter(admin => admin.isResolved && admin.isValid)\n      .map(admin => admin.address);\n  };\n\n  // Fetch profile by username\n  const fetchProfileByUsername = async (username: string): Promise<ProfileLookupResult> => {\n    try {\n      // First validate username format\n      if (!validateUsername(username)) {\n        return {\n          isValid: false,\n          statusMessage: 'Invalid format (3-20 chars, a-z, 0-9, _)'\n        };\n      }\n      \n      // Check if username exists (if available = false, then it exists)\n      const isAvailable = await checkUsernameAvailability(username);\n      \n      if (isAvailable) {\n        return {\n          isValid: false,\n          statusMessage: 'Username not found'\n        };\n      }\n      \n      // TODO: Implement full profile lookup from the chain or an API\n      // Mock implementation for now\n      return {\n        isValid: true,\n        address: `0x${username.padEnd(40, '0').substring(0, 40)}`\n      };\n    } catch (err) {\n      console.error('Error in fetchProfileByUsername:', err);\n      return {\n        isValid: false,\n        statusMessage: 'Error looking up profile'\n      };\n    }\n  };\n\n  // Add admin username\n  const addAdminUsername = async (username: string) => {\n    // Don't add empty usernames\n    if (!username.trim()) return;\n    \n    // Validate username format (3-20 chars, only letters, numbers, underscores)\n    const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;\n    if (!usernameRegex.test(username)) {\n      setAdminUsers(prev => [...prev, {\n        username,\n        address: '',\n        isResolved: true,\n        isValid: false,\n        isLoading: false,\n        statusMessage: 'Invalid format (3-20 chars, a-z, 0-9, _)'\n      }]);\n      setAdminInput('');\n      return;\n    }\n    \n    // Don't add duplicate usernames\n    if (adminUsers.some(admin => admin.username.toLowerCase() === username.toLowerCase())) {\n      setAdminInput('');\n      return;\n    }\n    \n    // Add the username with pending status\n    setAdminUsers(prev => [...prev, {\n      username,\n      address: '',\n      isResolved: false,\n      isValid: false,\n      isLoading: true,\n      statusMessage: 'Resolving...'\n    }]);\n    \n    // Clear input\n    setAdminInput('');\n    \n    try {\n      // Try to fetch the profile\n      const profileResult = await fetchProfileByUsername(username);\n      \n      if (profileResult.isValid) {\n        // Update admin with valid address (ensure address is a string)\n        setAdminUsers(prev => \n          prev.map(admin => \n            admin.username === username \n              ? { \n                  ...admin, \n                  address: profileResult.address || '', \n                  isResolved: true, \n                  isValid: true, \n                  isLoading: false,\n                  statusMessage: undefined\n                }\n              : admin\n          )\n        );\n      } else {\n        // Update admin with invalid status\n        setAdminUsers(prev => \n          prev.map(admin => \n            admin.username === username \n              ? { \n                  ...admin, \n                  isResolved: true, \n                  isValid: false, \n                  isLoading: false,\n                  statusMessage: profileResult.statusMessage\n                }\n              : admin\n          )\n        );\n      }\n    } catch (err) {\n      console.error('Error resolving username:', err);\n      \n      // Update admin with error status\n      setAdminUsers(prev => \n        prev.map(admin => \n          admin.username === username \n            ? { \n                ...admin, \n                isResolved: true, \n                isValid: false, \n                isLoading: false,\n                statusMessage: 'Failed to resolve'\n              }\n            : admin\n        )\n      );\n    }\n  };\n  \n  // Handle form submission to create the tribe\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (!name.trim()) {\n      alert('Please enter a tribe name');\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      \n      // Call the createTribe function from the hook\n      const tribeId = await createTribe(\n        name.trim(),\n        getTribeMetadata(),\n        getAdminAddresses(),\n        joinType,\n        BigInt(entryFee),\n        []\n      );\n      \n      // Add to local cache\n      addTribe(tribeId, {\n        id: tribeId.toString(),\n        name: name.trim(),\n        description,\n        joinType,\n        entryFee,\n        avatar,\n        coverImage\n      });\n      \n      if (onSuccess) {\n        onSuccess(tribeId);\n      }\n    } catch (err: any) {\n      console.error('Error creating tribe:', err);\n      alert(err.message || 'Failed to create tribe');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const handleAdminInputKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      if (adminInput.trim()) {\n        addAdminUsername(adminInput.trim());\n      }\n    }\n  };\n  \n  const removeAdminUsername = (username: string) => {\n    setAdminUsers(prev => prev.filter(admin => admin.username !== username));\n  };\n  \n  const focusAdminInput = () => {\n    adminInputRef.current?.focus();\n  };\n  \n  return (\n    <Card className=\"w-full max-w-3xl\">\n      <CardContent className=\"p-6\">\n        <h2 className=\"text-2xl font-bold mb-6\">Create New Tribe</h2>\n        \n        {chainError && (\n          <div className=\"bg-red-50 p-4 rounded-md mb-6 text-red-600\">\n            {chainError}\n          </div>\n        )}\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Tribe Name */}\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              Tribe Name\n            </label>\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-black\"\n              placeholder=\"Enter tribe name\"\n              required\n            />\n          </div>\n          \n          {/* Tribe Description */}\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              <div className=\"flex items-center gap-1\">\n                <AlignLeft className=\"w-4 h-4\" />\n                <span>Description</span>\n              </div>\n            </label>\n            <textarea\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 min-h-[100px] text-black\"\n              placeholder=\"What is this tribe about?\"\n            />\n          </div>\n          \n          {/* Tribe Images */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                <div className=\"flex items-center gap-1\">\n                  <ImageIcon className=\"w-4 h-4\" />\n                  <span>Avatar Image URL</span>\n                </div>\n              </label>\n              <input\n                type=\"text\"\n                value={avatar}\n                onChange={(e) => setAvatar(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-black\"\n                placeholder=\"https://example.com/avatar.png\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                <div className=\"flex items-center gap-1\">\n                  <ImageIcon className=\"w-4 h-4\" />\n                  <span>Cover Image URL</span>\n                </div>\n              </label>\n              <input\n                type=\"text\"\n                value={coverImage}\n                onChange={(e) => setCoverImage(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-black\"\n                placeholder=\"https://example.com/cover.png\"\n              />\n            </div>\n          </div>\n          \n          {/* Tribe Join Type */}\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              <div className=\"flex items-center gap-1\">\n                <Users className=\"w-4 h-4\" />\n                <span>Join Type</span>\n              </div>\n            </label>\n            <div className=\"flex flex-wrap gap-2 mt-2\">\n              <button\n                type=\"button\"\n                onClick={() => setJoinType(TribeJoinType.Open)}\n                className={`px-4 py-2 rounded-md flex items-center gap-2 ${\n                  joinType === TribeJoinType.Open \n                    ? 'bg-blue-100 text-blue-700 border border-blue-300' \n                    : 'bg-gray-100 text-gray-700 border border-gray-200'\n                }`}\n              >\n                <Globe className=\"w-4 h-4\" />\n                <span>Open (Anyone can join)</span>\n              </button>\n              \n              <button\n                type=\"button\"\n                onClick={() => setJoinType(TribeJoinType.Approval)}\n                className={`px-4 py-2 rounded-md flex items-center gap-2 ${\n                  joinType === TribeJoinType.Approval \n                    ? 'bg-blue-100 text-blue-700 border border-blue-300' \n                    : 'bg-gray-100 text-gray-700 border border-gray-200'\n                }`}\n              >\n                <Lock className=\"w-4 h-4\" />\n                <span>Approval Required</span>\n              </button>\n              \n              <button\n                type=\"button\"\n                onClick={() => setJoinType(TribeJoinType.Closed)}\n                className={`px-4 py-2 rounded-md flex items-center gap-2 ${\n                  joinType === TribeJoinType.Closed \n                    ? 'bg-blue-100 text-blue-700 border border-blue-300' \n                    : 'bg-gray-100 text-gray-700 border border-gray-200'\n                }`}\n              >\n                <Lock className=\"w-4 h-4\" />\n                <span>Invite Only</span>\n              </button>\n            </div>\n            \n            {joinType === TribeJoinType.Approval && (\n              <div className=\"mt-4\">\n                <label className=\"block text-sm font-medium mb-1\">\n                  Entry Fee (optional)\n                </label>\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"text\"\n                    value={entryFee}\n                    onChange={(e) => setEntryFee(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"0\"\n                  />\n                  <span className=\"ml-2\">wei</span>\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Members will need to pay this fee to join your tribe\n                </p>\n              </div>\n            )}\n          </div>\n          \n          {/* Admins */}\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              <div className=\"flex items-center gap-1\">\n                <Users className=\"w-4 h-4\" />\n                <span>Admins</span>\n              </div>\n            </label>\n            <div className=\"flex flex-wrap gap-2 mb-2\">\n              {adminUsers.map((admin, index) => (\n                <div \n                  key={index}\n                  className={`px-3 py-1 rounded-full flex items-center text-sm ${\n                    admin.isLoading\n                      ? 'bg-gray-200 text-gray-700'\n                      : admin.isValid\n                        ? 'bg-green-100 text-green-800'\n                        : 'bg-red-100 text-red-800'\n                  }`}\n                >\n                  <span>{admin.username}</span>\n                  {admin.isLoading ? (\n                    <div className=\"ml-2 w-3 h-3 rounded-full border-2 border-gray-500 border-t-transparent animate-spin\"></div>\n                  ) : admin.statusMessage ? (\n                    <span className=\"ml-2 text-xs\">{admin.statusMessage}</span>\n                  ) : null}\n                  <button\n                    type=\"button\"\n                    onClick={() => removeAdminUsername(admin.username)}\n                    className=\"ml-2 text-gray-500 hover:text-gray-700\"\n                  >\n                    ×\n                  </button>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"flex\">\n              <input\n                ref={adminInputRef}\n                type=\"text\"\n                value={adminInput}\n                onChange={(e) => setAdminInput(e.target.value)}\n                onKeyDown={handleAdminInputKeyDown}\n                className=\"flex-1 px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-black\"\n                placeholder=\"Enter username to add admin\"\n              />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  if (adminInput.trim()) {\n                    addAdminUsername(adminInput.trim());\n                  }\n                }}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700\"\n              >\n                Add\n              </button>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Enter usernames to add admins. Your account will automatically be an admin.\n            </p>\n          </div>\n          \n          {/* Form Buttons */}\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            {onCancel && (\n              <button\n                type=\"button\"\n                onClick={onCancel}\n                className=\"px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50\"\n                disabled={isLoading || loading}\n              >\n                Cancel\n              </button>\n            )}\n            \n            <button\n              type=\"submit\"\n              className={`px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 ${\n                (isLoading || loading) ? 'opacity-50 cursor-not-allowed' : ''\n              }`}\n              disabled={isLoading || loading || !!chainError}\n            >\n              {(isLoading || loading) ? 'Creating...' : 'Create Tribe'}\n            </button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}; ","import React, { useState } from 'react';\nimport { format } from 'date-fns';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateDraft, selectPostDraft } from '../../store/slices/postsSlice';\nimport clsx from 'clsx';\n\n// Define location type structure\ninterface EventLocation {\n  type: 'PHYSICAL' | 'VIRTUAL' | 'HYBRID';\n  physical?: string;\n  virtual?: string;\n  address?: string;\n  coordinates?: {\n    latitude: string;\n    longitude: string;\n  };\n}\n\nconst EventFields: React.FC = () => {\n  const dispatch = useDispatch();\n  const postDraft = useSelector(selectPostDraft);\n  const [locationType, setLocationType] = useState<EventLocation['type']>(\n    postDraft.eventDetails?.location?.type || 'PHYSICAL'\n  );\n\n  const buttonClass = \"flex items-center justify-center px-3 py-2 border border-gray-700 rounded-md text-sm font-medium\";\n  const selectedBtnClass = \"bg-blue-600/25 text-blue-400 border-blue-500/50\";\n  const inputClass = \"mt-1 block w-full rounded-md bg-gray-800 border-gray-700 text-white shadow-sm focus:border-blue-500 focus:ring-blue-500\";\n\n  const handleUpdateDraft = (data: Partial<any>) => {\n    dispatch(updateDraft(data));\n  };\n\n  const getLocationObject = (): EventLocation => {\n    if (!postDraft.eventDetails?.location) {\n      return {\n        type: locationType,\n        physical: locationType !== 'VIRTUAL' ? '' : undefined,\n        virtual: locationType !== 'PHYSICAL' ? '' : undefined\n      };\n    }\n    \n    if (typeof postDraft.eventDetails.location === 'string') {\n      return {\n        type: locationType,\n        physical: locationType !== 'VIRTUAL' ? postDraft.eventDetails.location : undefined,\n        virtual: locationType !== 'PHYSICAL' ? postDraft.eventDetails.location : undefined\n      };\n    }\n    \n    return postDraft.eventDetails.location as EventLocation;\n  };\n\n  const handleLocationTypeChange = (type: EventLocation['type']) => {\n    setLocationType(type);\n    const currentLocation = getLocationObject();\n    \n    const newLocation: EventLocation = {\n      type,\n      physical: type !== 'VIRTUAL' ? currentLocation.physical || '' : undefined,\n      virtual: type !== 'PHYSICAL' ? currentLocation.virtual || '' : undefined,\n      address: type !== 'VIRTUAL' ? currentLocation.address || '' : undefined,\n      coordinates: type !== 'VIRTUAL' ? currentLocation.coordinates : undefined\n    };\n    \n    updateEventDetails({ location: newLocation });\n  };\n\n  const updateEventDetails = (updates: Partial<any>) => {\n    handleUpdateDraft({\n      eventDetails: {\n        ...postDraft.eventDetails,\n        ...updates\n      }\n    });\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300\">Event Title</label>\n        <input\n          type=\"text\"\n          value={postDraft.eventDetails?.title || ''}\n          onChange={(e) => updateEventDetails({ title: e.target.value })}\n          placeholder=\"Enter event title\"\n          className={inputClass}\n          required\n        />\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300\">Event Description</label>\n        <textarea\n          value={postDraft.eventDetails?.description || ''}\n          onChange={(e) => updateEventDetails({ description: e.target.value })}\n          placeholder=\"Describe your event\"\n          className={`${inputClass} min-h-[100px]`}\n          required\n        />\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300\">Event Start Date & Time</label>\n        <input\n          type=\"datetime-local\"\n          value={postDraft.eventDetails?.startDate ? \n            format(new Date(postDraft.eventDetails.startDate), \"yyyy-MM-dd'T'HH:mm\") :\n            format(new Date(), \"yyyy-MM-dd'T'HH:mm\")\n          }\n          onChange={(e) => updateEventDetails({ startDate: new Date(e.target.value).toISOString() })}\n          className={inputClass}\n          required\n        />\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300\">Event End Date & Time</label>\n        <input\n          type=\"datetime-local\"\n          value={postDraft.eventDetails?.endDate ? \n            format(new Date(postDraft.eventDetails.endDate), \"yyyy-MM-dd'T'HH:mm\") :\n            format(new Date(Date.now() + 3600000), \"yyyy-MM-dd'T'HH:mm\")\n          }\n          onChange={(e) => updateEventDetails({ endDate: new Date(e.target.value).toISOString() })}\n          className={inputClass}\n          required\n        />\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">Location Type</label>\n        <div className=\"flex space-x-2\">\n          <button\n            type=\"button\"\n            onClick={() => handleLocationTypeChange('PHYSICAL')}\n            className={clsx(\n              buttonClass,\n              locationType === 'PHYSICAL' ? selectedBtnClass : 'text-gray-400 hover:bg-gray-700/30'\n            )}\n          >\n            Physical\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => handleLocationTypeChange('VIRTUAL')}\n            className={clsx(\n              buttonClass,\n              locationType === 'VIRTUAL' ? selectedBtnClass : 'text-gray-400 hover:bg-gray-700/30'\n            )}\n          >\n            Virtual\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => handleLocationTypeChange('HYBRID')}\n            className={clsx(\n              buttonClass,\n              locationType === 'HYBRID' ? selectedBtnClass : 'text-gray-400 hover:bg-gray-700/30'\n            )}\n          >\n            Hybrid\n          </button>\n        </div>\n      </div>\n\n      {(locationType === 'PHYSICAL' || locationType === 'HYBRID') && (\n        <>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300\">Venue Name</label>\n            <input\n              type=\"text\"\n              value={getLocationObject().physical || ''}\n              onChange={(e) => {\n                const location = getLocationObject();\n                updateEventDetails({ \n                  location: { \n                    ...location, \n                    physical: e.target.value \n                  } \n                });\n              }}\n              placeholder=\"Enter venue name\"\n              className={inputClass}\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300\">Address</label>\n            <input\n              type=\"text\"\n              value={getLocationObject().address || ''}\n              onChange={(e) => {\n                const location = getLocationObject();\n                updateEventDetails({ \n                  location: { \n                    ...location, \n                    address: e.target.value \n                  } \n                });\n              }}\n              placeholder=\"Enter full address\"\n              className={inputClass}\n            />\n          </div>\n        </>\n      )}\n\n      {(locationType === 'VIRTUAL' || locationType === 'HYBRID') && (\n        <div>\n          <label className=\"block text-sm font-medium text-gray-300\">Virtual Meeting Link</label>\n          <input\n            type=\"text\"\n            value={getLocationObject().virtual || ''}\n            onChange={(e) => {\n              const location = getLocationObject();\n              updateEventDetails({ \n                location: { \n                  ...location, \n                  virtual: e.target.value \n                } \n              });\n            }}\n            placeholder=\"Enter meeting link\"\n            className={inputClass}\n          />\n        </div>\n      )}\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300\">Maximum Attendees</label>\n        <input\n          type=\"number\"\n          value={Number(postDraft.eventDetails?.capacity || 0)}\n          onChange={(e) => updateEventDetails({ capacity: parseInt(e.target.value) || 0 })}\n          placeholder=\"0 for unlimited\"\n          min=\"0\"\n          className={inputClass}\n        />\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300\">Ticket Price (ETH)</label>\n        <input\n          type=\"number\"\n          value={Number(postDraft.eventDetails?.price || 0)}\n          onChange={(e) => updateEventDetails({ price: parseFloat(e.target.value) || 0 })}\n          placeholder=\"0 for free\"\n          min=\"0\"\n          step=\"0.01\"\n          className={inputClass}\n        />\n        <p className=\"mt-1 text-xs text-gray-500\">Leave as 0 for free events</p>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300\">Tickets Per Wallet</label>\n        <input\n          type=\"number\"\n          value={Number(postDraft.eventDetails?.perWalletLimit || 1)}\n          onChange={(e) => updateEventDetails({ perWalletLimit: parseInt(e.target.value) || 1 })}\n          placeholder=\"Maximum tickets per wallet\"\n          min=\"1\"\n          className={inputClass}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default EventFields; ","import React from 'react';\n\nconst ImageFields: React.FC = () => {\n  return (\n    <div>\n      <label className=\"block text-sm font-medium text-gray-700\">Upload Image</label>\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        className=\"mt-1 block w-full text-sm text-gray-500\n          file:mr-4 file:py-2 file:px-4\n          file:rounded-md file:border-0\n          file:text-sm file:font-semibold\n          file:bg-gray-200 file:text-gray-700\n          hover:file:bg-gray-300\"\n      />\n    </div>\n  );\n};\n\nexport default ImageFields; ","import React from 'react';\n\nconst PollFields: React.FC = () => {\n  return (\n    <div>\n      <label className=\"block text-sm font-medium text-gray-700\">Poll Question</label>\n      <input\n        type=\"text\"\n        placeholder=\"Enter poll question\"\n        className=\"mt-1 block w-full text-sm text-gray-500 border border-gray-300 rounded-md\"\n      />\n      \n      <label className=\"block text-sm font-medium text-gray-700 mt-4\">Poll Options</label>\n      <input\n        type=\"text\"\n        placeholder=\"Option 1\"\n        className=\"mt-1 block w-full text-sm text-gray-500 border border-gray-300 rounded-md\"\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Option 2\"\n        className=\"mt-1 block w-full text-sm text-gray-500 border border-gray-300 rounded-md\"\n      />\n      {/* Add more options as needed */}\n    </div>\n  );\n};\n\nexport default PollFields; ","import React from 'react';\n\nconst ResourceFields: React.FC = () => {\n  return (\n    <div>\n      <label className=\"block text-sm font-medium text-gray-700\">Resource Type</label>\n      <select className=\"mt-1 block w-full text-sm text-gray-500 border border-gray-300 rounded-md\">\n        <option value=\"document\">Document</option>\n        <option value=\"link\">Link</option>\n        <option value=\"code\">Code</option>\n        <option value=\"other\">Other</option>\n      </select>\n      \n      <label className=\"block text-sm font-medium text-gray-700 mt-4\">Resource URL</label>\n      <input\n        type=\"text\"\n        placeholder=\"Enter resource URL\"\n        className=\"mt-1 block w-full text-sm text-gray-500 border border-gray-300 rounded-md\"\n      />\n    </div>\n  );\n};\n\nexport default ResourceFields; ","import React from 'react';\n\nconst MediaFields: React.FC = () => {\n  return (\n    <div>\n      <label className=\"block text-sm font-medium text-gray-700\">Upload Media</label>\n      <input\n        type=\"file\"\n        accept=\"video/*, audio/*\"\n        className=\"mt-1 block w-full text-sm text-gray-500\n          file:mr-4 file:py-2 file:px-4\n          file:rounded-md file:border-0\n          file:text-sm file:font-semibold\n          file:bg-gray-200 file:text-gray-700\n          hover:file:bg-gray-300\"\n      />\n    </div>\n  );\n};\n\nexport default MediaFields; ","import React from 'react';\nimport EventFields from './EventFields';\nimport ImageFields from './ImageFields';\nimport PollFields from './PollFields';\nimport ResourceFields from './ResourceFields';\nimport MediaFields from './MediaFields';\n\ninterface PostTypeFieldsProps {\n  type: string; // or PostType\n}\n\nconst PostTypeFields: React.FC<PostTypeFieldsProps> = ({ type }) => {\n  switch (type) {\n    case 'event':\n      return <EventFields />;\n    case 'image':\n      return <ImageFields />;\n    case 'poll':\n      return <PollFields />;\n    case 'resource':\n      return <ResourceFields />;\n    case 'rich_media':\n      return <MediaFields />;\n    default:\n      return null;\n  }\n};\n\nexport default PostTypeFields; ","import { Post, PostType, PostMetadata } from '../types/post';\nimport { EventDetails, EventSpeaker, EventAgendaItem } from '../types/event';\nimport { ethers } from 'ethers';\nimport { getEthereumProvider } from './ethereum';\nimport EventControllerABI from '../abi/EventController.json';\nimport { getContractAddresses } from '../constants/contracts';\nimport { blockchain, getCurrentChainId } from './blockchainUtils';\n\n/**\n * Validates event details and fills in missing fields with defaults\n * @param eventDetails Partial event details to validate\n * @returns Complete EventDetails object with defaults for missing values\n */\nexport const validateEventDetails = (\n  eventDetails: Partial<EventDetails>\n): EventDetails => {\n  // Ensure we have valid dates\n  if (!eventDetails.startDate) {\n    console.warn('Event is missing a start date, using current date');\n    eventDetails.startDate = new Date().toISOString();\n  }\n\n  // Ensure we have valid speakers array\n  if (!eventDetails.speakers) {\n    eventDetails.speakers = [];\n  } else {\n    // Validate each speaker\n    eventDetails.speakers = eventDetails.speakers.map((speaker) => {\n      return {\n        name: speaker.name || 'Anonymous Speaker',\n        role: speaker.role,\n        avatar: speaker.avatar,\n        bio: speaker.bio,\n        social: speaker.social\n      };\n    });\n  }\n\n  // Ensure we have valid agenda array\n  if (!eventDetails.agenda) {\n    eventDetails.agenda = [];\n  } else {\n    // Validate each agenda item\n    eventDetails.agenda = eventDetails.agenda.map((item) => {\n      return {\n        title: item.title || 'Untitled Session',\n        time: item.time,\n        description: item.description,\n        speaker: item.speaker,\n        duration: item.duration\n      };\n    });\n  }\n\n  // Return the complete event details\n  return {\n    startDate: eventDetails.startDate,\n    endDate: eventDetails.endDate,\n    location: eventDetails.location,\n    virtualLink: eventDetails.virtualLink,\n    maxAttendees: eventDetails.maxAttendees,\n    currentAttendees: eventDetails.currentAttendees || 0,\n    organizer: eventDetails.organizer || '',\n    cost: eventDetails.cost,\n    costType: eventDetails.costType,\n    category: eventDetails.category,\n    accessibility: eventDetails.accessibility,\n    speakers: eventDetails.speakers,\n    agenda: eventDetails.agenda,\n    rsvpLink: eventDetails.rsvpLink,\n    ticketUrl: eventDetails.ticketUrl,\n    isCancelled: eventDetails.isCancelled || false,\n    cancelReason: eventDetails.cancelReason,\n    title: eventDetails.title || '',\n    maxTickets: eventDetails.maxTickets || eventDetails.maxAttendees || 0\n  };\n};\n\n/**\n * Creates event metadata for a post\n * @param title Event title\n * @param description Event description (will be used as post content)\n * @param eventDetails Event details\n * @param tags Optional tags for the event\n * @returns Metadata object ready to be used in post creation\n */\nexport const createEventMetadata = (\n  title: string,\n  description: string,\n  eventDetails: Partial<EventDetails>,\n  tags: string[] = []\n): Record<string, any> => {\n  // Validate and complete event details\n  const validatedDetails = validateEventDetails(eventDetails);\n  \n  // Create the complete metadata\n  return {\n    title,\n    content: description,\n    type: PostType.EVENT,\n    tags,\n    createdAt: new Date().toISOString(),\n    eventDetails: validatedDetails,\n    // For backward compatibility with older code\n    event: {\n      title: title,\n      startDate: validatedDetails.startDate,\n      endDate: validatedDetails.endDate,\n      location: validatedDetails.location\n    }\n  };\n};\n\n/**\n * Creates a sample event post for testing purposes\n * @returns A sample event post object\n */\nexport const createSampleEventPost = (): Post => {\n  const now = new Date();\n  const tomorrow = new Date();\n  tomorrow.setDate(now.getDate() + 1);\n  \n  const eventDetails: Partial<EventDetails> = {\n    startDate: tomorrow.toISOString(),\n    endDate: new Date(tomorrow.getTime() + 3 * 60 * 60 * 1000).toISOString(), // 3 hours later\n    location: \"123 Main Street, Anytown, CA\",\n    virtualLink: \"https://zoom.us/j/123456789\",\n    maxAttendees: 100,\n    currentAttendees: 45,\n    organizer: \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\",\n    cost: \"Free\",\n    category: \"Technology\",\n    accessibility: \"Fully accessible\",\n    speakers: [\n      {\n        name: \"Jane Doe\",\n        role: \"CTO, AcmeCorp\",\n        bio: \"Jane is an expert in blockchain technology\"\n      },\n      {\n        name: \"John Smith\",\n        role: \"Blockchain Developer\",\n        bio: \"John has 5 years of experience in smart contract development\"\n      }\n    ],\n    agenda: [\n      {\n        title: \"Welcome and Introduction\",\n        time: \"10:00 AM\",\n        description: \"Opening remarks and agenda overview\"\n      },\n      {\n        title: \"Blockchain Technology Overview\",\n        time: \"10:30 AM\",\n        description: \"An overview of blockchain technology and its applications\",\n        speaker: \"Jane Doe\",\n        duration: \"45 minutes\"\n      },\n      {\n        title: \"Networking Break\",\n        time: \"11:15 AM\",\n        duration: \"15 minutes\"\n      },\n      {\n        title: \"Smart Contract Development Workshop\",\n        time: \"11:30 AM\",\n        description: \"Hands-on workshop on developing smart contracts\",\n        speaker: \"John Smith\",\n        duration: \"1 hour\"\n      }\n    ]\n  };\n  \n  const eventMetadata = createEventMetadata(\n    \"Blockchain Technology Conference\",\n    \"Join us for a day of learning and networking with blockchain experts...\",\n    eventDetails,\n    [\"blockchain\", \"technology\", \"web3\", \"cryptocurrency\"]\n  );\n  \n  // Ensure metadata has all required properties for PostMetadata\n  const metadata: PostMetadata = {\n    type: PostType.EVENT,\n    content: eventMetadata.content,\n    createdAt: eventMetadata.createdAt,\n    ...eventMetadata\n  };\n  \n  return {\n    id: \"sample-event-1\",\n    content: metadata.content,\n    author: \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\",\n    tribeId: 1,\n    createdAt: Date.now(),\n    type: PostType.EVENT,\n    stats: {\n      viewCount: 120,\n      shareCount: 15,\n      saveCount: 30,\n      commentCount: 25,\n      likeCount: 75\n    },\n    metadata,\n  };\n};\n\n// Define event types\nexport interface EventLocation {\n  type: 'PHYSICAL' | 'VIRTUAL' | 'HYBRID';\n  physical?: string;\n  virtual?: string;\n  address?: string;\n  coordinates?: {\n    latitude: string;\n    longitude: string;\n  };\n}\n\nexport interface TicketType {\n  name: string;\n  price: string; // in wei\n  supply: number;\n  perWalletLimit: number;\n}\n\nexport interface EventData {\n  title: string;\n  description: string;\n  startDate: number; // Unix timestamp\n  endDate: number; // Unix timestamp\n  location: EventLocation;\n  capacity: number;\n  ticketTypes: TicketType[];\n  organizer?: string;\n}\n\n/**\n * Create a new event on the blockchain\n * @param eventData The event data\n * @returns The event ID\n */\nexport const createEvent = async (eventData: EventData): Promise<number> => {\n  try {\n    await blockchain.connect();\n      \n    // Get the current chain ID\n    const chainId = await getCurrentChainId();\n    console.log('Using chain ID for post creation:', chainId);\n    \n    // Get contract addresses for the current chain\n    const addresses = getContractAddresses(chainId);\n   \n    \n    // Get provider and signer\n    const provider = await blockchain.getProvider();\n    const signer = await blockchain.getSigner();\n    \n    if (!addresses.EVENT_CONTROLLER) {\n      throw new Error('Event controller address not configured');\n    }\n\n    const eventController = new ethers.Contract(\n      addresses.EVENT_CONTROLLER,\n      EventControllerABI,\n      signer\n    );\n\n    // Prepare metadata\n    const metadata = JSON.stringify({\n      title: eventData.title,\n      description: eventData.description,\n      startDate: eventData.startDate,\n      endDate: eventData.endDate,\n      location: eventData.location,\n      createdAt: Math.floor(Date.now() / 1000)\n    });\n\n    // Get the first ticket type for simplicity\n    // In a more complex implementation, you might want to handle multiple ticket types\n    const ticketType = eventData.ticketTypes[0] || { price: '0', supply: eventData.capacity };\n    \n    // Convert price to wei if it's not already\n    const price = typeof ticketType.price === 'string' && ticketType.price.startsWith('0x') \n      ? ticketType.price \n      : ethers.parseEther(String(ticketType.price || 0));\n\n    console.log(`Creating event with metadata: ${metadata}`);\n    console.log(`Max tickets: ${eventData.capacity}, Price: ${price}`);\n\n    // Call the contract\n    const tx = await eventController.createEvent(\n      metadata,\n      eventData.capacity,\n      price\n    );\n\n    console.log(`Transaction sent: ${tx.hash}`);\n    const receipt = await tx.wait();\n    console.log(`Transaction confirmed: ${receipt.transactionHash}`);\n\n    // Extract event ID from logs\n    const eventCreatedLog = receipt.logs.find(\n      (log: any) => log.topics[0] === ethers.id('EventCreated(uint256,address)')\n    );\n\n    if (!eventCreatedLog) {\n      throw new Error('Event creation transaction did not emit EventCreated log');\n    }\n\n    const eventId = parseInt(eventCreatedLog.topics[1], 16);\n    console.log(`Event created with ID: ${eventId}`);\n    \n    return eventId;\n  } catch (error) {\n    console.error('Error creating event:', error);\n    throw error;\n  }\n};\n\n/**\n * Get event details from the blockchain\n * @param eventId The event ID\n * @returns The event details\n */\nexport const getEvent = async (eventId: number): Promise<any> => {\n  try {\n    const provider = await getEthereumProvider();\n    if (!provider) {\n      throw new Error('No Ethereum provider available');\n    }\n    const chainId = await getCurrentChainId();\n    const addresses = getContractAddresses(chainId);\n    \n    if (!addresses.EVENT_CONTROLLER) {\n      throw new Error('Event controller address not configured');\n    }\n\n    const eventController = new ethers.Contract(\n      addresses.EVENT_CONTROLLER,\n      EventControllerABI,\n      provider\n    );\n\n    const eventData = await eventController.events(eventId);\n    \n    // Parse metadata\n    let metadata = {};\n    try {\n      metadata = JSON.parse(eventData.metadataURI);\n    } catch (e) {\n      console.warn(`Failed to parse event metadata: ${e}`);\n    }\n\n    return {\n      id: eventId,\n      ...metadata,\n      organizer: eventData.organizer,\n      maxTickets: eventData.maxTickets.toString(),\n      ticketsSold: eventData.ticketsSold.toString(),\n      price: eventData.price.toString(),\n      active: eventData.active\n    };\n  } catch (error) {\n    console.error(`Error getting event ${eventId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Purchase tickets for an event\n * @param eventId The event ID\n * @param amount The number of tickets to purchase\n * @returns The transaction hash\n */\nexport const purchaseTickets = async (eventId: number, amount: number): Promise<string> => {\n  try {\n    const provider = await getEthereumProvider();\n    if (!provider) {\n      throw new Error('No Ethereum provider available');\n    }\n\n    const signer = provider.getSigner();\n    const chainId = await getCurrentChainId();\n    const addresses = getContractAddresses(chainId);\n    \n    if (!addresses.EVENT_CONTROLLER) {\n      throw new Error('Event controller address not configured');\n    }\n\n    const eventController = new ethers.Contract(\n      addresses.EVENT_CONTROLLER,\n      EventControllerABI,\n      signer\n    );\n\n    // Get event details to determine price\n    const eventData = await eventController.events(eventId);\n    const totalPrice = eventData.price.mul(amount);\n\n    const tx = await eventController.purchaseTickets(eventId, amount, {\n      value: totalPrice\n    });\n\n    console.log(`Transaction sent: ${tx.hash}`);\n    const receipt = await tx.wait();\n    console.log(`Transaction confirmed: ${receipt.transactionHash}`);\n\n    return receipt.transactionHash;\n  } catch (error) {\n    console.error(`Error purchasing tickets for event ${eventId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Cancel an event\n * @param eventId The event ID\n * @returns The transaction hash\n */\nexport const cancelEvent = async (eventId: number): Promise<string> => {\n  try {\n    const provider = await getEthereumProvider();\n    if (!provider) {\n      throw new Error('No Ethereum provider available');\n    }\n\n    const signer = provider.getSigner();\n    const chainId = await getCurrentChainId();\n    const addresses = getContractAddresses(chainId);\n    \n    if (!addresses.EVENT_CONTROLLER) {\n      throw new Error('Event controller address not configured');\n    }\n\n    const eventController = new ethers.Contract(\n      addresses.EVENT_CONTROLLER,\n      EventControllerABI,\n      signer\n    );\n\n    const tx = await eventController.cancelEvent(eventId);\n\n    console.log(`Transaction sent: ${tx.hash}`);\n    const receipt = await tx.wait();\n    console.log(`Transaction confirmed: ${receipt.transactionHash}`);\n\n    return receipt.transactionHash;\n  } catch (error) {\n    console.error(`Error canceling event ${eventId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Check if a user has tickets for an event\n * @param eventId The event ID\n * @param userAddress The user's address\n * @returns The number of tickets the user has\n */\nexport const getTicketBalance = async (eventId: number, userAddress?: string): Promise<number> => {\n  try {\n    const provider = await getEthereumProvider();\n    if (!provider) {\n      throw new Error('No Ethereum provider available');\n    }\n\n    const chainId = await getCurrentChainId();  \n    const addresses = getContractAddresses(chainId);\n    \n    if (!addresses.EVENT_CONTROLLER) {\n      throw new Error('Event controller address not configured');\n    }\n\n    const eventController = new ethers.Contract(\n      addresses.EVENT_CONTROLLER,\n      EventControllerABI,\n      provider\n    );\n\n    // If no user address provided, get the connected wallet address\n    if (!userAddress) {\n      const signer = provider.getSigner();\n      userAddress = await signer.getAddress();\n    }\n\n    const balance = await eventController.balanceOf(userAddress, eventId);\n    return balance.toNumber();\n  } catch (error) {\n    console.error(`Error getting ticket balance for event ${eventId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Convert event data from form to blockchain format\n * @param formData The form data\n * @returns The event data in blockchain format\n */\nexport const prepareEventData = (formData: any): EventData => {\n  // Convert dates to Unix timestamps\n  const startDate = new Date(formData.startDate).getTime() / 1000;\n  const endDate = new Date(formData.endDate).getTime() / 1000;\n\n  // Prepare ticket types\n  const ticketTypes: TicketType[] = [{\n    name: 'Standard',\n    price: ethers.parseEther(String(formData.price || 0)).toString(),\n    supply: formData.capacity || 0,\n    perWalletLimit: formData.perWalletLimit || 1\n  }];\n\n  return {\n    title: formData.title || '',\n    description: formData.description || '',\n    startDate,\n    endDate,\n    location: formData.location || {\n      type: 'PHYSICAL',\n      physical: '',\n      address: ''\n    },\n    capacity: formData.capacity || 0,\n    ticketTypes\n  };\n}; ","import React, { useState, useRef, useMemo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dialog, Transition } from '@headlessui/react';\nimport { X, AlignLeft, ImageIcon, CalendarDays, BarChartHorizontal, Briefcase, BookOpen } from 'lucide-react';\nimport { PostType } from '../../types/post';\nimport { \n  createPost, \n  setCreatingPost, \n  setPostType, \n  updateDraft,\n  resetDraft,\n  selectPostDraft,\n  selectCreatingPost,\n  selectPostsError\n} from '../../store/slices/postsSlice';\nimport { AppDispatch } from '../../store/store';\nimport clsx from 'clsx';\nimport PostTypeFields from '../posts/PostTypeFields';\nimport { prepareEventData, createEvent } from '../../utils/eventHelpers';\n\n// Define post type mappings that match the expected strings in PostTypeFields\nconst POST_TYPE_MAPPING = {\n  [PostType.TEXT]: 'text',\n  [PostType.IMAGE]: 'image',\n  [PostType.VIDEO]: 'video',\n  [PostType.LINK]: 'link',\n  [PostType.EVENT]: 'event',\n  [PostType.POLL]: 'poll',\n} as const;\n\n// Type for the string values used by PostTypeFields\ntype PostTypeString = typeof POST_TYPE_MAPPING[keyof typeof POST_TYPE_MAPPING];\n\n// Type definitions for the component props\nexport interface PostCreatorProps {\n  // Display mode\n  mode?: 'modal' | 'inline' | 'dialog';\n  \n  // Modal/Dialog specific props\n  isOpen?: boolean;\n  onClose?: () => void;\n  onCancel?: () => void;\n  \n  // Common props\n  tribeId: string | number;\n  onSuccess?: (postId: string) => void;\n  onError?: (error: Error) => void;\n  \n  // Optional customization\n  className?: string;\n  availableTypes?: PostType[];\n  defaultType?: PostType;\n}\n\n// Define the location type structure\ninterface EventLocation {\n  type: 'PHYSICAL' | 'VIRTUAL' | 'HYBRID';\n  physical?: string;\n  virtual?: string;\n}\n\n// Post type options for the UI\nconst postTypeOptions = [\n  { type: PostType.TEXT, label: 'Text', icon: AlignLeft, color: '#4B5563' },\n  { type: PostType.IMAGE, label: 'Image', icon: ImageIcon, color: '#10B981' },\n  { type: PostType.EVENT, label: 'Event', icon: CalendarDays, color: '#F59E0B' },\n  { type: PostType.POLL, label: 'Poll', icon: BarChartHorizontal, color: '#3B82F6' },\n  { type: PostType.LINK, label: 'Resource', icon: Briefcase, color: '#EC4899' },\n  { type: PostType.VIDEO, label: 'Media', icon: BookOpen, color: '#8B5CF6' },\n];\n\n/**\n * A unified post creation component that can render in different modes:\n * - modal: a modal dialog\n * - inline: directly in the page flow\n * - dialog: a custom dialog UI\n */\nexport const PostCreator: React.FC<PostCreatorProps> = ({\n  mode = 'modal',\n  isOpen = false,\n  onClose,\n  onCancel,\n  tribeId,\n  onSuccess,\n  onError,\n  className = 'border border-gray-800',\n  availableTypes = Object.values(PostType).filter(t => typeof t === 'number'),\n  defaultType = PostType.TEXT\n}) => {\n  // Redux hooks\n  const dispatch = useDispatch<AppDispatch>();\n  const postDraft = useSelector(selectPostDraft);\n  const isReduxOpen = useSelector(selectCreatingPost);\n  const error = useSelector(selectPostsError);\n  \n  // Local state\n  const [validationError, setValidationError] = useState<string | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  // Create refs for focus management\n  const titleInputRef = useRef<HTMLInputElement>(null);\n  const closeButtonRef = useRef<HTMLButtonElement>(null);\n  const submitButtonRef = useRef<HTMLButtonElement>(null);\n\n  // Determine effective open state\n  const effectiveIsOpen = mode === 'modal' ? (isOpen || isReduxOpen) : isOpen;\n\n  // Set the default post type to EVENT when the modal opens\n  useEffect(() => {\n    if (isOpen) {\n      dispatch(setPostType(PostType.EVENT));\n    }\n  }, [isOpen, dispatch]);\n\n  // Handle closing the creator\n  const handleClose = () => {\n    if (mode === 'modal') {\n      dispatch(setCreatingPost(false));\n    } else {\n      onClose?.();\n      onCancel?.();\n    }\n    dispatch(resetDraft());\n    setValidationError(null);\n    setIsSubmitting(false);\n  };\n\n  // Handle selecting a post type\n  const handleSelectType = (type: PostType, e?: React.MouseEvent) => {\n    if (e) e.preventDefault();\n    \n    // Update the post type in Redux\n    dispatch(setPostType(type));\n    \n    // Reset any validation errors\n    setValidationError(null);\n    \n    // Focus the title input after type selection\n    if (type === PostType.EVENT) {\n      // Optionally, you can focus the title input immediately if the type is EVENT\n      if (titleInputRef.current) {\n        titleInputRef.current.focus();\n      }\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setValidationError(null);\n    \n    if (!postDraft.content?.trim()) {\n      setValidationError('Please enter content for your post');\n      return;\n    }\n    console.log(`[PostCreator]: Post draft: ${postDraft?.type} : ${PostType?.EVENT}`);\n\n    // Additional validation for event fields\n    if (postDraft.type === \"EVENT\") {\n      console.log(`[PostCreator]: Post draft into condition: ${postDraft?.eventDetails?.title} : ${postDraft?.eventDetails?.startDate} : ${postDraft?.eventDetails?.location}`);\n      if (!postDraft.eventDetails?.title) {\n        setValidationError('Please enter a title for your event');\n        return;\n      }\n      if (!postDraft.eventDetails?.startDate) {\n        setValidationError('Please set a date for your event');\n        return;\n      }\n      if (!postDraft.eventDetails?.location) {\n        setValidationError('Please enter a location for your event');\n        return;\n      }\n    }\n    \n    setIsSubmitting(true);\n    \n    try {\n      // Prepare the post data\n      const postData: any = {\n        content: postDraft.content,\n        title: postDraft.title,\n        type: postDraft.type,\n        tribeId: tribeId,\n      };\n      \n      \n      // For event posts, ensure we have the right metadata structure\n      if ((postData.type) == \"EVENT\") {\n        try {\n          // Prepare event data for blockchain\n          const eventData = prepareEventData(postDraft.eventDetails);\n          console.log(`[PostCreator]: Event data: ${JSON.stringify(eventData)}`);\n          \n          // Create the event on the blockchain\n          const eventId = await createEvent(eventData);\n          \n          // Add the event ID to the post data\n          postData.eventDetails = {\n            ...postDraft.eventDetails,\n            eventId\n          };\n          console.log(`[PostCreator]: Post data: ${postData}`);\n          console.log(`Event created with ID: ${eventId}`);\n        } catch (error) {\n          console.error('Error creating event:', error);\n          setValidationError('Failed to create event. Please try again.');\n          setIsSubmitting(false);\n          return;\n        }\n      }\n      \n      // Create the post\n      const postId = await dispatch(createPost(postData)).unwrap();\n      \n      // Reset the form\n      dispatch(resetDraft());\n      setValidationError(null);\n      \n      // Call the success callback if provided\n      if (onSuccess) {\n        onSuccess(postId);\n      }\n      \n      // Close the modal if in modal mode\n      if (mode === 'modal') {\n        dispatch(setCreatingPost(false));\n      }\n    } catch (error: any) {\n      setValidationError(error.message || 'Failed to create post');\n      if (onError) {\n        onError(error);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  // Get the type string for PostTypeFields\n  const postTypeString = useMemo(() => {\n    // If it's a number type from the enum\n    if (typeof postDraft.type === 'number') {\n      return POST_TYPE_MAPPING[postDraft.type as keyof typeof POST_TYPE_MAPPING] || 'text';\n    }\n    \n    // If it's already a string\n    if (typeof postDraft.type === 'string') {\n      const normalizedType = postDraft.type.toLowerCase();\n      if (Object.values(POST_TYPE_MAPPING).some(val => val === normalizedType)) {\n        return normalizedType as PostTypeString;\n      }\n    }\n    \n    // Default fallback\n    return 'text' as PostTypeString;\n  }, [postDraft.type]);\n\n  // Content to render inside any container\n  const renderContent = () => (\n    <div className=\"space-y-4\">\n      {/* Post Type Selection */}\n      <div className=\"flex flex-wrap gap-2 mb-4\">\n        {postTypeOptions.map(option => (\n          <button\n            key={option.type}\n            type=\"button\"\n            onClick={(e) => handleSelectType(option.type, e)}\n            className={clsx(\n              \"flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors\",\n              Number(postDraft.type) === option.type\n                ? \"bg-foreground/10 text-foreground\"\n                : \"text-muted-foreground hover:text-foreground hover:bg-foreground/5\"\n            )}\n          >\n            <option.icon className=\"w-4 h-4\" style={{ color: option.color }} />\n            <span>{option.label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Errors */}\n      {(validationError || error) && (\n        <div className=\"p-3 bg-red-500/20 border border-red-500/50 rounded-lg text-red-200\" role=\"alert\">\n          {validationError || error}\n        </div>\n      )}\n\n      {/* Title Field */}\n      {postTypeString !== 'event' && <div>\n        <input\n          ref={titleInputRef}\n          type=\"text\"\n          placeholder=\"Post title\"\n          value={postDraft.title || ''}\n          onChange={(e) => dispatch(updateDraft({ title: e.target.value }))}\n          className=\"w-full px-4 py-3 rounded-lg bg-black/20 text-white border border-white/10 focus:ring-2 focus:ring-accent focus:border-transparent\"\n          disabled={isSubmitting}\n          tabIndex={0}\n        />\n      </div>}\n\n      {/* Content Field */}\n      {<div>\n        <textarea\n          placeholder=\"What's on your mind?\"\n          value={postDraft.content || ''}\n          onChange={(e) => dispatch(updateDraft({ content: e.target.value }))}\n          className=\"w-full px-4 py-3 rounded-lg bg-black/20 text-white border border-white/10 focus:ring-2 focus:ring-accent focus:border-transparent min-h-[120px] resize-none\"\n          disabled={isSubmitting}\n          tabIndex={0}\n        />\n      </div>}\n\n      {/* Dynamic Type-specific Fields */}\n      <div className=\"pt-2 border-t border-gray-700/30 max-h-[30vh] overflow-y-auto\">\n        <PostTypeFields type={postTypeString} />\n      </div>\n\n      {/* Submit Button */}\n      <div className=\"flex justify-end pt-2 border-t border-gray-700/30\">\n        <button\n          ref={submitButtonRef}\n          type=\"submit\"\n          disabled={isSubmitting}\n          className={clsx(\n            \"px-4 py-2 rounded-lg font-medium\",\n            isSubmitting\n              ? \"bg-accent/50 cursor-not-allowed\"\n              : \"bg-accent hover:bg-accent/90 text-white\"\n          )}\n          tabIndex={0}\n        >\n          {isSubmitting ? \"Creating...\" : \"Create Post\"}\n        </button>\n      </div>\n    </div>\n  );\n\n  // Render based on the selected mode\n  if (mode === 'inline') {\n    return (\n      <form onSubmit={handleSubmit} className={className}>\n        {renderContent()}\n      </form>\n    );\n  } else if (mode === 'dialog') {\n    return (\n      <div className={`bg-card rounded-xl shadow-xl p-6 ${className}`}>\n        <form onSubmit={handleSubmit}>\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl text-white font-semibold\">Create Post</h2>\n            {onClose && (\n              <button \n                type=\"button\" \n                onClick={handleClose}\n                className=\"text-gray-400 hover:text-white\"\n                tabIndex={0}\n              >\n                <X size={20} />\n              </button>\n            )}\n          </div>\n          {renderContent()}\n        </form>\n      </div>\n    );\n  } else {\n    return (\n      <Transition appear show={effectiveIsOpen} as={React.Fragment}>\n        <Dialog \n          as=\"div\"\n          className=\"fixed inset-0 z-50 overflow-y-auto\"\n          onClose={handleClose}\n          initialFocus={titleInputRef}\n        >\n          {/* The backdrop, rendered as a fixed sibling to the panel container */}\n          <div className=\"fixed inset-0 bg-black/70 backdrop-blur-sm\" aria-hidden=\"true\" />\n          \n          <div className=\"min-h-screen px-4 flex items-center justify-center\">\n            <Transition.Child\n              as={React.Fragment}\n              enter=\"ease-out duration-300\"\n              enterFrom=\"opacity-0 scale-95\"\n              enterTo=\"opacity-100 scale-100\"\n              leave=\"ease-in duration-200\"\n              leaveFrom=\"opacity-100 scale-100\"\n              leaveTo=\"opacity-0 scale-95\"\n            >\n              <Dialog.Panel className=\"w-full max-w-2xl transform overflow-hidden rounded-2xl bg-gray-900 p-6 shadow-xl transition-all\">\n                <div className=\"max-h-[80vh] overflow-y-auto\">\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <Dialog.Title\n                      as=\"h3\"\n                      className=\"text-xl font-semibold leading-6 text-white\"\n                    >\n                      Create Post\n                    </Dialog.Title>\n                    <button\n                      type=\"button\"\n                      ref={closeButtonRef}\n                      className=\"p-2 rounded-full focus:outline-none hover:bg-gray-800\"\n                      onClick={handleClose}\n                      tabIndex={0}\n                    >\n                      <X className=\"w-5 h-5 text-gray-400\" />\n                    </button>\n                  </div>\n                  \n                  <form onSubmit={handleSubmit}>\n                    {renderContent()}\n                  </form>\n                </div>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </Dialog>\n      </Transition>\n    );\n  }\n};\n\nexport default PostCreator; ","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectCreatingPost, setCreatingPost } from '../../store/slices/postsSlice';\nimport { PostCreator } from '../post/PostCreator';\n\ninterface CreatePostModalProps {\n  tribeId: string;\n  onSuccess?: (postId: string) => void;\n  isOpen?: boolean;\n}\n\n/**\n * Backward-compatible CreatePostModal that uses the new PostCreator component\n */\nconst CreatePostModal: React.FC<CreatePostModalProps> = ({ \n  tribeId, \n  onSuccess,\n  isOpen: propIsOpen\n}) => {\n  const reduxIsOpen = useSelector(selectCreatingPost);\n  const dispatch = useDispatch();\n  \n  const isOpen = propIsOpen !== undefined ? propIsOpen : reduxIsOpen;\n  \n  const handleClose = () => {\n    console.log('[CreatePostModal]: Closing modal');\n    dispatch(setCreatingPost(false));\n  };\n  \n  const handleSuccess = (postId: string) => {\n    console.log('[CreatePostModal]: Post created successfully:', postId);\n    // Call the parent success handler if provided\n    if (onSuccess) {\n      onSuccess(postId);\n    }\n    // Close the modal\n    handleClose();\n  };\n  \n  console.log('[CreatePostModal]: Rendering with isOpen =', isOpen);\n  \n  return (\n    <PostCreator\n      mode=\"modal\"\n      isOpen={isOpen}\n      onClose={handleClose}\n      tribeId={tribeId}\n      onSuccess={handleSuccess}\n      onError={(error) => console.error('[CreatePostModal]: Error creating post:', error)}\n    />\n  );\n};\n\nexport default CreatePostModal; ","import { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { HomeIcon, PlusCircle, UserCircle, X, FileText, Users, MessageSquare, Image } from 'lucide-react';\nimport { useDispatch } from 'react-redux';\nimport { setCreatingPost } from '../store/slices/postsSlice';\nimport { TribeCreationForm } from './tribe/TribeCreationForm';\nimport CreatePostModal from './posts/CreatePostModal';\n\nexport function BottomNav() {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const [showMenu, setShowMenu] = useState(false);\n  const [showTribeModal, setShowTribeModal] = useState(false);\n  const [showNotificationModal, setShowNotificationModal] = useState(false);\n  \n  const creationOptions = [\n    {\n      icon: <FileText className=\"w-6 h-6\" />,\n      label: 'Create Post',\n      action: () => {\n        setShowMenu(false);\n        dispatch(setCreatingPost(true));\n      }\n    },\n    {\n      icon: <Users className=\"w-6 h-6\" />,\n      label: 'Create Tribe',\n      action: () => {\n        setShowMenu(false);\n        setShowTribeModal(true);\n      }\n    }\n  ];\n  \n  const handleAddClick = () => {\n    setShowMenu(!showMenu);\n  };\n  \n  const handleTribeCreationSuccess = (tribeId: number) => {\n    setShowTribeModal(false);\n    navigate(`/tribes/${tribeId}`);\n  };\n\n  const handleHomeClick = () => {\n    if (location.pathname !== '/') {\n      navigate('/');\n    }\n  };\n\n  return (\n    <>\n      <nav className=\"fixed bottom-0 left-0 right-0 z-40 shadow-md\" style={{ backgroundColor: 'var(--chain-bg)' }}>\n        <div className=\"flex items-center justify-around py-3\">\n          <button\n            onClick={handleHomeClick}\n            className={`flex flex-col items-center space-y-1 ${\n              location.pathname === '/' ? 'text-theme-primary' : 'text-text-secondary'\n            }`}\n          >\n            <HomeIcon className=\"w-6 h-6\" />\n            <span className=\"text-xs\">Home</span>\n          </button>\n\n          <button\n            onClick={handleAddClick}\n            className=\"flex flex-col items-center space-y-1 text-text-secondary hover:text-theme-primary\"\n          >\n            <PlusCircle className=\"w-6 h-6\" />\n            <span className=\"text-xs\">Create</span>\n          </button>\n\n          <button\n            onClick={() => navigate('/profile')}\n            className={`flex flex-col items-center space-y-1 ${\n              location.pathname === '/profile' ? 'text-theme-primary' : 'text-text-secondary'\n            }`}\n          >\n            <UserCircle className=\"w-6 h-6\" />\n            <span className=\"text-xs\">Profile</span>\n          </button>\n        </div>\n      </nav>\n\n      {/* Main creation options modal */}\n      {showMenu && (\n        <div className=\"fixed inset-0 z-50 flex items-end justify-center sm:items-center\" onClick={() => setShowMenu(false)}>\n          <div className=\"absolute inset-0 backdrop-blur-sm\" style={{ backgroundColor: 'rgba(var(--chain-bg-rgb), 0.8)' }}></div>\n          <div \n            className=\"relative w-full max-w-md rounded-t-2xl sm:rounded-xl overflow-hidden shadow-lg z-10\"\n            style={{ backgroundColor: 'var(--chain-bg)' }}\n            onClick={e => e.stopPropagation()}\n          >\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h2 className=\"text-xl font-bold text-white\">Create</h2>\n                <button onClick={() => setShowMenu(false)} className=\"text-text-secondary hover:text-white\">\n                  <X className=\"w-6 h-6\" />\n                </button>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {creationOptions.map((option, index) => (\n                  <button\n                    key={index}\n                    onClick={option.action}\n                    className=\"p-4 flex flex-col items-center bg-black/20 rounded-xl hover:bg-black/30 transition-colors\"\n                  >\n                    {option.icon}\n                    <span className=\"font-medium mt-2\">{option.label}</span>\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Create Post Modal */}\n      <CreatePostModal tribeId=\"1\" /> {/* TODO: Get actual tribeId from context/route */}\n\n      {/* Tribe creation modal */}\n      {showTribeModal && (\n        <div className=\"fixed inset-0 z-50 flex items-end justify-center sm:items-center\" onClick={() => setShowTribeModal(false)}>\n          <div className=\"absolute inset-0 backdrop-blur-sm\" style={{ backgroundColor: 'rgba(var(--chain-bg-rgb), 0.8)' }}></div>\n          <div \n            className=\"relative w-full max-w-2xl rounded-t-2xl sm:rounded-xl overflow-hidden shadow-lg z-10 max-h-[90vh] overflow-y-auto\"\n            style={{ backgroundColor: 'var(--chain-bg)' }}\n            onClick={e => e.stopPropagation()}\n          >\n            <div className=\"px-6 py-5\">\n              <div className=\"flex justify-between items-center mb-5\">\n                <h2 className=\"text-xl font-bold text-white\">Create Tribe</h2>\n                <button onClick={() => setShowTribeModal(false)} className=\"text-text-secondary hover:text-white transition-colors\">\n                  <X className=\"w-6 h-6\" />\n                </button>\n              </div>\n              <TribeCreationForm \n                onSuccess={handleTribeCreationSuccess} \n                onCancel={() => setShowTribeModal(false)} \n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Notifications Modal */}\n      {showNotificationModal && (\n        <div className=\"fixed inset-0 z-50 flex items-end justify-center sm:items-center\" onClick={() => setShowNotificationModal(false)}>\n          <div className=\"absolute inset-0 backdrop-blur-sm\" style={{ backgroundColor: 'rgba(var(--chain-bg-rgb), 0.8)' }}></div>\n          <div \n            className=\"relative w-full max-w-md rounded-t-2xl sm:rounded-xl overflow-hidden shadow-lg z-10 max-h-[90vh] overflow-y-auto\"\n            style={{ backgroundColor: 'var(--chain-bg)' }}\n            onClick={e => e.stopPropagation()}\n          >\n            <div className=\"p-4\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h2 className=\"text-xl font-bold\">Notifications</h2>\n                <button onClick={() => setShowNotificationModal(false)} className=\"text-text-secondary\">\n                  <X className=\"w-6 h-6\" />\n                </button>\n              </div>\n              \n              {/* Notification list would go here */}\n              <div className=\"text-center text-text-secondary py-8 bg-black/20 rounded-xl\">\n                You have no notifications\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}","import React, { createContext, useContext, ReactNode, useState, useEffect, useCallback } from 'react';\nimport { TribesSDK } from '../services/TribesSDK';\nimport { Tribe } from '../types/tribe';\nimport { useWallet } from '../hooks/useWallet';\n\ninterface TribesContextType {\n  sdk: TribesSDK | null;\n  isInitialized: boolean;\n  tribes: Tribe[];\n  isLoading: boolean;\n  error: string | null;\n  refreshTribes: () => Promise<void>;\n  getTribe: (tribeId: number) => Promise<Tribe | null>;\n}\n\nconst defaultContext: TribesContextType = {\n  sdk: null,\n  isInitialized: false,\n  tribes: [],\n  isLoading: false,\n  error: null,\n  refreshTribes: async () => {},\n  getTribe: async () => null\n};\n\nconst TribesContext = createContext<TribesContextType>(defaultContext);\n\ninterface TribesProviderProps {\n  children: ReactNode;\n  sdk: TribesSDK | null;\n  isInitialized: boolean;\n}\n\nexport function TribesProvider({ children, sdk, isInitialized }: TribesProviderProps) {\n  const [tribes, setTribes] = useState<Tribe[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { address } = useWallet();\n\n  const refreshTribes = useCallback(async () => {\n    if (!sdk || !isInitialized) {\n      console.log('Cannot refresh tribes: SDK not initialized');\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n      console.log('Refreshing tribes...');\n      \n      // Get total tribes count\n      const count = await sdk.getTribesCount();\n      console.log(`Found ${count} tribes`);\n      \n      // Fetch all tribes\n      const allTribes: Tribe[] = [];\n      for (let i = 1; i <= count; i++) {\n        try {\n          const tribe = await sdk.getTribe(i);\n          if (tribe) {\n            allTribes.push(tribe);\n          }\n        } catch (err) {\n          console.error(`Error fetching tribe ${i}:`, err);\n        }\n      }\n      \n      setTribes(allTribes);\n      console.log('Loaded tribes:', allTribes);\n    } catch (err) {\n      console.error('Error refreshing tribes:', err);\n      setError((err as Error).message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk, isInitialized]);\n\n  const getTribe = useCallback(async (tribeId: number): Promise<Tribe | null> => {\n    if (!sdk || !isInitialized) {\n      console.log('Cannot get tribe: SDK not initialized');\n      return null;\n    }\n\n    try {\n      return await sdk.getTribe(tribeId);\n    } catch (err) {\n      console.error(`Error getting tribe ${tribeId}:`, err);\n      return null;\n    }\n  }, [sdk, isInitialized]);\n\n  // Load tribes on initialization and when address changes\n  useEffect(() => {\n    if (isInitialized) {\n      refreshTribes();\n    }\n  }, [isInitialized, address, refreshTribes]);\n\n  return (\n    <TribesContext.Provider \n      value={{ \n        sdk, \n        isInitialized, \n        tribes, \n        isLoading, \n        error, \n        refreshTribes,\n        getTribe\n      }}\n    >\n      {children}\n    </TribesContext.Provider>\n  );\n}\n\nexport function useTribesSDK() {\n  const context = useContext(TribesContext);\n  if (context === undefined) {\n    throw new Error('useTribesSDK must be used within a TribesProvider');\n  }\n  return context;\n} ","import { useCallback } from 'react';\nimport { Address } from 'viem';\nimport { useWallet } from './useWallet';\nimport { Tribe } from '../types/tribe';\nimport { useTribesSDK } from '../contexts/TribesContext';\n\nexport interface TribesDataHookResult {\n  // State\n  isLoading: boolean;\n  error: string | null;\n  tribes: Tribe[];\n  userTribes: number[];\n\n  // Actions\n  getTribe: (tribeId: number) => Promise<Tribe>;\n  getAllTribes: () => Promise<void>;\n  getUserTribes: (address: Address) => Promise<number[]>;\n  getMemberStatus: (tribeId: number, memberAddress: Address) => Promise<number>;\n  refreshTribes: () => Promise<void>;\n}\n\n/**\n * Hook for reading tribes data\n */\nexport function useTribesData(): TribesDataHookResult {\n  const { \n    sdk, \n    isInitialized, \n    tribes, \n    isLoading, \n    error, \n    refreshTribes: contextRefreshTribes,\n    getTribe: contextGetTribe\n  } = useTribesSDK();\n  \n  const { address } = useWallet();\n  \n  // Wrapper functions to maintain backward compatibility\n  const getTribe = useCallback(async (tribeId: number): Promise<Tribe> => {\n    const tribe = await contextGetTribe(tribeId);\n    if (!tribe) {\n      throw new Error(`Tribe ${tribeId} not found`);\n    }\n    return tribe;\n  }, [contextGetTribe]);\n\n  const getAllTribes = useCallback(async (): Promise<void> => {\n    return contextRefreshTribes();\n  }, [contextRefreshTribes]);\n  \n  const refreshTribes = useCallback(async (): Promise<void> => {\n    return contextRefreshTribes();\n  }, [contextRefreshTribes]);\n\n  // These functions are still needed for specific use cases\n  const getUserTribes = useCallback(async (userAddress: Address): Promise<number[]> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    try {\n      return await sdk.getUserTribes(userAddress);\n    } catch (err) {\n      console.error('Error getting user tribes:', err);\n      throw err;\n    }\n  }, [sdk]);\n\n  const getMemberStatus = useCallback(async (tribeId: number, memberAddress: Address): Promise<number> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    try {\n      return await sdk.getMemberStatus(tribeId, memberAddress);\n    } catch (err) {\n      console.error('Error getting member status:', err);\n      throw err;\n    }\n  }, [sdk]);\n\n  return {\n    isLoading,\n    error,\n    tribes,\n    userTribes: [], // This comes from the context now\n    getTribe,\n    getAllTribes,\n    getUserTribes,\n    getMemberStatus,\n    refreshTribes\n  };\n} ","import { Tribe } from '../types/tribe';\nimport { type WalletClient } from 'viem';\n\n/**\n * Extract avatar URL from tribe metadata or return a default\n * @param tribe The tribe object\n * @param defaultAvatar Optional default avatar URL\n * @returns The avatar URL\n */\nexport function getTribeAvatar(tribe: Tribe, defaultAvatar: string = '/images/default-avatar.png'): string {\n  if (!tribe) return defaultAvatar;\n  \n  try {\n    // Try to access avatar directly if it exists in the tribe object\n    const tribeAny = tribe as any;\n    if (tribeAny.avatar && typeof tribeAny.avatar === 'string' && tribeAny.avatar.trim() !== '') {\n      console.log(`Using direct avatar for tribe ${tribe.id}:`, tribeAny.avatar);\n      return tribeAny.avatar;\n    }\n    \n    // Try to parse metadata if it's a string\n    let metadata: any = null;\n    if (typeof tribe.metadata === 'string' && tribe.metadata.trim() !== '') {\n      try {\n        metadata = JSON.parse(tribe.metadata);\n        console.log(`Successfully parsed metadata for tribe ${tribe.id}`);\n      } catch (parseError) {\n        console.error(`Error parsing metadata JSON for tribe ${tribe.id}:`, parseError);\n      }\n    } else if (typeof tribe.metadata === 'object' && tribe.metadata !== null) {\n      metadata = tribe.metadata;\n      console.log(`Using metadata object directly for tribe ${tribe.id}`);\n    }\n    \n    // Check if avatar exists in metadata and is not empty\n    if (metadata?.avatar && typeof metadata.avatar === 'string' && metadata.avatar.trim() !== '') {\n      console.log(`Found avatar in metadata for tribe ${tribe.id}:`, metadata.avatar);\n      return metadata.avatar;\n    }\n    \n    // Try fallback to a generated avatar using DiceBear API\n    if (tribe.id && tribe.name) {\n      const generatedAvatar = `https://api.dicebear.com/7.x/shapes/svg?seed=${encodeURIComponent(tribe.id)}-${encodeURIComponent(tribe.name)}`;\n      console.log(`Generated avatar for tribe ${tribe.id}:`, generatedAvatar);\n      return generatedAvatar;\n    }\n    \n    console.log(`Using default avatar for tribe ${tribe.id}`);\n    return defaultAvatar;\n  } catch (error) {\n    console.error(`Error processing avatar for tribe ${tribe.id}:`, error);\n    return defaultAvatar;\n  }\n}\n\n/**\n * Extract privacy setting from tribe metadata\n * @param tribe The tribe object\n * @returns 'public' or 'private'\n */\nexport function getTribePrivacy(tribe: Tribe): 'public' | 'private' {\n  if (!tribe) return 'public';\n  \n  try {\n    // Check for direct privacy property\n    const tribeAny = tribe as any;\n    if (tribeAny.privacy === 'private') {\n      return 'private';\n    }\n    \n    // Try to parse metadata if it's a string\n    let metadata: any = null;\n    if (typeof tribe.metadata === 'string' && tribe.metadata.trim() !== '') {\n      try {\n        metadata = JSON.parse(tribe.metadata);\n      } catch (parseError) {\n        console.error(`Error parsing metadata JSON for tribe ${tribe.id}:`, parseError);\n      }\n    } else if (typeof tribe.metadata === 'object' && tribe.metadata !== null) {\n      metadata = tribe.metadata;\n    }\n    \n    // Check if isPrivate flag exists in metadata\n    if (metadata?.isPrivate === true) {\n      return 'private';\n    }\n    \n    // Check if privacy field exists\n    if (metadata?.privacy === 'private') {\n      return 'private';\n    }\n    \n    // Return public by default\n    return 'public';\n  } catch (error) {\n    console.error(`Error parsing metadata for tribe ${tribe.id}:`, error);\n    return 'public';\n  }\n}\n\n/**\n * Extract topics from tribe metadata\n * @param tribe The tribe object\n * @returns Array of topics\n */\nexport function getTribeTopics(tribe: Tribe): Array<{id: string, name: string, postCount?: number}> {\n  if (!tribe) return [];\n  \n  try {\n    // Check for direct topics property\n    const tribeAny = tribe as any;\n    if (Array.isArray(tribeAny.topics)) {\n      return tribeAny.topics.map((topic: any, index: number) => ({\n        id: topic.id || `topic-${index}`,\n        name: topic.name || `Topic ${index + 1}`,\n        postCount: topic.postCount || 0\n      }));\n    }\n    \n    // Try to parse metadata if it's a string\n    let metadata: any = null;\n    if (typeof tribe.metadata === 'string' && tribe.metadata.trim() !== '') {\n      try {\n        metadata = JSON.parse(tribe.metadata);\n      } catch (parseError) {\n        console.error(`Error parsing metadata JSON for tribe ${tribe.id}:`, parseError);\n      }\n    } else if (typeof tribe.metadata === 'object' && tribe.metadata !== null) {\n      metadata = tribe.metadata;\n    }\n    \n    // Check if topics array exists in metadata\n    if (Array.isArray(metadata?.topics)) {\n      return metadata.topics.map((topic: any, index: number) => ({\n        id: topic.id || `topic-${index}`,\n        name: topic.name || `Topic ${index + 1}`,\n        postCount: topic.postCount || 0\n      }));\n    }\n    \n    return [];\n  } catch (error) {\n    console.error(`Error parsing metadata for tribe ${tribe.id}:`, error);\n    return [];\n  }\n}\n\n/**\n * Extract description from tribe metadata\n * @param tribe The tribe object\n * @returns The description\n */\nexport function getTribeDescription(tribe: Tribe): string {\n  if (!tribe) return '';\n  \n  try {\n    // Check for direct description property\n    const tribeAny = tribe as any;\n    if (tribeAny.description && typeof tribeAny.description === 'string') {\n      return tribeAny.description;\n    }\n    \n    // Try to parse metadata if it's a string\n    let metadata: any = null;\n    if (typeof tribe.metadata === 'string' && tribe.metadata.trim() !== '') {\n      try {\n        metadata = JSON.parse(tribe.metadata);\n      } catch (parseError) {\n        console.error(`Error parsing metadata JSON for tribe ${tribe.id}:`, parseError);\n      }\n    } else if (typeof tribe.metadata === 'object' && tribe.metadata !== null) {\n      metadata = tribe.metadata;\n    }\n    \n    // Check if description exists in metadata\n    if (metadata?.description && typeof metadata.description === 'string') {\n      return metadata.description;\n    }\n    \n    return '';\n  } catch (error) {\n    console.error(`Error parsing metadata for tribe ${tribe.id}:`, error);\n    return '';\n  }\n}\n\n/**\n * Extract cover image URL from tribe metadata\n * @param tribe The tribe object\n * @param defaultCover Optional default cover image URL\n * @returns The cover image URL\n */\nexport function getTribeCoverImage(tribe: Tribe, defaultCover: string = '/images/default-cover.png'): string {\n  if (!tribe) return defaultCover;\n  \n  try {\n    // Check for direct coverImage property\n    const tribeAny = tribe as any;\n    if (tribeAny.coverImage && typeof tribeAny.coverImage === 'string' && tribeAny.coverImage.trim() !== '') {\n      return tribeAny.coverImage;\n    }\n    \n    // Try to parse metadata if it's a string\n    let metadata: any = null;\n    if (typeof tribe.metadata === 'string' && tribe.metadata.trim() !== '') {\n      try {\n        metadata = JSON.parse(tribe.metadata);\n      } catch (parseError) {\n        console.error(`Error parsing metadata JSON for tribe ${tribe.id}:`, parseError);\n      }\n    } else if (typeof tribe.metadata === 'object' && tribe.metadata !== null) {\n      metadata = tribe.metadata;\n    }\n    \n    // Check if coverImage exists in metadata and is not empty\n    if (metadata?.coverImage && typeof metadata.coverImage === 'string' && metadata.coverImage.trim() !== '') {\n      return metadata.coverImage;\n    }\n    \n    return defaultCover;\n  } catch (error) {\n    console.error(`Error parsing metadata for tribe ${tribe.id}:`, error);\n    return defaultCover;\n  }\n}\n\n/**\n * Get user membership status for the tribe\n * @param tribe The tribe object\n * @returns Object with membership status flags\n */\nexport function getTribeMembershipStatus(tribe: Tribe): { isMember: boolean, isPending: boolean, isAdmin: boolean } {\n  if (!tribe) return { isMember: false, isPending: false, isAdmin: false };\n  \n  try {\n    // Check if tribe has direct membership status properties\n    const tribeAny = tribe as any;\n    \n    if (tribeAny.userMembershipStatus) {\n      return {\n        isMember: Boolean(tribeAny.userMembershipStatus.isMember),\n        isPending: Boolean(tribeAny.userMembershipStatus.isPending),\n        isAdmin: Boolean(tribeAny.userMembershipStatus.isAdmin)\n      };\n    }\n    \n    // Try to parse metadata for membership status\n    let metadata: any = null;\n    if (typeof tribe.metadata === 'string' && tribe.metadata.trim() !== '') {\n      try {\n        metadata = JSON.parse(tribe.metadata);\n      } catch (parseError) {\n        console.error(`Error parsing metadata JSON for tribe ${tribe.id}:`, parseError);\n      }\n    } else if (typeof tribe.metadata === 'object' && tribe.metadata !== null) {\n      metadata = tribe.metadata;\n    }\n    \n    if (metadata?.userMembershipStatus) {\n      return {\n        isMember: Boolean(metadata.userMembershipStatus.isMember),\n        isPending: Boolean(metadata.userMembershipStatus.isPending),\n        isAdmin: Boolean(metadata.userMembershipStatus.isAdmin)\n      };\n    }\n    \n    // Check for individual properties in the tribe object\n    return {\n      isMember: Boolean(tribeAny.isMember),\n      isPending: Boolean(tribeAny.isPending),\n      isAdmin: Boolean(tribeAny.isAdmin || tribe.admins?.includes(tribeAny.currentUser))\n    };\n  } catch (error) {\n    console.error(`Error getting membership status for tribe ${tribe.id}:`, error);\n    return { isMember: false, isPending: false, isAdmin: false };\n  }\n}\n\n// Error types for tribe operations\nexport enum ErrorType {\n  UNAUTHORIZED = 'unauthorized',\n  COOLDOWN_ACTIVE = 'cooldown_active',\n  NOT_FOUND = 'not_found',\n  CONTRACT_ERROR = 'contract_error',\n  UNKNOWN = 'unknown'\n}\n\n// Add the TribesHelper class\nexport class TribesHelper {\n  private chainId: number;\n  private walletClient: WalletClient | null = null;\n  private userAddress: string | null = null;\n\n  constructor(chainId: number) {\n    this.chainId = chainId;\n  }\n\n  async connect(walletClient: WalletClient, address: string): Promise<void> {\n    this.walletClient = walletClient;\n    this.userAddress = address;\n  }\n\n  // Implement required methods with mock functionality\n  async createPost(tribeId: number, metadata: string, isGated: boolean = false, \n                  collectibleContract: string = '0x0000000000000000000000000000000000000000', \n                  collectibleId: number = 0): Promise<number> {\n    return 1; // Mock post ID\n  }\n\n  async getPost(postId: number): Promise<any> {\n    return {\n      id: postId,\n      creator: this.userAddress || '0x0',\n      tribeId: 1,\n      metadata: '{}',\n      isGated: false,\n      collectibleContract: '0x0000000000000000000000000000000000000000',\n      collectibleId: 0,\n      isEncrypted: false,\n      accessSigner: '0x0000000000000000000000000000000000000000'\n    };\n  }\n\n  async getPostsByTribe(tribeId: number, offset: number = 0, limit: number = 10): Promise<any> {\n    return { postIds: [1, 2, 3], total: 3 };\n  }\n\n  async getPostsByUser(userAddress: string, offset: number = 0, limit: number = 10): Promise<any> {\n    return { postIds: [1, 2], total: 2 };\n  }\n\n  async canViewPost(postId: number, viewer: string): Promise<boolean> {\n    return true;\n  }\n\n  async interactWithPost(postId: number, interactionType: number): Promise<void> {}\n\n  async getInteractionCount(postId: number, interactionType: number): Promise<number> {\n    return 0;\n  }\n} ","import { useNavigate, useLocation } from 'react-router-dom';\nimport { X, Hash, Users, Globe, Lock } from 'lucide-react';\nimport { useTribesData } from '../hooks/useTribesData';\nimport clsx from 'clsx';\nimport { getTribeAvatar, getTribePrivacy, getTribeTopics } from '../utils/tribeHelpers';\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function Sidebar({ isOpen, onClose }: SidebarProps) {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { tribes, isLoading } = useTribesData();\n  const currentPath = location.pathname;\n\n  // Get all topics from tribes with proper error handling\n  const allTopics = tribes?.flatMap(tribe => {\n    const topics = getTribeTopics(tribe);\n    return topics.map(topic => ({\n      ...topic,\n      tribeName: tribe.name,\n      tribeId: tribe.id\n    }));\n  }) || [];\n\n  return (\n    <>\n      {/* Overlay */}\n      <div\n        className={clsx(\n          'fixed inset-0 bg-black/50 backdrop-blur-sm z-30 md:hidden transition-opacity',\n          isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'\n        )}\n        onClick={onClose}\n      />\n\n      {/* Sidebar */}\n      <aside\n        className={clsx(\n          'fixed md:sticky top-[64px] left-0 h-[calc(100vh-64px-64px)] w-64',\n          'bg-theme-bg/90 backdrop-blur-xl z-30',\n          'transform transition-transform duration-200 ease-in-out',\n          'overflow-hidden flex flex-col',\n          isOpen ? 'translate-x-0' : '-translate-x-full md:translate-x-0'\n        )}\n      >\n        {/* Mobile Header */}\n        <div className=\"p-4 flex justify-between items-center md:hidden\">\n          <h2 className=\"text-xl font-bold text-text-primary\">Navigation</h2>\n          <button onClick={onClose} className=\"p-1 text-text-primary hover:text-theme-primary\">\n            <X className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        {/* Scrollable Content */}\n        <div className=\"flex-1 overflow-y-auto overflow-x-hidden\">\n          <div className=\"p-4 space-y-8\">\n            {/* Tribes Section */}\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4 text-sm font-medium text-text-secondary sticky top-0 bg-theme-bg/90 backdrop-blur-xl py-2\">\n                <Users className=\"w-4 h-4\" />\n                <span>TRIBES</span>\n              </div>\n              <div className=\"space-y-1\">\n                {isLoading ? (\n                  // Loading skeleton\n                  [...Array(3)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse bg-theme-primary/5 h-9 rounded-lg\" />\n                  ))\n                ) : tribes?.map(tribe => {\n                  const avatarUrl = getTribeAvatar(tribe);\n                  const privacy = getTribePrivacy(tribe);\n                  \n                  return (\n                    <button\n                      key={tribe.id}\n                      onClick={() => {\n                        navigate(`/tribes/${tribe.id}`);\n                        onClose();\n                      }}\n                      className={clsx(\n                        'w-full px-2 py-1.5 rounded-lg',\n                        'flex gap-2 transition-colors',\n                        'text-text-secondary hover:text-text-primary',\n                        'hover:bg-theme-primary/5',\n                        currentPath === `/tribes/${tribe.id}` ? 'bg-theme-primary/10 text-text-primary' : ''\n                      )}\n                    >\n                      <img\n                        src={avatarUrl}\n                        alt={tribe.name}\n                        className=\"w-6 h-6 rounded-lg\"\n                        onError={(e) => {\n                          // Fallback if image fails to load\n                          (e.target as HTMLImageElement).src = '/images/default-avatar.png';\n                        }}\n                      />\n                      <span className=\"flex-1 truncate text-sm text-left\">{tribe.name}</span>\n                      {privacy === 'public' ? (\n                        <Globe className=\"w-3 h-3 opacity-50\" />\n                      ) : (\n                        <Lock className=\"w-3 h-3 opacity-50\" />\n                      )}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Topics Section */}\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4 text-sm font-medium text-text-secondary sticky top-0 bg-theme-bg/90 backdrop-blur-xl py-2\">\n                <Hash className=\"w-4 h-4\" />\n                <span>TOPICS</span>\n              </div>\n              <div className=\"flex flex-wrap gap-2\">\n                {isLoading ? (\n                  // Loading skeleton\n                  [...Array(4)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse bg-theme-primary/5 h-7 w-24 rounded-full\" />\n                  ))\n                ) : allTopics.length > 0 ? (\n                  allTopics.map(topic => (\n                    <button\n                      key={`${topic.tribeId}-${topic.id}`}\n                      onClick={() => {\n                        navigate(`/tribes/${topic.tribeId}/topics/${topic.id}`);\n                        onClose();\n                      }}\n                      className={clsx(\n                        'inline-flex items-center px-3 py-1 rounded-full',\n                        'text-sm transition-colors gap-1',\n                        'hover:bg-theme-primary/5',\n                        currentPath === `/tribes/${topic.tribeId}/topics/${topic.id}`\n                          ? 'bg-theme-primary/10 text-text-primary'\n                          : 'bg-black/50 text-text-secondary hover:text-text-primary'\n                      )}\n                    >\n                      <Hash className=\"w-3 h-3\" />\n                      <span className=\"truncate max-w-[120px]\">{topic.name}</span>\n                      <span className=\"text-xs opacity-50 shrink-0\">\n                        {topic.postCount}\n                      </span>\n                    </button>\n                  ))\n                ) : (\n                  <div className=\"text-sm text-text-secondary italic px-2\">\n                    No topics available\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </aside>\n    </>\n  );\n}","import React, { useState } from 'react'\nimport { Outlet } from 'react-router-dom'\nimport { Navigation } from './Navigation'\nimport { BottomNav } from './BottomNav'\nimport { Sidebar } from './Sidebar'\n\nexport function Layout() {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <Navigation onMenuClick={() => setIsSidebarOpen(!isSidebarOpen)} />\n      <div className=\"flex pt-2\">\n        <Sidebar isOpen={isSidebarOpen} onClose={() => setIsSidebarOpen(false)} />\n        <main className=\"flex-1 pb-24 md:pb-6 px-1\">\n          <Outlet />\n        </main>\n      </div>\n      <BottomNav />\n    </div>\n  )\n}","export const STORAGE_KEYS = {\n  AUTH: 'tribes_auth',\n  PROFILE: 'tribes_profile',\n  FOLLOWERS: 'tribes_followers',\n  ONBOARDING: 'tribes_onboarding'\n} as const;\n\nexport interface AuthData {\n  address: string | null;\n  isConnected: boolean;\n}\n\nexport interface ProfileData {\n  username: string;\n  avatarUrl: string;\n  avatarNFT: string;\n  avatarTokenId: number;\n}\n\nexport interface OnboardingState {\n  hasSkippedFollowing: boolean;\n  currentStep: number;\n  username?: string;\n  avatarUrl?: string;\n}\n\n// Auth Storage\nexport const getAuthData = (): AuthData => {\n  const data = localStorage.getItem(STORAGE_KEYS.AUTH);\n  return data ? JSON.parse(data) : { address: null, isConnected: false };\n};\n\nexport const saveAuthData = (data: AuthData): void => {\n  localStorage.setItem(STORAGE_KEYS.AUTH, JSON.stringify(data));\n};\n\n// Profile Storage\nexport const getProfileData = (): ProfileData | null => {\n  const data = localStorage.getItem(STORAGE_KEYS.PROFILE);\n  return data ? JSON.parse(data) : null;\n};\n\nexport const saveProfileData = (data: ProfileData): void => {\n  localStorage.setItem(STORAGE_KEYS.PROFILE, JSON.stringify(data));\n};\n\n// Followers Storage\nexport const getFollowers = (): string[] => {\n  const data = localStorage.getItem(STORAGE_KEYS.FOLLOWERS);\n  return data ? JSON.parse(data) : [];\n};\n\nexport const saveFollowers = (followers: string[]): void => {\n  localStorage.setItem(STORAGE_KEYS.FOLLOWERS, JSON.stringify(followers));\n};\n\nexport const hasMinimumFollows = (): boolean => {\n  const followers = getFollowers();\n  return followers.length >= 3;\n};\n\n// Onboarding Storage\nexport const getOnboardingState = (): OnboardingState => {\n  const data = localStorage.getItem(STORAGE_KEYS.ONBOARDING);\n  return data ? JSON.parse(data) : {\n    hasSkippedFollowing: false,\n    currentStep: 0\n  };\n};\n\nexport const saveOnboardingState = (state: OnboardingState): void => {\n  localStorage.setItem(STORAGE_KEYS.ONBOARDING, JSON.stringify(state));\n};\n\nexport const clearOnboardingState = (): void => {\n  localStorage.removeItem(STORAGE_KEYS.ONBOARDING);\n}; ","import React, { useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../hooks/useAuth';\nimport { blockchain } from '../utils/blockchainUtils';\nimport { \n  getAuthData, \n  getOnboardingState, \n  hasMinimumFollows,\n  getProfileData\n} from '../utils/storage';\n\nconst DEBUG = true;\nconst STORAGE_KEY = 'tribes_auth_state';\n\n// Debug function to track flow\nconst logDebug = (message: string, data?: any) => {\n  if (!DEBUG) return;\n  const timestamp = new Date().toISOString().split('T')[1].split('.')[0];\n  if (data) {\n    console.log(`[RootRoute:${timestamp}] ${message}`, data);\n  } else {\n    console.log(`[RootRoute:${timestamp}] ${message}`);\n  }\n};\n\nexport function RootRoute() {\n  const navigate = useNavigate();\n  const { isConnected, address } = useAuth();\n  const checkInProgress = useRef(false);\n\n  // Track navigation redirects to prevent loops\n  const trackRedirect = (path: string) => {\n    try {\n      const redirects = localStorage.getItem('redirect_attempts') || '{}';\n      const attempts = JSON.parse(redirects);\n      attempts[path] = (attempts[path] || 0) + 1;\n      localStorage.setItem('redirect_attempts', JSON.stringify(attempts));\n      \n      // If we've redirected to connect more than 5 times, reset auth state\n      if (path === '/connect' && attempts[path] > 5) {\n        logDebug('Too many redirects to connect page, clearing auth state');\n        localStorage.removeItem(STORAGE_KEY);\n        localStorage.removeItem('tribes_auth');\n        localStorage.removeItem('tribes_profile');\n        return false;\n      }\n      \n      return true;\n    } catch (e) {\n      console.error('Error tracking redirects:', e);\n      return true;\n    }\n  };\n  \n  const safeNavigate = (path: string) => {\n    if (trackRedirect(path)) {\n      logDebug(`Navigating to ${path}`);\n      navigate(path);\n    } else {\n      logDebug('Navigation blocked to prevent loop');\n    }\n  };\n\n  useEffect(() => {\n    const checkStateAndRedirect = async () => {\n      // Prevent multiple simultaneous checks\n      if (checkInProgress.current) {\n        logDebug('Check already in progress, skipping');\n        return;\n      }\n      \n      checkInProgress.current = true;\n      logDebug('Starting state check');\n      \n      try {\n        // Check saved auth state first\n        const savedAuth = getAuthData();\n        logDebug('Auth data from storage', { isConnected: savedAuth.isConnected, hasAddress: !!savedAuth.address });\n        \n        if (!savedAuth.isConnected || !savedAuth.address) {\n          logDebug('No saved auth, redirecting to connect');\n          safeNavigate('/connect');\n          return;\n        }\n\n        // If we have auth but no active connection, let user reconnect\n        if (!isConnected || !address) {\n          logDebug('No active connection, redirecting to connect');\n          safeNavigate('/connect');\n          return;\n        }\n\n        try {\n          // Check if user has a profile\n          logDebug('Checking profile for address', { address });\n          const result: any = await blockchain.getProfileByAddress(address);\n          logDebug('Profile check result', { exists: !!result.profile });\n          \n          const onboardingState = getOnboardingState();\n\n          // No profile - start onboarding\n          if (!result.profile) {\n            logDebug('No profile, redirecting to username setup');\n            safeNavigate('/username-setup');\n            return;\n          }\n\n          // Has profile and avatar but hasn't completed follow step\n          if (!onboardingState.hasSkippedFollowing && !hasMinimumFollows()) {\n            logDebug('Profile exists but onboarding incomplete');\n            safeNavigate('/onboarding');\n            return;\n          }\n\n          // Everything complete - go to dashboard\n          logDebug('Profile complete, redirecting to dashboard');\n          safeNavigate('/dashboard');\n        } catch (error) {\n          console.error('Error checking profile:', error);\n          logDebug('Error checking profile', { error });\n          safeNavigate('/connect');\n        }\n      } finally {\n        checkInProgress.current = false;\n      }\n    };\n\n    checkStateAndRedirect();\n  }, [isConnected, address, navigate]);\n\n  // Return null as this is just a routing component\n  logDebug('Rendering null');\n  return null;\n} ","import React, { useEffect } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { X, CheckCircle, AlertCircle, AlertTriangle, Info } from 'lucide-react'\nimport { cn } from '../utils/cn'\n\nexport type NotificationType = 'success' | 'error' | 'info' | 'warning'\n\ninterface NotificationToastProps {\n  message: string\n  type: NotificationType\n  isVisible: boolean\n  onClose: () => void\n  duration?: number\n}\n\nconst getIcon = (type: NotificationType) => {\n  switch (type) {\n    case 'success':\n      return <CheckCircle className=\"w-5 h-5\" />\n    case 'error':\n      return <AlertCircle className=\"w-5 h-5\" />\n    case 'warning':\n      return <AlertTriangle className=\"w-5 h-5\" />\n    case 'info':\n      return <Info className=\"w-5 h-5\" />\n  }\n}\n\nconst toastVariants = {\n  success: 'bg-success-main/20 text-success-main border-success-main/20',\n  error: 'bg-destructive/20 text-destructive border-destructive/20',\n  warning: 'bg-yellow-500/20 text-yellow-500 border-yellow-500/20',\n  info: 'bg-blue-500/20 text-blue-500 border-blue-500/20',\n}\n\nexport const NotificationToast: React.FC<NotificationToastProps> = ({\n  message,\n  type,\n  isVisible,\n  onClose,\n  duration = 3000\n}) => {\n  useEffect(() => {\n    if (isVisible) {\n      const timer = setTimeout(() => {\n        onClose()\n      }, duration)\n\n      return () => clearTimeout(timer)\n    }\n  }, [isVisible, duration, onClose])\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          initial={{ opacity: 0, y: -50 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -50 }}\n          className=\"fixed top-4 right-4 z-50\"\n        >\n          <div\n            className={cn(\n              'flex items-center space-x-3 px-4 py-3 rounded-lg border backdrop-blur-sm shadow-lg',\n              toastVariants[type]\n            )}\n          >\n            {getIcon(type)}\n            <span className=\"text-sm font-medium\">{message}</span>\n            <button\n              onClick={onClose}\n              className=\"ml-2 hover:opacity-70 transition-opacity\"\n            >\n              <X className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  )\n} ","import React, { createContext, useContext, useState, useCallback } from 'react'\nimport { NotificationToast, NotificationType } from '../components/NotificationToast'\n\ninterface NotificationContextType {\n  showNotification: (message: string, type: NotificationType) => void\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined)\n\nexport const useNotification = () => {\n  const context = useContext(NotificationContext)\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider')\n  }\n  return context\n}\n\ninterface NotificationProviderProps {\n  children: React.ReactNode\n}\n\nexport const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {\n  const [notification, setNotification] = useState<{\n    message: string\n    type: NotificationType\n    isVisible: boolean\n  }>({\n    message: '',\n    type: 'info',\n    isVisible: false\n  })\n\n  const showNotification = useCallback((message: string, type: NotificationType) => {\n    setNotification({\n      message,\n      type,\n      isVisible: true\n    })\n  }, [])\n\n  const hideNotification = useCallback(() => {\n    setNotification(prev => ({\n      ...prev,\n      isVisible: false\n    }))\n  }, [])\n\n  return (\n    <NotificationContext.Provider value={{ showNotification }}>\n      {children}\n      <NotificationToast\n        message={notification.message}\n        type={notification.type}\n        isVisible={notification.isVisible}\n        onClose={hideNotification}\n      />\n    </NotificationContext.Provider>\n  )\n} ","import { useState, useCallback, useEffect } from 'react'\nimport { Address } from 'viem'\nimport { useNotification } from '../contexts/NotificationContext'\nimport { ProfileData, ProfileMetadata, ProfileError } from '../types/user'\nimport { useWallet } from './useWallet'\nimport { useTribesSDK } from '../contexts/TribesContext'\nimport { SUPPORTED_CHAINS } from '../constants/networks'\nimport { useAccount } from 'wagmi'\nimport { useNetwork } from './useNetwork'\n\nexport interface ProfileHookResult {\n  // Profile data\n  profile: ProfileData | null\n  isLoading: boolean\n  error: string | null\n  \n  // Network info\n  currentChainId: number | undefined\n  isTargetNetwork: boolean\n  \n  // SDK state\n  isSdkInitialized: boolean\n  \n  // Actions\n  getProfileById: (profileId: number) => Promise<void>\n  getProfileByUsername: (username: string) => Promise<void>\n  createProfile: (username: string, metadata: string) => Promise<number>\n  updateProfileMetadata: (profileId: number, metadata: string) => Promise<void>\n  checkUsernameAvailability: (username: string) => Promise<boolean>\n  validateUsername: (username: string) => boolean\n  getProfileByAddress: (address: Address) => Promise<{ profile: ProfileData | null; error?: { code: string } }>\n  checkProfileOwnership: (address: Address) => Promise<ProfileData | null>\n  skipProfileCreation: () => Promise<boolean>\n  hasSkippedProfileCreation: (address: Address) => Promise<boolean>\n  findUsernameByAddress: (address: Address) => Promise<string | null>\n  updateProfileCache: (profile: ProfileData, chainId: number) => void\n  updateProfile: (tokenId: string, metadata: string) => Promise<void>\n  checkUsername: (username: string) => Promise<boolean>\n}\n\n// Helper function to check if a chain ID is supported\nconst isChainSupported = (chainId: number | undefined): boolean => {\n  if (!chainId) return false;\n  return SUPPORTED_CHAINS.some((chain) => chain.id === chainId);\n};\n\n// Add this after the existing imports\nconst DEBUG = true; // Toggle debugging\n\n// Debug function to track profile flow\nconst logDebug = (message: string, data?: any) => {\n  if (!DEBUG) return;\n  const timestamp = new Date().toISOString().split('T')[1].split('.')[0];\n  if (data) {\n    console.log(`[useProfile:${timestamp}] ${message}`, data);\n  } else {\n    console.log(`[useProfile:${timestamp}] ${message}`);\n  }\n};\n\n/**\n * Hook for interacting with user profiles\n */\nexport function useProfile(): ProfileHookResult {\n  const { sdk, isInitialized } = useTribesSDK();\n  const [isLoading, setIsLoading] = useState(false); // Changed to false by default\n  const [error, setError] = useState<string | null>(null);\n  const [profile, setProfile] = useState<ProfileData | null>(null);\n  const { address, chainId, isConnected, walletClient } = useWallet();\n  const { showNotification } = useNotification();\n  const { chainId: networkChainId } = useNetwork();\n\n  // Connect to wallet when available\n  useEffect(() => {\n    const connectSdk = async () => {\n      if (sdk && isConnected && walletClient && address) {\n        try {\n          logDebug('Connecting SDK to wallet', { address });\n          await sdk.connect(walletClient, address);\n        } catch (err) {\n          setError((err as Error).message);\n          logDebug('SDK wallet connection error', { error: (err as Error).message });\n        }\n      }\n    };\n\n    connectSdk();\n  }, [sdk, isConnected, walletClient, address]);\n\n  const getProfileById = useCallback(async (profileId: number) => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const profileData = await sdk.getProfileById(profileId);\n      setProfile(profileData);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to get profile';\n      setError(errorMessage);\n      console.error('Error getting profile:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk]);\n\n  const getProfileByUsername = useCallback(async (username: string) => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const profileData = await sdk.getProfileByUsername(username);\n      setProfile(profileData);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to get profile';\n      setError(errorMessage);\n      console.error('Error getting profile by username:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk]);\n\n  const createProfile = useCallback(async (username: string, metadata: string): Promise<number> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    // Check if wallet is connected and reconnect if necessary\n    if (!isConnected || !walletClient || !address) {\n      throw new Error('Wallet not connected. Please connect your wallet and try again.');\n    }\n\n    // Ensure SDK is connected to wallet - multiple attempts with delay\n    let connectionAttempts = 0;\n    const maxAttempts = 3;\n    \n    while (connectionAttempts < maxAttempts) {\n      try {\n        console.log(`[useProfile] Connecting SDK to wallet, attempt ${connectionAttempts + 1}/${maxAttempts}`);\n        await sdk.connect(walletClient, address);\n        \n        // Verify connection\n        if (sdk.isWalletConnected()) {\n          console.log('[useProfile] SDK successfully connected to wallet');\n          break;\n        } else {\n          console.warn('[useProfile] SDK connection verification failed, retrying...');\n        }\n      } catch (error) {\n        console.error(`[useProfile] SDK connection attempt ${connectionAttempts + 1} failed:`, error);\n        if (connectionAttempts === maxAttempts - 1) {\n          throw new Error('Failed to connect to wallet after multiple attempts. Please try again.');\n        }\n      }\n      \n      connectionAttempts++;\n      // Add increasing delay between attempts\n      await new Promise(resolve => setTimeout(resolve, 500 * connectionAttempts));\n    }\n\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const parsedMetadata = JSON.parse(metadata) as ProfileMetadata;\n      const profileId = await sdk.createProfile(username, parsedMetadata);\n      const profileData = await sdk.getProfileById(profileId);\n      setProfile(profileData);\n      return profileId;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create profile';\n      setError(errorMessage);\n      console.error('Error creating profile:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk, isConnected, walletClient, address]);\n\n  const updateProfileMetadata = useCallback(async (profileId: number, metadata: string): Promise<void> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const parsedMetadata = JSON.parse(metadata) as ProfileMetadata;\n      await sdk.updateProfileMetadata(profileId, parsedMetadata);\n      const profileData = await sdk.getProfileById(profileId);\n      setProfile(profileData);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update profile';\n      setError(errorMessage);\n      console.error('Error updating profile:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk]);\n\n  const checkUsernameAvailability = useCallback(async (username: string): Promise<boolean> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    try {\n      return await sdk.checkUsernameAvailability(username);\n    } catch (err) {\n      console.error('Error checking username availability:', err);\n      return false;\n    }\n  }, [sdk]);\n\n  const validateUsername = useCallback((username: string): boolean => {\n    // Usernames must be 3-20 characters and only contain letters, numbers, and underscores\n    const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;\n    return usernameRegex.test(username);\n  }, []);\n\n  const getProfileByAddress = useCallback(async (address: Address): Promise<{ profile: ProfileData | null; error?: { code: string } }> => {\n    if (!sdk || !isInitialized) {\n      logDebug('SDK not initialized');\n      return { profile: null, error: { code: 'SDK_NOT_INITIALIZED' } };\n    }\n\n    setIsLoading(true);\n    try {\n      logDebug('Getting profile for address', { address });\n      const profile = await sdk.getProfileByAddress(address);\n      if (!profile) {\n        logDebug('No profile found');\n        return { profile: null, error: { code: 'NO_PROFILE' } };\n      }\n      logDebug('Profile found', { profile });\n      setProfile(profile);\n      return { profile };\n    } catch (error) {\n      logDebug('Error getting profile', error);\n      return { profile: null, error: { code: 'UNKNOWN_ERROR' } };\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk, isInitialized]);\n\n  const checkProfileOwnership = useCallback(async (address: Address): Promise<ProfileData | null> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    try {\n      return await sdk.checkProfileOwnership(address);\n    } catch (err) {\n      console.error('Error checking profile ownership:', err);\n      return null;\n    }\n  }, [sdk]);\n\n  const skipProfileCreation = useCallback(async (): Promise<boolean> => {\n    if (!sdk || !address) {\n      return false;\n    }\n\n    try {\n      return await sdk.skipProfileCreation(address);\n    } catch (err) {\n      console.error('Error skipping profile creation:', err);\n      return false;\n    }\n  }, [sdk, address]);\n\n  const hasSkippedProfileCreation = useCallback(async (address: Address): Promise<boolean> => {\n    if (!sdk) {\n      return false;\n    }\n\n    try {\n      return await sdk.hasSkippedProfileCreation(address);\n    } catch (err) {\n      console.error('Error checking skipped profile creation:', err);\n      return false;\n    }\n  }, [sdk]);\n\n  const findUsernameByAddress = useCallback(async (address: Address): Promise<string | null> => {\n    if (!sdk) {\n      return null;\n    }\n\n    try {\n      return await sdk.findUsernameByAddress(address);\n    } catch (err) {\n      console.error('Error finding username by address:', err);\n      return null;\n    }\n  }, [sdk]);\n\n  const updateProfileCache = useCallback((profile: ProfileData, chainId: number) => {\n    try {\n      localStorage.setItem('tribes_auth_state', JSON.stringify({\n        address: profile.owner,\n        chainId,\n        profile,\n        timestamp: Date.now()\n      }));\n    } catch (err) {\n      console.error('Failed to update profile cache:', err);\n    }\n  }, []);\n\n  const updateProfile = useCallback(async (tokenId: string, metadata: string): Promise<void> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const parsedMetadata = JSON.parse(metadata) as ProfileMetadata;\n      await sdk.updateProfileMetadata(parseInt(tokenId), parsedMetadata);\n      const profileData = await sdk.getProfileById(parseInt(tokenId));\n      setProfile(profileData);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update profile';\n      setError(errorMessage);\n      console.error('Error updating profile:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk]);\n\n  const checkUsername = useCallback(async (username: string): Promise<boolean> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    try {\n      return await sdk.checkUsernameAvailability(username);\n    } catch (err) {\n      console.error('Error checking username:', err);\n      return false;\n    }\n  }, [sdk]);\n\n  return {\n    profile,\n    isLoading: isLoading || !isInitialized, // Include initialization state in loading\n    error,\n    currentChainId: networkChainId,\n    isTargetNetwork: isChainSupported(networkChainId),\n    isSdkInitialized: !!sdk && isInitialized,\n    getProfileById,\n    getProfileByUsername,\n    createProfile,\n    updateProfileMetadata,\n    checkUsernameAvailability,\n    validateUsername,\n    getProfileByAddress,\n    checkProfileOwnership,\n    skipProfileCreation,\n    hasSkippedProfileCreation,\n    findUsernameByAddress,\n    updateProfileCache,\n    updateProfile,\n    checkUsername\n  };\n} ","import { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ArrowLeft, ExternalLink, ChevronUp, ChevronDown, Loader } from 'lucide-react';\nimport { useProfile } from '../hooks/useProfile';\nimport { getWalletClient } from '../config/contracts';\nimport { useNetwork } from '../hooks/useNetwork';\nimport { FUSE_EMBER } from '../constants/networks';\n\nconst DEBUG = true;\nconst STORAGE_KEY = 'tribes_auth_state';\n\n// Debug function to track auth flow\nconst logDebug = (message: string, data?: any) => {\n  if (!DEBUG) return;\n  const timestamp = new Date().toISOString().split('T')[1].split('.')[0];\n  if (data) {\n    console.log(`[WalletConnect:${timestamp}] ${message}`, data);\n  } else {\n    console.log(`[WalletConnect:${timestamp}] ${message}`);\n  }\n};\n\n// Network configurations\nconst networks = [\n  {\n    name: 'Flash Testnet',\n    chainId: 1264453517,\n    rpcUrl: 'https://rpc.flash.fuse.io',\n    currencySymbol: 'FLASH',\n    blockExplorer: 'https://flashscan.monad.xyz',\n    iconUrl: '/flash-logo.png'\n  },\n  {\n    name: 'Monad Testnet',\n    chainId: 10143,\n    rpcUrl: 'https://monad-testnet.g.alchemy.com/v2/5OeRT0SHza89NcfCn83h1lQmRY8iGjsw',\n    currencySymbol: 'MONAD',\n    blockExplorer: 'https://explorer.monad.xyz/testnet',\n    iconUrl: '/monad-logo.png',\n  },\n  {\n    name: 'Chiliz Chain',\n    chainId: 88888,\n    blockExplorer: 'https://chiliscan.com',\n    rpcUrl: 'https://rpc.chiliz.com',\n    currencySymbol: 'CHZ'\n  },\n  {\n    name: 'Manta Pacific Sepolia Testnet',\n    chainId: 3441006,\n    blockExplorer: 'https://pacific-explorer.sepolia-testnet.manta.network',\n    rpcUrl: 'https://pacific-rpc.sepolia-testnet.manta.network/http',\n    currencySymbol: 'MANTA'\n  },\n  {\n    name: 'Arbitrum Sepolia Testnet',\n    chainId: 421614,\n    blockExplorer: 'https://sepolia.arbiscan.io',\n    rpcUrl: 'https://arbitrum-sepolia-rpc.publicnode.com',\n    currencySymbol: 'ETH'\n  },\n  {\n    name: 'Somnia Testnet',\n    chainId: 50312,\n    blockExplorer: 'https://shannon-explorer.somnia.network/',\n    rpcUrl: 'https://dream-rpc.somnia.network',\n    currencySymbol: 'STT'\n  },\n  // {\n  //   name: 'Abstract',\n  //   chainId: 2741,\n  //   blockExplorer: 'https://abscan.org/',\n  //   rpcUrl: 'https://api.mainnet.abs.xyz',\n  //   currencySymbol: 'ETH'\n  // },\n  {\n    name: 'Abstract Testnet',\n    chainId: 11124,\n    blockExplorer: 'https://sepolia.abscan.org/',\n    rpcUrl: 'https://api.testnet.abs.xyz',\n    currencySymbol: 'ETH'\n  }\n];\n\nconst wallets = [\n  {\n    id: 'metamask',\n    name: 'MetaMask',\n    icon: '🦊',\n    installed: true,\n    enabled: true\n  },\n  {\n    id: 'coinbase',\n    name: 'Coinbase Wallet',\n    icon: '🔵',\n    installed: false,\n    enabled: false\n  },\n  {\n    id: 'ledger',\n    name: 'Ledger',\n    icon: '📱',\n    installed: false,\n    enabled: false\n  },\n  {\n    id: 'rainbow',\n    name: 'Rainbow Wallet',\n    icon: '🌈',\n    installed: false,\n    enabled: false\n  }\n];\n\nexport const WalletConnect = () => {\n  const navigate = useNavigate();\n  const { getProfileByAddress } = useProfile();\n  const { chainId, switchNetwork } = useNetwork();\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectingWalletId, setConnectingWalletId] = useState<string | null>(null);\n  const [error, setError] = useState<string>();\n  const connectionAttempt = useRef(0);\n  const [showNetworks, setShowNetworks] = useState(true);\n  const [navigating, setNavigating] = useState(false);\n  \n  // Preload dashboard assets\n  useEffect(() => {\n    // Preload key components used in the dashboard\n    const preloadAssets = async () => {\n      try {\n        // Preload critical JS chunks\n        const preloadLinks = [\n          '/src/screens/Dashboard.tsx',\n          '/src/components/Layout.tsx',\n          '/src/components/BottomNav.tsx'\n        ];\n        \n        preloadLinks.forEach(link => {\n          const preloadLink = document.createElement('link');\n          preloadLink.rel = 'prefetch';\n          preloadLink.href = link;\n          document.head.appendChild(preloadLink);\n        });\n        \n        // Optionally preload images\n        const dashboardImages: any[] = [\n          // Add paths to critical dashboard images here\n        ];\n        \n        dashboardImages.forEach(src => {\n          const img = new Image();\n          img.src = src;\n        });\n      } catch (e) {\n        console.error('Error preloading assets:', e);\n      }\n    };\n    \n    preloadAssets();\n  }, []);\n  \n  // Clear localStorage on entry\n  useEffect(() => {\n    logDebug('WalletConnect component mounted - clearing redirect attempts');\n    // Reset navigation attempts in localStorage\n    try {\n      const data = localStorage.getItem('redirect_attempts');\n      if (data) {\n        const attempts = JSON.parse(data);\n        if (attempts['/connect'] && attempts['/connect'] > 5) {\n          logDebug('Too many redirect attempts detected, clearing auth state');\n          localStorage.removeItem(STORAGE_KEY);\n          localStorage.removeItem('tribes_auth');\n          localStorage.removeItem('tribes_profile');\n        }\n      }\n      localStorage.removeItem('redirect_attempts');\n    } catch (e) {\n      console.error('Error clearing redirect attempts:', e);\n    }\n  }, []);\n\n  // Function to add a network to MetaMask\n  const addNetwork = async (network: typeof networks[0]) => {\n    if (!window.ethereum) {\n      setError('MetaMask is not installed!');\n      return;\n    }\n\n    try {\n      logDebug(`Adding network: ${network.name}`);\n      await window.ethereum.request({\n        method: 'wallet_addEthereumChain',\n        params: [\n          {\n            chainId: `0x${network.chainId.toString(16)}`,\n            chainName: network.name,\n            nativeCurrency: {\n              name: network.currencySymbol,\n              symbol: network.currencySymbol,\n              decimals: 18\n            },\n            rpcUrls: [network.rpcUrl],\n            blockExplorerUrls: [network.blockExplorer]\n          }\n        ]\n      });\n      logDebug(`${network.name} network added to MetaMask`);\n    } catch (error) {\n      console.error(`Error adding ${network.name} network to MetaMask:`, error);\n      setError(`Failed to add ${network.name} network`);\n    }\n  };\n\n  // Function to switch to a network\n  const switchToNetwork = async (networkChainId: number) => {\n    if (!window.ethereum) {\n      setError('MetaMask is not installed!');\n      return;\n    }\n\n    try {\n      logDebug(`Switching to network with chainId: ${networkChainId}`);\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: `0x${networkChainId.toString(16)}` }]\n      });\n      logDebug(`Switched to network with chainId: ${networkChainId}`);\n    } catch (error: any) {\n      // This error code indicates that the chain has not been added to MetaMask\n      if (error.code === 4902) {\n        logDebug('Network not added to MetaMask, attempting to add it');\n        const network = networks.find(n => n.chainId === networkChainId);\n        if (network) {\n          await addNetwork(network);\n        }\n      } else {\n        console.error('Error switching network:', error);\n        setError('Failed to switch network');\n      }\n    }\n  };\n\n  // Navigate with transition\n  const navigateWithTransition = (path: string) => {\n    setNavigating(true);\n    \n    // Pre-cache data for dashboard if possible\n    try {\n      // Store any necessary data in localStorage for quick access\n      localStorage.setItem('dashboard_prefetch', 'true');\n    } catch (e) {\n      console.error('Error caching data:', e);\n    }\n    \n    // Short delay to ensure UI updates before navigation\n    setTimeout(() => {\n      navigate(path);\n    }, 100);\n  };\n\n  const connectWallet = async (walletId: string) => {\n    if (isConnecting) return;\n    if (walletId !== 'metamask') return; // Only allow MetaMask for now\n    \n    // Set connecting state\n    setIsConnecting(true);\n    setConnectingWalletId(walletId);\n    \n    // Increment connection attempt\n    connectionAttempt.current += 1;\n    logDebug(`Starting connection attempt ${connectionAttempt.current} with ${walletId}`);\n\n    try {\n      setError(undefined);\n\n      // Ensure we're on a supported chain first\n      if (!chainId) {\n        logDebug('No chain ID detected, switching network');\n        await switchNetwork(FUSE_EMBER.id);\n      }\n\n      logDebug('Getting wallet client');\n      const walletClient = await getWalletClient(chainId);\n      logDebug('Requesting addresses from wallet');\n      const [address] = await walletClient.requestAddresses();\n\n      if (!address) {\n        logDebug('No address returned from wallet');\n        throw new Error('No address returned from wallet');\n      }\n      \n      logDebug('Got address from wallet', { address });\n\n      // Check if user has a profile on the current chain\n      logDebug('Checking for profile');\n      const { profile, error: profileError } = await getProfileByAddress(address as `0x${string}`);\n      \n      if (profileError) {\n        logDebug('Profile check returned error', { code: profileError.code });\n      }\n      \n      if (profileError?.code === 'WRONG_CHAIN') {\n        logDebug('Wrong chain detected, switching network');\n        await switchNetwork(FUSE_EMBER.id);\n        throw new Error('Please connect to a supported network');\n      }\n\n      // Save auth state to localStorage to avoid redirect loops\n      if (address) {\n        logDebug('Saving address to localStorage');\n        localStorage.setItem(STORAGE_KEY, JSON.stringify({\n          address,\n          chainId: chainId || FUSE_EMBER.id,\n          timestamp: Date.now()\n        }));\n      }\n\n      if (profile) {\n        // If profile exists, go to dashboard\n        logDebug('Profile found, navigating to dashboard');\n        navigateWithTransition('/dashboard');\n        return;\n      }\n\n      if (profileError?.code === 'NO_PROFILE') {\n        // If no profile, go to create profile\n        logDebug('No profile found, navigating to create-profile');\n        navigateWithTransition('/create-profile');\n        return;\n      }\n\n      // If we get here, something went wrong\n      logDebug('Unknown profile check result');\n      setError('Failed to check profile status');\n    } catch (error) {\n      console.error('Failed to connect wallet:', error);\n      logDebug('Connection error', { error });\n      setError(error instanceof Error ? error.message : 'Failed to connect wallet');\n    } finally {\n      if (!navigating) {\n        setIsConnecting(false);\n        setConnectingWalletId(null);\n      }\n    }\n  };\n\n  // If navigating, show a full-screen loader\n  if (navigating) {\n    return (\n      <div className=\"fixed inset-0 bg-black flex flex-col items-center justify-center\">\n        <div className=\"animate-spin mb-4\">\n          <Loader size={48} className=\"text-monad-purple\" />\n        </div>\n        <h2 className=\"text-xl font-medium text-white\">Loading your dashboard...</h2>\n        <p className=\"text-gray-400 mt-2\">Please wait while we prepare your experience</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white p-6\">\n      <div className=\"flex items-center mb-8\">\n        <button className=\"p-2\" onClick={() => navigate('/')}>\n          <ArrowLeft className=\"w-6 h-6\" />\n        </button>\n        <div className=\"flex-1 flex justify-center space-x-2\">\n          <div className=\"w-12 h-2 bg-monad-purple rounded-full\" />\n          <div className=\"w-2 h-2 bg-white/20 rounded-full\" />\n          <div className=\"w-2 h-2 bg-white/20 rounded-full\" />\n          <div className=\"w-2 h-2 bg-white/20 rounded-full\" />\n        </div>\n      </div>\n\n      <h1 className=\"text-5xl font-bold mb-4\">Connect with wallet</h1>\n      <p className=\"text-gray-400 mb-8\">\n        We found the following options based on compatibility with Tribes.\n      </p>\n\n      {error && (\n        <div className=\"bg-red-900/30 border border-red-800 text-red-200 px-4 py-3 rounded mb-4\">\n          {error}\n        </div>\n      )}\n\n      <div className=\"space-y-3 mb-8\">\n        {wallets.map((wallet) => (\n          <button\n            key={wallet.id}\n            onClick={() => wallet.enabled && connectWallet(wallet.id)}\n            disabled={isConnecting || !wallet.enabled}\n            className={`w-full flex items-center p-4 rounded-xl transition-colors ${\n              wallet.enabled \n                ? 'bg-white/5 hover:bg-white/10 cursor-pointer' \n                : 'bg-white/5 opacity-60 cursor-not-allowed'\n            } ${isConnecting && connectingWalletId === wallet.id ? 'border border-monad-purple' : ''}`}\n          >\n            <span className=\"text-2xl mr-3\">{wallet.icon}</span>\n            <div className=\"flex-1 text-left\">\n              <div className=\"font-medium\">{wallet.name}</div>\n              <div className=\"text-sm text-gray-400\">\n                {isConnecting \n                  ? connectingWalletId === wallet.id \n                    ? 'Connecting...' \n                    : 'Waiting...'\n                  : wallet.enabled \n                    ? 'Connect now' \n                    : 'Coming soon'}\n              </div>\n            </div>\n          </button>\n        ))}\n      </div>\n\n      <div className=\"mb-8 bg-white/5 rounded-xl overflow-hidden\">\n        <button\n          onClick={() => setShowNetworks(!showNetworks)}\n          className=\"w-full py-3 px-4 flex items-center justify-between bg-white/10 hover:bg-white/15 transition-colors\"\n        >\n          <span className=\"text-lg font-medium\">Available Networks</span>\n          {showNetworks ? \n            <ChevronUp className=\"w-5 h-5 text-gray-400\" /> : \n            <ChevronDown className=\"w-5 h-5 text-gray-400\" />\n          }\n        </button>\n        \n        {showNetworks && (\n          <div className=\"p-4 space-y-4\">\n            <p className=\"text-gray-400 text-sm\">\n              Select or add one of these networks to your wallet to use with Tribes:\n            </p>\n            <div className=\"grid gap-3\">\n              {networks.map((network) => (\n                <div key={network.chainId} className=\"border border-white/10 rounded-lg p-4 hover:bg-white/5 transition-colors\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-purple-500 to-blue-600 flex items-center justify-center text-white font-bold\">\n                        <span>{network.currencySymbol.charAt(0)}</span>\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium text-white\">{network.name}</h3>\n                        <div className=\"flex items-center text-sm text-gray-400 mt-1\">\n                          <span>Chain ID: {network.chainId}</span>\n                          <span className=\"mx-2\">•</span>\n                          <a \n                            href={network.blockExplorer}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"text-monad-purple hover:underline inline-flex items-center\"\n                            onClick={(e) => e.stopPropagation()}\n                          >\n                            Explorer <ExternalLink className=\"w-3 h-3 ml-1\" />\n                          </a>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          switchToNetwork(network.chainId);\n                        }}\n                        className=\"py-2 px-4 bg-monad-purple text-white text-sm rounded-lg hover:bg-monad-purple/80 transition-colors\"\n                      >\n                        Switch\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          addNetwork(network);\n                        }}\n                        className=\"py-2 px-4 bg-white/10 text-white text-sm rounded-lg hover:bg-white/20 transition-colors\"\n                      >\n                        Add\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      <p className=\"text-center text-sm text-gray-400 mt-8\">\n        Don't have a wallet?{' '}\n        <a \n          href=\"https://metamask.io/download/\" \n          target=\"_blank\" \n          rel=\"noopener noreferrer\"\n          className=\"text-monad-purple hover:underline inline-flex items-center\"\n        >\n          Get MetaMask <ExternalLink className=\"w-3 h-3 ml-1\" />\n        </a>\n      </p>\n    </div>\n  );\n};","import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useProfile } from '../../hooks/useProfile';\nimport { useNotification } from '../../contexts/NotificationContext';\nimport { getWalletClient, getContracts } from '../../config/contracts';\nimport { Profile } from '../../types/contracts';\nimport { useWalletClient } from 'wagmi';\nimport { useNetwork } from '../../hooks/useNetwork';\nimport { MONAD_TESTNET, FUSE_EMBER, SUPPORTED_CHAINS } from '../../constants/networks';\nimport { useWallet } from '../../hooks/useWallet';\nimport { useTribesSDK } from '../../contexts/TribesContext';\n\n// Username validation constants\nconst USERNAME_CONSTRAINTS = {\n  MIN_LENGTH: 3,\n  MAX_LENGTH: 32,\n  ALLOWED_CHARS: /^[a-zA-Z0-9_-]+$/\n};\n\ninterface ProfileFormProps {\n  mode: 'create' | 'edit';\n  existingProfile?: Profile | null;\n  onSuccess?: () => void;\n  onCancel?: () => void;\n  className?: string;\n}\n\nexport function ProfileForm({ mode, existingProfile, onSuccess, onCancel, className = '' }: ProfileFormProps) {\n  const navigate = useNavigate();\n  const { \n    createProfile, \n    updateProfileMetadata, \n    checkUsernameAvailability,\n    validateUsername,\n    currentChainId,\n    isTargetNetwork\n  } = useProfile();\n  const { showNotification } = useNotification();\n  const { data: wagmiWalletClient, isLoading: isWalletLoading } = useWalletClient();\n  const { chainId, switchNetwork } = useNetwork();\n  const { isConnected, address, walletClient } = useWallet();\n  const { sdk } = useTribesSDK();\n  \n  const [username, setUsername] = useState(existingProfile?.username || '');\n  const [bio, setBio] = useState('');\n  const [avatar, setAvatar] = useState('');\n  const [location, setLocation] = useState('');\n  const [website, setWebsite] = useState('');\n  const [twitter, setTwitter] = useState('');\n  const [instagram, setInstagram] = useState('');\n  const [discord, setDiscord] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isUsernameAvailable, setIsUsernameAvailable] = useState(true);\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [hasCheckedProfile, setHasCheckedProfile] = useState(false);\n  \n  // Move useRef to top level of component\n  const checkedUsernamesRef = useRef<Map<string, boolean>>(new Map());\n\n  // Debounced username check with caching\n  useEffect(() => {\n    // Skip check if in edit mode or username is too short\n    if (mode === 'edit' || username.length < USERNAME_CONSTRAINTS.MIN_LENGTH) {\n      return;\n    }\n\n    // Store the current username to compare in the cleanup function\n    const currentUsername = username;\n    const currentChainId = chainId;\n    const cacheKey = `${username}-${currentChainId}`;\n    \n    // Create a flag to handle component unmount\n    let isMounted = true;\n    \n    // Check if we already have a cached result for this username\n    if (checkedUsernamesRef.current.has(cacheKey)) {\n      const cachedResult = checkedUsernamesRef.current.get(cacheKey);\n      console.log(`[ProfileForm] Using cached result for ${username} on chain ${currentChainId}: ${cachedResult}`);\n      setIsUsernameAvailable(cachedResult || false);\n      return;\n    }\n    \n    console.log(`[ProfileForm] Setting up debounce check for ${username} on chain ${currentChainId}`);\n    const timer = setTimeout(async () => {\n      if (!isMounted) {\n        console.log(`[ProfileForm] Component unmounted, skipping check for ${currentUsername}`);\n        return;\n      }\n      \n      setIsCheckingUsername(true);\n      try {\n        console.log(`[ProfileForm] Checking availability for ${currentUsername} on chain ${currentChainId}`);\n        const available = await checkUsernameAvailability(username);\n        \n        // Cache this result with chain-aware key\n        checkedUsernamesRef.current.set(cacheKey, available);\n        \n        // Only update state if component is still mounted AND we're still checking the same username\n        if (isMounted && currentUsername === username) {\n          console.log(`[ProfileForm] Username ${currentUsername} availability on chain ${currentChainId}: ${available}`);\n          setIsUsernameAvailable(available);\n        }\n      } catch (err) {\n        console.error('Error checking username:', err);\n        if (isMounted && currentUsername === username) {\n          setIsUsernameAvailable(false);\n        }\n      } finally {\n        if (isMounted && currentUsername === username) {\n          setIsCheckingUsername(false);\n        }\n      }\n    }, 1000); // Increase to 1000ms to further reduce API calls\n\n    return () => {\n      console.log(`[ProfileForm] Cleanup for username check: ${currentUsername} on chain ${currentChainId}`);\n      isMounted = false;\n      clearTimeout(timer);\n    };\n  }, [username, mode, checkUsernameAvailability, chainId]);\n\n  // Load existing profile data\n  useEffect(() => {\n    if (existingProfile) {\n      setUsername(existingProfile.username);\n      try {\n        const metadata = JSON.parse(existingProfile.metadata);\n        setBio(metadata.bio || '');\n        setAvatar(metadata.avatar || '');\n      } catch (err) {\n        console.error('Failed to parse profile metadata:', err);\n      }\n    }\n  }, [existingProfile]);\n\n  // Basic check for existing profile using local storage\n  useEffect(() => {\n    const checkExistingProfile = async () => {\n      console.log('[ProfileForm] Starting checkExistingProfile, mode:', mode, 'hasCheckedProfile:', hasCheckedProfile);\n      \n      // Skip if not on create mode or already checked\n      if (mode !== 'create' || hasCheckedProfile) {\n        console.log('[ProfileForm] Skipping profile check - not in create mode or already checked');\n        return;\n      }\n      \n      // Check if we have the on_profile_setup_page flag set\n      const onSetupPage = localStorage.getItem('on_profile_setup_page') === 'true';\n      \n      // Prevent checking profile while on any profile creation page\n      if (onSetupPage || \n          window.location.pathname.includes('username-setup') || \n          window.location.pathname.includes('create-profile')) {\n        console.log('[ProfileForm] On profile creation page, marking as checked without navigation');\n        setHasCheckedProfile(true);\n        return;\n      }\n      \n      try {\n        console.log('[ProfileForm] Beginning wallet check');\n        setIsCheckingUsername(true);\n        \n        let address;\n        if (wagmiWalletClient) {\n          const addresses = await wagmiWalletClient.getAddresses();\n          address = addresses[0];\n          console.log('[ProfileForm] Got address from wagmiWalletClient:', address);\n        } else {\n          try {\n            const walletClient = await getWalletClient();\n            const addresses = await walletClient.getAddresses();\n            address = addresses[0];\n            console.log('[ProfileForm] Got address from getWalletClient:', address);\n          } catch (err) {\n            console.error('[ProfileForm] Unable to get wallet client:', err);\n          }\n        }\n        \n        // Check if there's profile data in local storage\n        if (address) {\n          console.log('[ProfileForm] Checking stored profile data for address:', address);\n          const storedData = localStorage.getItem('tribes_auth_state');\n          if (storedData) {\n            console.log('[ProfileForm] Found tribes_auth_state in localStorage');\n            const data = JSON.parse(storedData);\n            // NEVER navigate when on the profile creation pages\n            const onProfileCreationPage = \n              window.location.pathname.includes('username-setup') || \n              window.location.pathname.includes('create-profile');\n            \n            console.log('[ProfileForm] Profile check data:', {\n              hasProfile: !!data.profile,\n              addressMatch: data.address === address,\n              onProfileCreationPage,\n              currentPath: window.location.pathname\n            });\n            \n            if (data.profile && data.address === address && !onProfileCreationPage) {\n              console.log('[ProfileForm] Found existing profile, navigating to dashboard');\n              navigate('/dashboard');\n              return;\n            } else {\n              console.log('[ProfileForm] Not navigating - either no profile, address mismatch, or on profile creation page');\n            }\n          } else {\n            console.log('[ProfileForm] No tribes_auth_state found in localStorage');\n          }\n        }\n      } catch (err) {\n        console.error('[ProfileForm] Error checking existing profile:', err);\n      } finally {\n        setIsCheckingUsername(false);\n        setHasCheckedProfile(true);\n        console.log('[ProfileForm] Profile check completed');\n      }\n    };\n\n    // Only check once on initial render, not on every render\n    if (!hasCheckedProfile) {\n      console.log('[ProfileForm] Triggering profile check');\n      checkExistingProfile();\n    }\n  }, [mode, navigate, hasCheckedProfile, wagmiWalletClient]);\n\n  // Add a direct profile creation function at the top of the component\n  const createProfileDirectly = async (username: string, metadataStr: string) => {\n    \n    // Find the proper chain object from SUPPORTED_CHAINS\n    const currentChain = chainId \n      ? SUPPORTED_CHAINS.find(chain => chain.id === chainId) || MONAD_TESTNET\n      : MONAD_TESTNET;\n      \n    console.log('[ProfileForm] Using chain:', { chainId: currentChain.id, chainName: currentChain.name });\n    \n    if (!walletClient || !address) {\n      // Try fallback to wagmi wallet client if available\n      if (wagmiWalletClient && address) {\n        console.log('[ProfileForm] Using fallback wagmiWalletClient since direct walletClient is unavailable');\n        \n        try {\n          // Continue with wagmiWalletClient\n          const { profileNFTMinter } = getContracts(currentChain.id);\n          \n          console.log('[ProfileForm] Using contracts with wagmiWalletClient:', { \n            profileNFTMinter: profileNFTMinter.address,\n            chainId: currentChain.id, \n            address\n          });\n          \n          // Send transaction using wagmi wallet client with the appropriate chain\n          const hash = await wagmiWalletClient.writeContract({\n            chain: currentChain,\n            address: profileNFTMinter.address,\n            abi: profileNFTMinter.abi,\n            functionName: 'createProfile',\n            args: [username, metadataStr],\n            account: address\n          });\n          \n          console.log(`[ProfileForm] Transaction submitted with wagmiWalletClient: ${hash}`);\n          return hash;\n        } catch (error) {\n          const wagmiError = error as Error;\n          console.error('[ProfileForm] Fallback to wagmiWalletClient also failed:', wagmiError);\n          throw new Error(`Failed with wagmiWalletClient: ${wagmiError.message}`);\n        }\n      }\n      \n      throw new Error('Wallet not connected: ' + (!walletClient ? 'Missing walletClient' : 'Missing address'));\n    }\n    \n    console.log('[ProfileForm] Creating profile directly with wallet client');\n    \n    try {\n      // Get contract addresses from config using the current chain's ID\n      const { profileNFTMinter } = getContracts(currentChain.id);\n      \n      console.log('[ProfileForm] Using contracts:', { \n        profileNFTMinter: profileNFTMinter.address,\n        chainId: currentChain.id, \n        walletClient,\n        account: address\n      });\n      \n      // Send transaction directly using the wallet client with the appropriate chain\n      const hash = await walletClient.writeContract({\n        chain: currentChain,\n        address: profileNFTMinter.address,\n        abi: profileNFTMinter.abi,\n        functionName: 'createProfile',\n        args: [username, metadataStr],\n        account: address\n      });\n      \n      console.log(`[ProfileForm] Transaction submitted: ${hash}`);\n      return hash;\n    } catch (error) {\n      console.error('[ProfileForm] Error sending transaction directly:', error);\n      throw error;\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    console.log('[ProfileForm] Form submission attempted');\n    \n    // Validate form\n    if (!username && mode === 'create') {\n      showNotification('Username is required', 'error');\n      return;\n    }\n\n    if (mode === 'create') {\n      if (!validateUsername(username)) {\n        showNotification('Invalid username format', 'error');\n        return;\n      }\n\n      if (!isUsernameAvailable) {\n        showNotification('Username is not available', 'error');\n        return;\n      }\n    }\n\n    // Check wallet connection\n    if (!isConnected) {\n      showNotification('Please connect your wallet to create a profile', 'error');\n      return;\n    }\n\n    if (!isTargetNetwork) {\n      showNotification('Please switch to the correct network', 'error');\n      return;\n    }\n\n    console.log('[ProfileForm] Starting profile creation/update...');\n    setIsLoading(true);\n    \n    try {\n      // Prepare metadata for both create and edit modes\n      const metadata = JSON.stringify({\n        avatar: avatar,\n        bio: bio,\n        location: location,\n        website: website,\n        social: {\n          twitter: twitter,\n          instagram: instagram,\n          discord: discord\n        }\n      });\n      \n      // Create or update profile\n      if (mode === 'edit' && existingProfile) {\n        // For edit mode, still use the SDK update function\n        try {\n          // Convert tokenId to number if it's a string or bigint\n          const tokenId = typeof existingProfile.tokenId === 'string' \n            ? parseInt(existingProfile.tokenId) \n            : typeof existingProfile.tokenId === 'bigint'\n              ? Number(existingProfile.tokenId)\n              : existingProfile.tokenId || 0;\n              \n          console.log(`[ProfileForm] Updating profile ${tokenId}`);\n          \n          await updateProfileMetadata(tokenId, metadata);\n          showNotification('Profile updated successfully!', 'success');\n        } catch (error) {\n          const err = error as Error;\n          console.error('[ProfileForm] Error updating profile:', err);\n          showNotification(`Update failed: ${err.message}`, 'error');\n          setIsLoading(false);\n          return;\n        }\n      } else {\n        // For create mode, use our direct approach ONLY\n        try {\n          console.log('[ProfileForm] Attempting direct profile creation');\n          \n          // Send transaction directly - NEVER try to use the SDK for creation\n          const hash = await createProfileDirectly(username, metadata);\n          showNotification('Profile creation transaction submitted!', 'success');\n        } catch (error) {\n          const err = error as Error;\n          console.error('[ProfileForm] Direct profile creation failed:', err);\n          showNotification(`Error: ${err.message}`, 'error');\n          setIsLoading(false);\n          return;\n        }\n      }\n      \n      // Handle success\n      if (onSuccess) {\n        onSuccess();\n      } else {\n        navigate('/dashboard');\n      }\n    } catch (err) {\n      // This block catches any other errors that might occur\n      const error = err as Error;\n      console.error('[ProfileForm] Unexpected error during form submission:', error);\n      showNotification(`Unexpected error: ${error.message}`, 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Add network switch handler - moved the hook call to the top level\n  const handleSwitchNetwork = async () => {\n    try {\n      await switchNetwork(MONAD_TESTNET.id);\n      showNotification('Switching to Monad Devnet...', 'info');\n    } catch (err) {\n      console.error('[ProfileForm] Network switch error:', err);\n      showNotification('Failed to switch network', 'error');\n    }\n  };\n\n  // If wallet is loading, show loading indicator\n  if (isWalletLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-theme-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      <h1 className=\"text-3xl font-bold mb-2\">\n        {mode === 'edit' ? 'Edit Profile' : 'Create Your Profile'}\n      </h1>\n      <p className=\"text-gray-400 mb-8\">\n        {mode === 'edit' \n          ? 'Update your profile information.'\n          : 'Choose a unique username and fill in your profile details.'}\n      </p>\n\n      {/* Network warning */}\n      {!isTargetNetwork && (\n        <div className=\"mb-6 p-4 bg-red-500/10 border border-red-500 rounded-lg\">\n          <h3 className=\"text-lg font-medium text-red-500 mb-2\">Wrong Network</h3>\n          <p className=\"text-gray-300 mb-3\">\n            You need to be on the Monad Devnet to create or update your profile.\n            {currentChainId && (\n              <span className=\"block mt-1\">\n                Current network: Chain ID {currentChainId} / Required: Chain ID {MONAD_TESTNET.id}\n              </span>\n            )}\n          </p>\n          <button\n            onClick={handleSwitchNetwork}\n            className=\"py-2 px-4 bg-red-500 text-white rounded-lg font-medium transition-colors hover:bg-red-600\"\n          >\n            Switch to Monad Devnet\n          </button>\n        </div>\n      )}\n\n      <form className=\"space-y-6\" onSubmit={handleSubmit}>\n        {/* Username Input */}\n        <div>\n          <label htmlFor=\"username\" className=\"block text-sm font-medium text-gray-300\">\n            Username {mode === 'create' && '*'}\n          </label>\n          <div className=\"mt-1 relative\">\n            <input\n              id=\"username\"\n              name=\"username\"\n              type=\"text\"\n              required={mode === 'create'}\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              disabled={mode === 'edit'}\n              className={`appearance-none block w-full px-3 py-2 bg-black/50 border ${\n                !isUsernameAvailable ? 'border-red-500' : \n                isCheckingUsername ? 'border-yellow-500' : \n                isUsernameAvailable && username.length >= USERNAME_CONSTRAINTS.MIN_LENGTH ? 'border-green-500' : \n                'border-white/10'\n              } rounded-lg focus:outline-none focus:ring-2 focus:ring-theme-primary focus:border-transparent ${\n                mode === 'edit' ? 'opacity-50 cursor-not-allowed' : ''\n              }`}\n              placeholder=\"Enter username\"\n            />\n            \n            {/* Inline status indicators */}\n            <div className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n              {isCheckingUsername && (\n                <div className=\"text-yellow-400 animate-spin h-5 w-5\">⟳</div>\n              )}\n              \n              {!isCheckingUsername && mode === 'create' && username.length >= USERNAME_CONSTRAINTS.MIN_LENGTH && isUsernameAvailable && (\n                <div className=\"text-green-500 text-xl\">✓</div>\n              )}\n              \n              {!isCheckingUsername && mode === 'create' && username.length >= USERNAME_CONSTRAINTS.MIN_LENGTH && !isUsernameAvailable && (\n                <div className=\"text-red-500 text-xl\">✗</div>\n              )}\n            </div>\n          </div>\n          \n          {/* Username validation messages */}\n          {mode === 'create' && username.length > 0 && username.length < USERNAME_CONSTRAINTS.MIN_LENGTH && (\n            <p className=\"mt-1 text-sm text-yellow-500\">Username must be at least {USERNAME_CONSTRAINTS.MIN_LENGTH} characters</p>\n          )}\n          \n          {mode === 'create' && username.length >= USERNAME_CONSTRAINTS.MIN_LENGTH && !isUsernameAvailable && (\n            <p className=\"mt-1 text-sm text-red-500\">Username is not available</p>\n          )}\n          \n          {mode === 'create' && username.length >= USERNAME_CONSTRAINTS.MIN_LENGTH && isUsernameAvailable && !isCheckingUsername && (\n            <p className=\"mt-1 text-sm text-green-500\">Username is available</p>\n          )}\n        </div>\n\n        {/* Avatar URL */}\n        <div>\n          <label htmlFor=\"avatar\" className=\"block text-sm font-medium text-gray-300\">\n            Avatar URL (optional)\n          </label>\n          <div className=\"mt-1\">\n            <input\n              id=\"avatar\"\n              name=\"avatar\"\n              type=\"text\"\n              value={avatar}\n              onChange={(e) => setAvatar(e.target.value)}\n              className=\"appearance-none block w-full px-3 py-2 bg-black/50 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-theme-primary focus:border-transparent\"\n              placeholder=\"Enter avatar URL\"\n            />\n          </div>\n        </div>\n\n        {/* Bio Input */}\n        <div>\n          <label htmlFor=\"bio\" className=\"block text-sm font-medium text-gray-300\">\n            Bio (optional)\n          </label>\n          <div className=\"mt-1\">\n            <textarea\n              id=\"bio\"\n              name=\"bio\"\n              rows={3}\n              value={bio}\n              onChange={(e) => setBio(e.target.value)}\n              className=\"appearance-none block w-full px-3 py-2 bg-black/50 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-theme-primary focus:border-transparent resize-none\"\n              placeholder=\"Tell us about yourself\"\n            />\n          </div>\n        </div>\n\n        {/* Submit buttons */}\n        <div className=\"flex space-x-4\">\n          {onCancel && (\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              disabled={isLoading}\n              className=\"flex-1 py-2 px-4 bg-white/5 text-white rounded-lg font-medium hover:bg-white/10 transition-colors border border-white/10 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              Cancel\n            </button>\n          )}\n          <button\n            type=\"submit\"\n            disabled={\n              isLoading || \n              isCheckingUsername || \n              (mode === 'create' && (\n                !username || \n                username.length < USERNAME_CONSTRAINTS.MIN_LENGTH || \n                !isUsernameAvailable\n              ))\n            }\n            className=\"flex-1 py-2 px-4 bg-theme-primary text-black rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed relative\"\n          >\n            {/* Show spinner inside button when loading */}\n            {isLoading && (\n              <span className=\"absolute inset-0 flex items-center justify-center bg-theme-primary rounded-lg\">\n                <div className=\"animate-spin h-5 w-5 border-2 border-black border-t-transparent rounded-full\"></div>\n              </span>\n            )}\n            {isLoading \n              ? (mode === 'edit' ? 'Saving...' : 'Creating...') \n              : (mode === 'edit' ? 'Save Changes' : 'Create Profile')}\n          </button>\n        </div>\n\n        <p className=\"mt-4 text-sm text-center text-gray-400\">\n          {mode === 'edit'\n            ? 'This action requires a small gas fee to update your profile'\n            : 'This action requires a small gas fee to mint your profile NFT'}\n        </p>\n      </form>\n    </div>\n  );\n} ","import React, { useEffect } from 'react';\nimport { ProfileForm } from '../components/profile/ProfileForm';\nimport { Navigation } from '../components/Navigation';\n\nexport function UsernameAvatarSetup() {\n  // Add protection to prevent unwanted navigation cycles\n  useEffect(() => {\n    console.log('[UsernameAvatarSetup] Component mounted');\n    // Mark that we're on this page, so profile checks won't navigate away\n    window.localStorage.setItem('on_profile_setup_page', 'true');\n    \n    return () => {\n      console.log('[UsernameAvatarSetup] Component unmounting');\n      window.localStorage.removeItem('on_profile_setup_page');\n    };\n  }, []);\n  \n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-900 to-black text-white\">\n      <Navigation onMenuClick={() => {}} />\n      \n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        <div className=\"bg-white/[0.02] backdrop-blur-xl rounded-2xl border border-white/10 p-8\">\n          <ProfileForm mode=\"create\" />\n        </div>\n      </div>\n    </div>\n  );\n} ","export interface ContractAddresses {\n  tribes: string;\n}\n\n// Define chain constants for clarity\nconst CHAIN_IDS = {\n  ETHEREUM_MAINNET: 1,\n  GOERLI: 5,\n  MONAD_TESTNET: 20143,\n  FUSE_EMBER: 1264453517\n};\n\n// Define fallback addresses to use when a specific chain isn't supported\nconst FALLBACK_ADDRESSES: ContractAddresses = {\n  tribes: '0x54812005171F747f5E69afA08989F41Cf06eeE48' // Using Fuse tribes address as default\n};\n\nexport function getContractAddresses(chainId: number): ContractAddresses {\n  console.log(`Getting contract addresses for chain ID: ${chainId}`);\n  \n  switch (chainId) {\n    case CHAIN_IDS.ETHEREUM_MAINNET: // Ethereum Mainnet\n      return {\n        tribes: '0x1234567890123456789012345678901234567890' // Replace with actual mainnet address\n      };\n    case CHAIN_IDS.GOERLI: // Goerli\n      return {\n        tribes: '0x1234567890123456789012345678901234567890' // Replace with actual testnet address\n      };\n    case CHAIN_IDS.MONAD_TESTNET: // Monad Devnet\n      return {\n        tribes: '0x16C4F870B59E55bB80A620547987Bd9302FC567d'\n      };\n    case CHAIN_IDS.FUSE_EMBER: // Fuse Ember Testnet\n      return {\n        tribes: '0x54812005171F747f5E69afA08989F41Cf06eeE48'\n      };\n    default:\n      console.warn(`Using fallback addresses for unsupported chain ID: ${chainId}`);\n      return FALLBACK_ADDRESSES;\n  }\n} ","export const TribesABI = [\n  // Post functions\n  {\n    inputs: [{ name: \"postId\", type: \"uint256\" }],\n    name: \"getPost\",\n    outputs: [\n      { name: \"id\", type: \"uint256\" },\n      { name: \"creator\", type: \"address\" },\n      { name: \"tribeId\", type: \"uint256\" },\n      { name: \"type\", type: \"string\" },\n      { name: \"content\", type: \"string\" },\n      { name: \"title\", type: \"string\" },\n      { name: \"description\", type: \"string\" },\n      { name: \"tags\", type: \"string[]\" },\n      { name: \"images\", type: \"string[]\" },\n      { name: \"videos\", type: \"string[]\" },\n      { name: \"timestamp\", type: \"uint256\" },\n      { name: \"likes\", type: \"uint256\" },\n      { name: \"comments\", type: \"uint256\" },\n      { name: \"shares\", type: \"uint256\" },\n      { name: \"views\", type: \"uint256\" },\n      { name: \"engagement\", type: \"uint256\" }\n    ],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ name: \"tribeId\", type: \"uint256\" }],\n    name: \"getPostsByTribe\",\n    outputs: [\n      {\n        components: [\n          { name: \"id\", type: \"uint256\" },\n          { name: \"creator\", type: \"address\" },\n          { name: \"tribeId\", type: \"uint256\" },\n          { name: \"type\", type: \"string\" },\n          { name: \"content\", type: \"string\" },\n          { name: \"title\", type: \"string\" },\n          { name: \"description\", type: \"string\" },\n          { name: \"tags\", type: \"string[]\" },\n          { name: \"images\", type: \"string[]\" },\n          { name: \"videos\", type: \"string[]\" },\n          { name: \"timestamp\", type: \"uint256\" },\n          { name: \"likes\", type: \"uint256\" },\n          { name: \"comments\", type: \"uint256\" },\n          { name: \"shares\", type: \"uint256\" },\n          { name: \"views\", type: \"uint256\" },\n          { name: \"engagement\", type: \"uint256\" }\n        ],\n        name: \"\",\n        type: \"tuple[]\"\n      }\n    ],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ name: \"userId\", type: \"address\" }],\n    name: \"getUserPosts\",\n    outputs: [\n      {\n        components: [\n          { name: \"id\", type: \"uint256\" },\n          { name: \"creator\", type: \"address\" },\n          { name: \"tribeId\", type: \"uint256\" },\n          { name: \"type\", type: \"string\" },\n          { name: \"content\", type: \"string\" },\n          { name: \"title\", type: \"string\" },\n          { name: \"description\", type: \"string\" },\n          { name: \"tags\", type: \"string[]\" },\n          { name: \"images\", type: \"string[]\" },\n          { name: \"videos\", type: \"string[]\" },\n          { name: \"timestamp\", type: \"uint256\" },\n          { name: \"likes\", type: \"uint256\" },\n          { name: \"comments\", type: \"uint256\" },\n          { name: \"shares\", type: \"uint256\" },\n          { name: \"views\", type: \"uint256\" },\n          { name: \"engagement\", type: \"uint256\" }\n        ],\n        name: \"\",\n        type: \"tuple[]\"\n      }\n    ],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { name: \"tribeId\", type: \"uint256\" },\n      { name: \"metadata\", type: \"string\" }\n    ],\n    name: \"createPost\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { name: \"postId\", type: \"uint256\" },\n      { name: \"metadata\", type: \"string\" }\n    ],\n    name: \"updatePost\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ name: \"postId\", type: \"uint256\" }],\n    name: \"deletePost\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ name: \"postId\", type: \"uint256\" }],\n    name: \"likePost\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { name: \"postId\", type: \"uint256\" },\n      { name: \"content\", type: \"string\" }\n    ],\n    name: \"commentPost\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ name: \"postId\", type: \"uint256\" }],\n    name: \"sharePost\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"getLastPostId\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n]; ","import { PrismaClient, Post as DBPost, PostInteraction, IndexerState, BlockEvent, Prisma } from '@prisma/client';\nimport { Post, PostType } from '../types/post';\nimport { User } from '../types/user';\nimport { Tribe } from '../types/tribe';\nimport { JsonValue } from '@prisma/client/runtime/library';\n\n// Check if running in browser or server\nconst isBrowser = typeof window !== 'undefined';\n\n// Helper types for mocking in browser\ntype MockDBPost = any;\ntype MockPostInteraction = any;\n\ninterface CreatePostInput {\n  id: string;\n  authorId: string;\n  content: string;\n  type: string;\n  tribeId: string;\n  metadata?: Prisma.InputJsonValue;\n  blockchainId?: number;\n  blockchainTxHash?: string;\n  isConfirmed?: boolean;\n}\n\nexport class DBService {\n  private prisma: PrismaClient | null = null;\n  private static instance: DBService;\n  private isServer: boolean;\n\n  private constructor() {\n    this.isServer = !isBrowser;\n    if (!this.isServer) {\n      // In browser, don't initialize Prisma\n      console.log('Running in browser environment - database operations will be mocked');\n    } else {\n      // Only initialize Prisma on the server\n      try {\n        this.prisma = new PrismaClient();\n      } catch (err) {\n        console.error('Failed to initialize PrismaClient:', err);\n      }\n    }\n  }\n\n  public static getInstance(): DBService {\n    if (!DBService.instance) {\n      DBService.instance = new DBService();\n    }\n    return DBService.instance;\n  }\n\n  // Make sure we're not using Prisma in the browser\n  private ensurePrisma(): PrismaClient {\n    if (!this.prisma) {\n      if (this.isServer) {\n        throw new Error('PrismaClient not initialized');\n      } else {\n        throw new Error('Database operations not available in browser');\n      }\n    }\n    return this.prisma;\n  }\n\n  async createPost(post: CreatePostInput): Promise<DBPost | MockDBPost> {\n    if (!this.isServer) {\n      return { ...post };\n    }\n    \n    return this.ensurePrisma().post.create({\n      data: {\n        id: post.id,\n        authorId: post.authorId,\n        content: post.content,\n        type: post.type,\n        tribeId: post.tribeId,\n        metadata: post.metadata || {},\n        blockchainId: post.blockchainId,\n        blockchainTxHash: post.blockchainTxHash,\n        isConfirmed: post.isConfirmed || false,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n    });\n  }\n\n  async getPost(id: string): Promise<DBPost | MockDBPost | null> {\n    if (!this.isServer) {\n      return null;\n    }\n    \n    return this.ensurePrisma().post.findUnique({\n      where: { id }\n    });\n  }\n\n  async getPostByBlockchainId(blockchainId: number): Promise<DBPost | MockDBPost | null> {\n    if (!this.isServer) {\n      // In browser, return null to fall back to blockchain\n      return null;\n    }\n    \n    return this.ensurePrisma().post.findUnique({\n      where: { blockchainId },\n    });\n  }\n\n  async getPostsByTribe(tribeId: string, limit = 20, offset = 0): Promise<DBPost[] | MockDBPost[]> {\n    if (!this.isServer) {\n      return [];\n    }\n    \n    return this.ensurePrisma().post.findMany({\n      where: { \n        tribeId,\n        updatedAt: { not: undefined }\n      },\n      orderBy: { createdAt: 'desc' },\n      take: limit,\n      skip: offset,\n    });\n  }\n\n  async getUserFeed(userId: string, limit = 20, offset = 0): Promise<DBPost[] | MockDBPost[]> {\n    if (!this.isServer) {\n      return [];\n    }\n    \n    return this.ensurePrisma().post.findMany({\n      where: {\n        authorId: userId,\n        updatedAt: { not: undefined }\n      },\n      orderBy: { createdAt: 'desc' },\n      take: limit,\n      skip: offset,\n    });\n  }\n\n  async confirmPost(blockchainId: number, txHash: string): Promise<DBPost | MockDBPost> {\n    if (!this.isServer) {\n      // Mock response in browser\n      return { blockchainId, blockchainTxHash: txHash, isConfirmed: true };\n    }\n    \n    return this.ensurePrisma().post.update({\n      where: { blockchainId },\n      data: {\n        blockchainTxHash: txHash,\n        isConfirmed: true,\n        confirmedAt: new Date(),\n      },\n    });\n  }\n\n  async deletePost(id: string): Promise<DBPost | MockDBPost> {\n    if (!this.isServer) {\n      return { id };\n    }\n    \n    return this.ensurePrisma().post.update({\n      where: { id },\n      data: { updatedAt: null },\n    });\n  }\n\n  async createInteraction(postId: string, userId: string, type: string): Promise<PostInteraction | MockPostInteraction> {\n    if (!this.isServer) {\n      // Mock response in browser\n      return { id: Date.now().toString(), postId, userId, type };\n    }\n    \n    return this.ensurePrisma().postInteraction.create({\n      data: {\n        postId,\n        userId,\n        type,\n      },\n    });\n  }\n\n  async getInteractions(postId: string): Promise<PostInteraction[] | MockPostInteraction[]> {\n    if (!this.isServer) {\n      // In browser, return empty array\n      return [];\n    }\n    \n    return this.ensurePrisma().postInteraction.findMany({\n      where: { postId },\n    });\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.isServer && this.prisma) {\n      await this.prisma.$disconnect();\n    }\n  }\n\n  // Tribe-related methods\n  async getTribe(id: string): Promise<Tribe | null> {\n    try {\n      if (this.isServer) {\n        return null;\n      }\n      \n      const tribeData = localStorage.getItem(`tribe:${id}`);\n      return tribeData ? JSON.parse(tribeData) : null;\n    } catch (error) {\n      console.error('Error getting tribe:', error);\n      return null;\n    }\n  }\n\n  async getAllTribes(limit: number = 100, offset: number = 0): Promise<Tribe[]> {\n    try {\n      if (this.isServer) {\n        return [];\n      }\n      \n      // In a real app, this would query all tribes from a database\n      // For now, we'll scan localStorage for tribe keys\n      const tribes: Tribe[] = [];\n      const tribeIdsKey = 'tribe_ids';\n      const tribeIds = localStorage.getItem(tribeIdsKey);\n      \n      if (tribeIds) {\n        const parsedIds = JSON.parse(tribeIds) as string[];\n        const slicedIds = parsedIds.slice(offset, offset + limit);\n        \n        for (const id of slicedIds) {\n          const tribe = await this.getTribe(id);\n          if (tribe) {\n            tribes.push(tribe);\n          }\n        }\n      }\n      \n      return tribes;\n    } catch (error) {\n      console.error('Error getting all tribes:', error);\n      return [];\n    }\n  }\n\n  async createOrUpdateTribe(tribe: Tribe): Promise<boolean> {\n    try {\n      if (this.isServer) {\n        return false;\n      }\n      \n      // Store the tribe\n      localStorage.setItem(`tribe:${tribe.id}`, JSON.stringify(tribe));\n      \n      // Update tribe IDs list\n      const tribeIdsKey = 'tribe_ids';\n      const tribeIds = localStorage.getItem(tribeIdsKey);\n      let parsedIds: string[] = tribeIds ? JSON.parse(tribeIds) : [];\n      \n      if (!parsedIds.includes(tribe.id)) {\n        parsedIds.push(tribe.id);\n        localStorage.setItem(tribeIdsKey, JSON.stringify(parsedIds));\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Error creating/updating tribe:', error);\n      return false;\n    }\n  }\n\n  // User-related methods\n  async getUserByAddress(address: string): Promise<User | null> {\n    try {\n      if (this.isServer) {\n        return null;\n      }\n      \n      const userData = localStorage.getItem(`user:${address}`);\n      return userData ? JSON.parse(userData) : null;\n    } catch (error) {\n      console.error('Error getting user by address:', error);\n      return null;\n    }\n  }\n\n  async getUserByUsername(username: string): Promise<User | null> {\n    try {\n      if (this.isServer) {\n        return null;\n      }\n      \n      // In a real app, this would query by username from a database\n      // For now, we'll scan the username mapping\n      const usernameMapKey = 'username_map';\n      const usernameMap = localStorage.getItem(usernameMapKey);\n      \n      if (usernameMap) {\n        const parsedMap = JSON.parse(usernameMap) as Record<string, string>;\n        const address = Object.entries(parsedMap).find(([_, u]) => u === username)?.[0];\n        \n        if (address) {\n          return this.getUserByAddress(address);\n        }\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Error getting user by username:', error);\n      return null;\n    }\n  }\n\n  async createOrUpdateUser(user: User): Promise<boolean> {\n    try {\n      if (this.isServer) {\n        return false;\n      }\n      \n      // Store the user\n      localStorage.setItem(`user:${user.address}`, JSON.stringify(user));\n      \n      // Update username mapping if username exists\n      if (user.username) {\n        const usernameMapKey = 'username_map';\n        const usernameMap = localStorage.getItem(usernameMapKey);\n        const parsedMap = usernameMap ? JSON.parse(usernameMap) as Record<string, string> : {};\n        \n        parsedMap[user.address] = user.username;\n        localStorage.setItem(usernameMapKey, JSON.stringify(parsedMap));\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Error creating/updating user:', error);\n      return false;\n    }\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    try {\n      if (this.isServer) {\n        return [];\n      }\n      \n      // In a real app, this would query all users from a database\n      // For now, we'll scan localStorage for user keys\n      const users: User[] = [];\n      const userAddresses: string[] = [];\n      \n      // This is inefficient but works for demo purposes\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key?.startsWith('user:')) {\n          const address = key.substring(5);\n          userAddresses.push(address);\n        }\n      }\n      \n      for (const address of userAddresses) {\n        const user = await this.getUserByAddress(address);\n        if (user) {\n          users.push(user);\n        }\n      }\n      \n      return users;\n    } catch (error) {\n      console.error('Error getting all users:', error);\n      return [];\n    }\n  }\n\n  async getUserPosts(userId: string, limit = 20, offset = 0): Promise<Post[]> {\n    return this.getMockData('user_posts', userId) || [];\n  }\n\n  private getMockData(type: string, id: string): any {\n    if (this.isServer) return null;\n    try {\n      const key = `${type}:${id}`;\n      const data = localStorage.getItem(key);\n      if (!data) return null;\n      \n      const parsed = JSON.parse(data);\n      if (parsed.expires && parsed.expires < Date.now()) {\n        localStorage.removeItem(key);\n        return null;\n      }\n      return parsed.data;\n    } catch (error) {\n      console.error('Error reading mock data:', error);\n      return null;\n    }\n  }\n\n  private setMockData(type: string, id: string, data: any): void {\n    if (this.isServer) return;\n    try {\n      const key = `${type}:${id}`;\n      const value = {\n        data,\n        timestamp: Date.now(),\n        expires: Date.now() + 5 * 60 * 1000 // 5 minutes\n      };\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error('Error writing mock data:', error);\n    }\n  }\n\n  // Indexer-related methods\n  public async getLastIndexedBlock(chainId: number): Promise<number> {\n    if (!this.isServer) {\n      return 0;\n    }\n    \n    const key = `lastIndexedBlock:${chainId}`;\n    const stored = localStorage.getItem(key);\n    return stored ? Number(stored) : 0;\n  }\n\n  public async updateLastIndexedBlock(blockNumber: number, chainId: number): Promise<void> {\n    if (!this.isServer) {\n      const key = `lastIndexedBlock:${chainId}`;\n      localStorage.setItem(key, blockNumber.toString());\n      return;\n    }\n  }\n\n  public async createBlockEvent(event: {\n    blockNumber: number;\n    transactionHash: string;\n    eventName: string;\n    eventData: Prisma.InputJsonValue;\n  }): Promise<BlockEvent> {\n    return this.ensurePrisma().blockEvent.create({\n      data: {\n        blockNumber: BigInt(event.blockNumber),\n        transactionHash: event.transactionHash,\n        eventName: event.eventName,\n        eventData: event.eventData,\n        processed: false,\n        error: null\n      }\n    });\n  }\n\n  public async markEventProcessed(eventId: number, error?: string): Promise<void> {\n    await this.ensurePrisma().blockEvent.update({\n      where: { id: eventId },\n      data: {\n        processed: true,\n        error,\n        updatedAt: new Date()\n      }\n    });\n  }\n\n  public async getUnprocessedEvents(limit: number = 100): Promise<BlockEvent[]> {\n    return this.ensurePrisma().blockEvent.findMany({\n      where: { processed: false },\n      orderBy: { blockNumber: 'asc' },\n      take: limit\n    });\n  }\n\n  public async createOrUpdatePost(post: CreatePostInput): Promise<DBPost> {\n    if (!this.isServer) {\n      throw new Error('Cannot create/update post in browser environment');\n    }\n\n    return this.ensurePrisma().post.upsert({\n      where: { id: post.id },\n      create: {\n        ...post,\n        metadata: post.metadata || {},\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      update: {\n        ...post,\n        metadata: post.metadata || {},\n        updatedAt: new Date()\n      }\n    });\n  }\n\n  public async getUnindexedPosts(limit: number = 100): Promise<DBPost[]> {\n    if (!this.isServer) {\n      return [];\n    }\n    \n    return this.ensurePrisma().post.findMany({\n      where: {\n        updatedAt: { equals: undefined }\n      },\n      orderBy: { createdAt: 'asc' },\n      take: limit\n    });\n  }\n\n  public async getPostsByBlockRange(startBlock: number, endBlock: number): Promise<DBPost[]> {\n    if (!this.isServer) {\n      return [];\n    }\n    \n    return this.ensurePrisma().post.findMany({\n      where: {\n        createdAt: {\n          gte: new Date(startBlock * 1000),\n          lte: new Date(endBlock * 1000)\n        }\n      },\n      orderBy: { createdAt: 'asc' }\n    });\n  }\n\n  public async updateIndexerState(chainId: number, data: Partial<{\n    lastIndexedBlock: bigint;\n    lastSyncTime: Date;\n  }>): Promise<void> {\n    await this.ensurePrisma().indexerState.upsert({\n      where: { chainId },\n      create: {\n        chainId,\n        lastIndexedBlock: data.lastIndexedBlock || BigInt(0),\n        lastSyncTime: data.lastSyncTime || new Date()\n      },\n      update: {\n        ...data\n      }\n    });\n  }\n\n  public async getIndexerState(chainId: number): Promise<IndexerState | null> {\n    return this.ensurePrisma().indexerState.findFirst({\n      where: { chainId }\n    });\n  }\n} ","import { DBService } from './db.service';\nimport { QueueService } from './queue.service';\nimport { IndexerService } from './indexer/IndexerService';\nimport { PostsService } from './posts.service';\n\n// Export service classes first\nexport { PostsService, DBService, QueueService, IndexerService };\n\n// Initialize indexer service with default chain ID (will be updated on init)\nlet indexerInstance: IndexerService | null = null;\n\nexport const getIndexerService = (chainId?: number) => {\n  if (!indexerInstance) {\n    indexerInstance = new IndexerService(chainId || 0);\n  } else if (chainId) {\n    // Update chain ID if provided\n    indexerInstance = new IndexerService(chainId);\n  }\n  return indexerInstance;\n};\n\n// Export convenience method for posts service\nexport const getPostsService = () => {\n  return PostsService.getInstance();\n};\n\n// Export service getters instead of direct instances\nexport const services = {\n  getDB: () => DBService.getInstance(),\n  getQueue: () => QueueService.getInstance(),\n  getPosts: () => PostsService.getInstance(),\n  getIndexer: getIndexerService\n}; ","import { getPublicClient, blockchain } from '../utils/blockchainUtils';\nimport { getContracts } from '../config/contracts';\nimport { QueueService as ExternalQueueService } from '../services/queue.service';\nimport { Post, PostMetadata, PostType } from '../types/post';\nimport { Post as DBPost, Prisma } from '@prisma/client';\nimport { DBService } from './db.service';\nimport { TribesHelper } from '../types/tribes';\nimport { IndexerService } from './indexer/IndexerService';\nimport { JsonValue } from '@prisma/client/runtime/library';\nimport { getIndexerService } from './index';\n\n// Import the CreatePostInput type\ninterface CreatePostInput {\n  id: string;\n  authorId: string;\n  content: string;\n  type: string;\n  tribeId: string;\n  metadata?: Prisma.InputJsonValue;\n  blockchainId?: number;\n  blockchainTxHash?: string;\n  isConfirmed?: boolean;\n}\n\ndeclare global {\n  interface Window {\n    ethereum?: any;\n    tribesHelper?: TribesHelper;\n  }\n}\n\n// Add at the top with other imports and types\nenum TaskType {\n  CACHE_POST = 'CACHE_POST',\n  REFRESH_POST = 'REFRESH_POST',\n  UPDATE_CACHE = 'UPDATE_CACHE',\n  SYNC_TRIBE = 'SYNC_TRIBE'\n}\n\n// Add at the top with other interfaces\ninterface QueueService {\n  addToQueue(type: TaskType, data: any, options?: { priority?: number }): Promise<void>;\n  processQueue(): Promise<void>;\n}\n\n/**\n * Simple LRU Cache implementation that automatically removes least recently used items\n * when the cache reaches maximum size\n */\nclass LRUCache<T> {\n  private cache: Map<string, T>;\n  private maxSize: number;\n  private keyTimestamps: Map<string, number>;\n\n  constructor(maxSize: number) {\n    this.cache = new Map();\n    this.maxSize = maxSize;\n    this.keyTimestamps = new Map();\n  }\n\n  get(key: string): T | undefined {\n    // Record this access\n    if (this.cache.has(key)) {\n      this.keyTimestamps.set(key, Date.now());\n      return this.cache.get(key);\n    }\n    return undefined;\n  }\n\n  set(key: string, value: T): void {\n    // Remove least recently used item if we're at capacity\n    if (this.cache.size >= this.maxSize && !this.cache.has(key)) {\n      const oldestKey = this.getOldestKey();\n      if (oldestKey) {\n        this.cache.delete(oldestKey);\n        this.keyTimestamps.delete(oldestKey);\n      }\n    }\n\n    this.cache.set(key, value);\n    this.keyTimestamps.set(key, Date.now());\n  }\n\n  has(key: string): boolean {\n    return this.cache.has(key);\n  }\n\n  delete(key: string): boolean {\n    this.keyTimestamps.delete(key);\n    return this.cache.delete(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n    this.keyTimestamps.clear();\n  }\n\n  getOldestKey(): string | undefined {\n    if (this.keyTimestamps.size === 0) return undefined;\n    \n    // Find the key with the oldest timestamp\n    let oldestKey: string | undefined;\n    let oldestTime = Infinity;\n\n    this.keyTimestamps.forEach((time, key) => {\n      if (time < oldestTime) {\n        oldestTime = time;\n        oldestKey = key;\n      }\n    });\n\n    return oldestKey;\n  }\n\n  get size(): number {\n    return this.cache.size;\n  }\n\n  keys(): IterableIterator<string> {\n    return this.cache.keys();\n  }\n\n  values(): IterableIterator<T> {\n    return this.cache.values();\n  }\n\n  entries(): IterableIterator<[string, T]> {\n    return this.cache.entries();\n  }\n}\n\n// In-memory cache for development, replace with Redis in production\nconst postsCache = new Map<string, Post>();\nconst postsByTribeCache = new Map<string, Post[]>();\nconst postsByUserCache = new Map<string, Post[]>();\n\n// Cache expiry time (5 minutes)\nconst CACHE_EXPIRY = 5 * 60 * 1000;\n\n// For browser environment where Prisma isn't available\ntype MockDBPost = any;\n\n// Interface for blockchain post data\ninterface BlockchainPost {\n  id: bigint;\n  creator: string;\n  content: string;\n  type: string;\n  timestamp: number;\n  likes: number;\n  comments: number;\n  shares: number;\n  tribeId: bigint;\n  title: string;\n  description: string;\n  tags: string[];\n  mediaContent: { type: 'image' | 'video'; url: string }[];\n  views: number;\n  engagement: number;\n}\n\n// Define our extended Post interface to match what is used in the application\ninterface UIPost extends Post {\n  // Additional fields used in UI\n  authorName?: string;\n  tribeName?: string;\n  likes?: number;\n  comments?: number;\n}\n\n// Cache entry with timestamp for expiration\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n}\n\ninterface DBPostInput {\n  id: number;\n  metadata: JsonValue;\n  tribeId: string;\n  type: string;\n  content: string;\n  authorId: string;\n  blockNumber?: bigint;\n  transactionHash?: string;\n}\n\n// Add these new interfaces near the top after the imports\ninterface CacheMetrics {\n  hits: number;\n  misses: number;\n  source: {\n    memory: number;\n    localStorage: number;\n    indexedDB: number;\n    database: number;\n    blockchain: number;\n  };\n}\n\ninterface CacheStats {\n  lastAccess: number;\n  accessCount: number;\n  dataSource: 'memory' | 'localStorage' | 'indexedDB' | 'database' | 'blockchain';\n}\n\ninterface QueueTask {\n  type: TaskType;\n  data: any;\n  priority?: number;\n}\n\nexport class PostsService {\n  private static instance: PostsService;\n  private postsCache: LRUCache<CacheEntry<Post>>;\n  private tribePostsCache: Map<string, CacheEntry<string[]>>;\n  private userPostsCache: Map<string, CacheEntry<string[]>>;\n  private dbService: DBService | null = null;\n  private indexerService: IndexerService | null = null;\n  private queueService: QueueService | null = null;\n  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n  private readonly LOCAL_STORAGE_TTL = 24 * 60 * 60 * 1000; // 24 hours\n  private readonly MAX_CACHED_POSTS = 250;\n  private readonly MAX_POSTS_PER_TRIBE = 100;\n  private isServer: boolean;\n  private contract: any;\n  private isSyncing: boolean = false;\n  private syncProgress: number = 0;\n  private syncTotal: number = 0;\n  private syncCallbacks: Set<() => void> = new Set();\n  private lastSyncTime: number = 0;\n  private syncErrorCount: number = 0;\n  private lastError: Error | null = null;\n  private metrics: CacheMetrics = {\n    hits: 0,\n    misses: 0,\n    source: {\n      memory: 0,\n      localStorage: 0,\n      indexedDB: 0,\n      database: 0,\n      blockchain: 0\n    }\n  };\n  private cacheStats: Map<string, CacheStats> = new Map();\n\n  // Add static getInstance method\n  public static getInstance(): PostsService {\n    if (!PostsService.instance) {\n      PostsService.instance = new PostsService();\n    }\n    return PostsService.instance;\n  }\n\n  private constructor() {\n    this.postsCache = new LRUCache<CacheEntry<Post>>(this.MAX_CACHED_POSTS);\n    this.tribePostsCache = new Map();\n    this.userPostsCache = new Map();\n    this.isServer = typeof window === 'undefined';\n    \n    if (this.isServer) {\n      this.dbService = DBService.getInstance();\n      this.indexerService = getIndexerService();\n      this.setupEventListeners();\n    } else {\n      // Initialize client-side cache\n      this.initializeCache();\n    }\n  }\n\n  private setupEventListeners() {\n    // Use the new onCacheUpdate method instead of onEvent\n    this.indexerService?.onCacheUpdate((type, data) => {\n      if (type === 'posts') {\n        // Handle post updates\n        const { postId, post } = data;\n        this.invalidateCache(postId);\n      }\n    });\n  }\n\n  // New method to initialize cache\n  private async initializeCache(): Promise<void> {\n    console.info('[Cache] Initializing frontend cache...');\n    \n    try {\n      // First try to load from IndexedDB\n      await this.loadFromIndexedDB();\n      \n      // Then try localStorage as fallback\n      await this.loadFromLocalStorage();\n      \n      // Finally, fetch initial data from API\n      await this.fetchInitialData();\n      \n      console.info('[Cache] Cache initialization complete');\n      } catch (error) {\n      console.error('[Cache] Error initializing cache:', error);\n    }\n  }\n\n  private async loadFromIndexedDB(): Promise<void> {\n    if (!window.indexedDB) return;\n\n    try {\n      const request = indexedDB.open('tribes_posts_cache', 1);\n      \n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(['posts', 'tribes'], 'readonly');\n        const postsStore = transaction.objectStore('posts');\n        const tribesStore = transaction.objectStore('tribes');\n\n        // Load posts\n        postsStore.getAll().onsuccess = (event: any) => {\n          const posts = event.target.result;\n          posts.forEach((post: Post & { _timestamp: number }) => {\n            if (Date.now() - post._timestamp < this.LOCAL_STORAGE_TTL) {\n              const { _timestamp, ...cleanPost } = post;\n              this.setCache(post.id, cleanPost);\n            }\n          });\n        };\n\n        // Load tribes data\n        tribesStore.getAll().onsuccess = (event: any) => {\n          const tribes = event.target.result;\n          tribes.forEach((tribe: { id: string; postIds: string[]; timestamp: number }) => {\n            if (Date.now() - tribe.timestamp < this.LOCAL_STORAGE_TTL) {\n              this.tribePostsCache.set(`tribe:${tribe.id}`, {\n                data: tribe.postIds,\n                timestamp: tribe.timestamp\n              });\n            }\n          });\n        };\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = request.result;\n        if (!db.objectStoreNames.contains('posts')) {\n          db.createObjectStore('posts', { keyPath: 'id' });\n        }\n        if (!db.objectStoreNames.contains('tribes')) {\n          db.createObjectStore('tribes', { keyPath: 'id' });\n        }\n      };\n    } catch (error) {\n      console.warn('[Cache] IndexedDB load failed:', error);\n    }\n  }\n\n  private async fetchInitialData(): Promise<void> {\n    try {\n      // Since API endpoint doesn't exist yet, fetch directly from blockchain\n      const contract = await this.getContract();\n      if (!contract) {\n        console.warn('[Cache] No contract available for initial data fetch');\n        return;\n      }\n\n      // Get latest posts from blockchain\n      const [postIds, total] = await contract.getPostsByTribe('0', BigInt(0), BigInt(20));\n      if (!Array.isArray(postIds)) {\n        console.warn('[Cache] Invalid post IDs from blockchain');\n        return;\n      }\n\n      // Fetch each post\n      const posts = await Promise.all(\n        postIds.map(async (postId) => {\n          const post = await contract.getPost(Number(postId));\n          return post ? this.mapBlockchainPostToUIPost(post) : null;\n        })\n      );\n\n      // Filter out nulls and cache valid posts\n      const validPosts = posts.filter((post): post is Post => post !== null);\n      \n      validPosts.forEach(post => {\n        this.setCache(post.id, post);\n      });\n\n      console.info('[Cache] Initial data loaded from blockchain:', validPosts.length, 'posts');\n    } catch (error) {\n      console.error('[Cache] Error fetching initial data:', error);\n    }\n  }\n\n  // Modified getFromCacheOrDB to prioritize cached data\n  private async getFromCacheOrDB(id: string): Promise<Post | null> {\n    const cacheKey = `posts:${id}`;\n    \n    // Check memory cache first\n    const cachedEntry = this.postsCache.get(cacheKey);\n    if (cachedEntry && !this.isCacheExpired(cachedEntry)) {\n      this.logCacheAccess(cacheKey, true, 'memory');\n      return cachedEntry.data;\n    }\n\n    if (!this.isServer) {\n      // Try IndexedDB\n      try {\n        const idbPost = await this.getFromIndexedDB(id);\n        if (idbPost) {\n          this.logCacheAccess(cacheKey, true, 'indexedDB');\n          return idbPost;\n        }\n      } catch (error) {\n        console.warn('[Cache] IndexedDB access failed:', error);\n      }\n\n      // Try localStorage\n      const localPost = this.getFromLocalStorage(id);\n      if (localPost) {\n        this.logCacheAccess(cacheKey, true, 'localStorage');\n        return localPost;\n      }\n\n      // If on frontend and not in cache, fetch from API\n      try {\n        const response = await fetch(`/api/posts/${id}`);\n        if (response.ok) {\n          const post = await response.json();\n          this.setCache(id, post);\n          return post;\n        }\n      } catch (error) {\n        console.error('[API] Error fetching post:', error);\n      }\n      \n      return null;\n    }\n\n    // Server-side: try database\n    const dbPost = await this.dbService?.getPost(id);\n    if (dbPost) {\n      this.logCacheAccess(cacheKey, true, 'database');\n      const mappedPost = await this.mapBlockchainPostToUIPost(dbPost);\n      if (mappedPost) {\n        this.setCache(id, mappedPost);\n        return mappedPost;\n      }\n    }\n\n    // Only verify with blockchain on server-side\n      if (this.isServer) {\n      this.logCacheAccess(cacheKey, false, 'blockchain');\n      return this.fetchFromBlockchain(id);\n    }\n\n        return null;\n      }\n\n  // Modified getUserFeed to prioritize cached data\n  public async getUserFeed(userAddress: string, limit = 50, offset = 0): Promise<Post[]> {\n    if (!userAddress) return [];\n\n    const cacheKey = `user_${userAddress}`;\n    \n    // Check cache first\n    const cachedEntry = this.userPostsCache.get(cacheKey);\n    if (cachedEntry && !this.isCacheExpired(cachedEntry)) {\n      const postsPromises = cachedEntry.data\n        .slice(offset, offset + limit)\n        .map(id => this.getFromCacheOrDB(id));\n      \n      const resolvedPosts = await Promise.all(postsPromises);\n      const validPosts = resolvedPosts.filter((post): post is Post => post !== null);\n      if (validPosts.length > 0) {\n        return validPosts;\n      }\n    }\n\n    // Try blockchain if not in cache\n    try {\n      const contract = await this.getContract();\n      if (!contract) {\n        console.warn('[Blockchain] No contract available for user feed');\n        return [];\n      }\n\n      // Get posts from blockchain\n      const [postIds, total] = await contract.getPostsByUser(userAddress, BigInt(offset), BigInt(limit));\n      if (!Array.isArray(postIds)) {\n        console.warn('[Blockchain] Invalid post IDs from blockchain');\n        return [];\n      }\n\n      // Fetch each post\n      const posts = await Promise.all(\n        postIds.map(async (postId) => {\n          const post = await contract.getPost(Number(postId));\n          return post ? this.mapBlockchainPostToUIPost(post) : null;\n        })\n      );\n\n      // Filter out nulls and cache valid posts\n      const validPosts = posts.filter((post): post is Post => post !== null);\n      \n      if (validPosts.length > 0) {\n        // Cache the results\n        this.cacheUserPosts(userAddress, validPosts);\n        console.info('[Blockchain] Retrieved', validPosts.length, 'posts for user', userAddress);\n        return validPosts;\n      }\n    } catch (error) {\n      console.error('[Blockchain] Error fetching user feed:', error);\n    }\n\n    return [];\n  }\n\n  // Helper method to cache user posts\n  private cacheUserPosts(userAddress: string, posts: Post[]): void {\n    this.userPostsCache.set(`user_${userAddress}`, {\n      data: posts.map(post => post.id),\n      timestamp: Date.now()\n    });\n    \n    // Cache individual posts\n    posts.forEach(post => {\n      this.setCache(post.id, post);\n    });\n  }\n\n  // Modified getPostsByTribe to prioritize cached data\n  public async getPostsByTribe(tribeId: string, limit = 20, offset = 0): Promise<Post[]> {\n    const cacheKey = `tribe:${tribeId}`;\n    \n    // Check memory cache first\n    const cachedEntry = this.tribePostsCache.get(cacheKey);\n    if (cachedEntry && !this.isCacheExpired(cachedEntry)) {\n      const postsPromises = cachedEntry.data\n        .slice(offset, offset + limit)\n        .map(id => this.getFromCacheOrDB(id));\n      \n      const resolvedPosts = await Promise.all(postsPromises);\n      const validPosts = resolvedPosts.filter((post): post is Post => post !== null);\n      if (validPosts.length > 0) {\n        return validPosts;\n      }\n    }\n\n    // Try blockchain if not in cache\n    try {\n      const contract = await this.getContract();\n      if (!contract) {\n        console.warn('[Blockchain] No contract available for tribe posts');\n        return [];\n      }\n\n      // Get posts from blockchain\n      const [postIds, total] = await contract.getTribePosts(tribeId, BigInt(offset), BigInt(limit));\n      if (!Array.isArray(postIds)) {\n        console.warn('[Blockchain] Invalid post IDs from blockchain');\n        return [];\n      }\n\n      // Fetch each post\n      const posts = await Promise.all(\n        postIds.map(async (postId) => {\n          const post = await contract.getPost(Number(postId));\n          return post ? this.mapBlockchainPostToUIPost(post) : null;\n        })\n      );\n\n      // Filter out nulls and cache valid posts\n      const validPosts = posts.filter((post): post is Post => post !== null);\n      \n      if (validPosts.length > 0) {\n        // Cache the results\n        this.cacheTribePosts(tribeId, validPosts);\n        console.info('[Blockchain] Retrieved', validPosts.length, 'posts for tribe', tribeId);\n        return validPosts;\n      }\n                } catch (error) {\n      console.error('[Blockchain] Error fetching tribe posts:', error);\n    }\n\n    return [];\n  }\n\n  // Add helper method for tribe posts caching\n  private cacheTribePosts(tribeId: string, posts: Post[]): void {\n    this.tribePostsCache.set(`tribe:${tribeId}`, {\n      data: posts.map(post => post.id),\n      timestamp: Date.now()\n    });\n    \n    // Cache individual posts\n    posts.forEach(post => {\n      this.setCache(post.id, post);\n    });\n  }\n\n  private async getFromIndexedDB(id: string): Promise<Post | null> {\n    if (!window.indexedDB) return null;\n\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('tribes_posts_cache', 1);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(['posts'], 'readonly');\n        const store = transaction.objectStore('posts');\n        const getRequest = store.get(id);\n\n        getRequest.onsuccess = () => {\n          const post = getRequest.result;\n          if (post && Date.now() - post._timestamp < this.LOCAL_STORAGE_TTL) {\n            delete post._timestamp;\n            resolve(post);\n          } else {\n            resolve(null);\n          }\n        };\n\n        getRequest.onerror = () => reject(getRequest.error);\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = request.result;\n        if (!db.objectStoreNames.contains('posts')) {\n          db.createObjectStore('posts', { keyPath: 'id' });\n        }\n      };\n    });\n  }\n\n  private async saveToIndexedDB(id: string, post: Post): Promise<void> {\n    if (!window.indexedDB) return;\n\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('tribes_posts_cache', 1);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(['posts'], 'readwrite');\n        const store = transaction.objectStore('posts');\n        const storagePost = { ...post, _timestamp: Date.now() };\n        \n        store.put(storagePost).onsuccess = () => resolve();\n        transaction.onerror = () => reject(transaction.error);\n      };\n    });\n  }\n\n  public getCacheMetrics(): CacheMetrics {\n    return { ...this.metrics };\n  }\n\n  public async clearExpiredCache(): Promise<void> {\n    const now = Date.now();\n    \n    // Clear memory cache\n    for (const [key, entry] of this.postsCache.entries()) {\n      if (this.isCacheExpired(entry)) {\n        this.postsCache.delete(key);\n      }\n    }\n\n    // Clear IndexedDB\n    if (!this.isServer) {\n      try {\n        const request = indexedDB.open('tribes_posts_cache', 1);\n        request.onsuccess = () => {\n          const db = request.result;\n          const transaction = db.transaction(['posts'], 'readwrite');\n          const store = transaction.objectStore('posts');\n          const range = IDBKeyRange.upperBound(now - this.LOCAL_STORAGE_TTL);\n          \n          store.index('timestamp').openCursor(range).onsuccess = (event) => {\n            const cursor = (event.target as IDBRequest).result;\n            if (cursor) {\n              store.delete(cursor.primaryKey);\n              cursor.continue();\n            }\n          };\n        };\n    } catch (error) {\n        console.warn('[Cache] Error clearing IndexedDB:', error);\n      }\n    }\n\n    console.info('[Cache] Cleared expired entries');\n  }\n\n  // Update the setCache method\n  private async setCache(key: string, post: Post): Promise<void> {\n    const cacheKey = `posts:${key}`;\n    \n    this.postsCache.set(cacheKey, {\n      data: post,\n      timestamp: Date.now()\n    });\n\n    if (!this.isServer) {\n      // Save to IndexedDB\n      try {\n        await this.saveToIndexedDB(post.id, post);\n      } catch (error) {\n        console.warn('[Cache] Failed to save to IndexedDB, falling back to localStorage:', error);\n        this.saveToLocalStorage(post.id, post);\n      }\n\n      // Queue for background processing\n      if (this.queueService) {\n        await this.queueService.addToQueue(TaskType.CACHE_POST, { postId: post.id, post }, { priority: 3 });\n      }\n    }\n  }\n\n  private async fetchFromBlockchain(id: string): Promise<Post | null> {\n    try {\n      const contract = await this.getContract();\n      if (!contract) {\n        console.warn('No blockchain contract available');\n        return null;\n      }\n      \n      const blockchainPost = await contract.getPost(parseInt(id));\n      if (blockchainPost) {\n        const mappedPost = await this.mapBlockchainPostToUIPost(blockchainPost);\n        if (mappedPost) {\n          // Save to DB through indexer\n          const dbPost: CreatePostInput = {\n            id: mappedPost.id,\n            authorId: mappedPost.author,\n            content: mappedPost.content,\n            type: mappedPost.type.toString(),\n            tribeId: mappedPost.tribeId.toString(),\n            metadata: mappedPost.metadata ? JSON.stringify(mappedPost.metadata) : {},\n            blockchainId: parseInt(mappedPost.id),\n            isConfirmed: true\n          };\n          \n          await this.dbService?.createOrUpdatePost(dbPost);\n          \n          this.setCache(id, mappedPost);\n          \n          if (!this.isServer) {\n            this.saveToLocalStorage(id, mappedPost);\n          }\n          \n          return mappedPost;\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching post from blockchain:', error);\n    }\n    return null;\n  }\n\n  private getFromLocalStorage(id: string): Post | null {\n    try {\n      const localStorageKey = `post_${id}`;\n      const localPost = localStorage.getItem(localStorageKey);\n      \n      if (localPost) {\n        const parsedPost = JSON.parse(localPost);\n        const timestamp = parsedPost._timestamp || 0;\n        \n        if (Date.now() - timestamp < this.LOCAL_STORAGE_TTL) {\n          delete parsedPost._timestamp;\n          const post = parsedPost as Post;\n          this.setCache(id, post);\n          \n          if (Date.now() - timestamp > this.CACHE_TTL / 2) {\n            this.queuePostRefresh(id);\n          }\n          \n          return post;\n        }\n      }\n    } catch (error) {\n      console.warn('Error reading post from localStorage:', error);\n    }\n    return null;\n  }\n\n  private saveToLocalStorage(id: string, post: Post): void {\n    try {\n      const storagePost = { ...post, _timestamp: Date.now() };\n      localStorage.setItem(`post_${id}`, JSON.stringify(storagePost));\n    } catch (error) {\n      console.warn('Error saving post to localStorage:', error);\n    }\n  }\n\n  // Update queuePostRefresh method\n  private queuePostRefresh(postId: string): void {\n    if (this.isServer) return;\n    \n    // Add to queue with low priority (3) so it doesn't block other operations\n    if (this.queueService) {\n      this.queueService.addToQueue(TaskType.REFRESH_POST, { postId }, { priority: 3 });\n    }\n  }\n\n  async getPost(id: string): Promise<Post | null> {\n    return this.getFromCacheOrDB(id);\n  }\n\n  // Sync status management\n  public getSyncStatus() {\n    return {\n      isSyncing: this.isSyncing,\n      progress: this.syncProgress,\n      total: this.syncTotal,\n      lastSyncTime: this.lastSyncTime,\n      errorCount: this.syncErrorCount,\n      lastError: this.lastError\n    };\n  }\n\n  // Add sync status listeners\n  public addSyncListener(callback: () => void) {\n    this.syncCallbacks.add(callback);\n    return () => this.syncCallbacks.delete(callback);\n  }\n\n  public isSyncingPosts() {\n    return this.isSyncing;\n  }\n\n  private notifySyncListeners() {\n    this.syncCallbacks.forEach(callback => callback());\n  }\n\n  // Improved background sync mechanism \n  private async startBackgroundSync() {\n    if (this.isServer) return;\n\n    const syncPosts = async () => {\n      if (this.isSyncing) return;\n      \n      try {\n        this.isSyncing = true;\n        this.syncProgress = 0;\n        this.syncTotal = 0;\n        this.lastError = null;\n        this.notifySyncListeners();\n\n        // Get tribe IDs to sync from cache\n        const tribeIds = Array.from(this.tribePostsCache.keys());\n        this.syncTotal = tribeIds.length;\n        \n        // If no tribes in cache, try to get them from localStorage\n        if (tribeIds.length === 0) {\n          try {\n            const keys = Object.keys(localStorage);\n            for (const key of keys) {\n              if (key.startsWith('tribe_posts_')) {\n                const tribeId = key.replace('tribe_posts_', '');\n                if (!tribeIds.includes(`tribe:${tribeId}`)) {\n                  tribeIds.push(`tribe:${tribeId}`);\n                }\n              }\n            }\n            this.syncTotal = tribeIds.length;\n    } catch (error) {\n            console.warn('Error reading localStorage for tribe IDs:', error);\n          }\n        }\n        \n        // Sync each tribe's posts\n        for (let i = 0; i < tribeIds.length; i++) {\n          const tribeKey = tribeIds[i];\n          const tribeId = tribeKey.replace('tribe:', '');\n          \n          try {\n            await this.syncTribePosts(tribeId);\n            this.syncProgress = i + 1;\n            this.notifySyncListeners();\n          } catch (error) {\n            console.error(`Error syncing posts for tribe ${tribeId}:`, error);\n            this.syncErrorCount++;\n            this.lastError = error instanceof Error ? error : new Error('Unknown sync error');\n          }\n        }\n        \n        this.lastSyncTime = Date.now();\n        \n        // Reset error count after successful sync\n        if (this.syncErrorCount > 0 && this.syncProgress === this.syncTotal) {\n          this.syncErrorCount = 0;\n        }\n      } catch (error) {\n        console.error('Error in sync process:', error);\n        this.syncErrorCount++;\n        this.lastError = error instanceof Error ? error : new Error('Unknown sync error');\n      } finally {\n        this.isSyncing = false;\n        this.notifySyncListeners();\n      }\n    };\n\n    // Initial sync with delay to allow app to load\n    setTimeout(async () => {\n      await syncPosts();\n    }, 5000);\n\n    // Set up periodic sync every 30 seconds\n    setInterval(syncPosts, 30000);\n  }\n\n  // Enhanced tribe posts sync\n  private async syncTribePosts(tribeId: string) {\n    try {\n          const contract = await this.getContract();\n          if (!contract) {\n        console.warn('[Blockchain] No contract available for syncing tribe posts');\n        return;\n      }\n\n      // Get posts from blockchain\n      const [postIds, total] = await contract.getPostsByTribe(tribeId, BigInt(0), BigInt(this.MAX_POSTS_PER_TRIBE));\n      \n      if (Array.isArray(postIds)) {\n        // Fetch all posts\n        const rawPosts = await Promise.all(\n          postIds.map(async postId => {\n            const post = await contract.getPost(Number(postId));\n            return post ? this.mapBlockchainPostToUIPost(post) : null;\n          })\n        );\n        \n        // Filter out null posts\n        const validPosts = rawPosts.filter((post): post is Post => post !== null);\n        \n        if (validPosts.length > 0) {\n          // Save posts individually (now type-safe since we filtered nulls)\n          await Promise.all(\n            validPosts.map(async (post) => {\n              this.setCache(post.id, post);\n              await this.dbService?.createPost({\n                id: post.id,\n                authorId: post.author,\n                content: post.content,\n                type: post.type.toString(),\n                tribeId: post.tribeId.toString(),\n                metadata: post.metadata ? JSON.stringify(post.metadata) : {},\n                blockchainId: parseInt(post.id),\n                isConfirmed: true\n              });\n            })\n          );\n          \n          // Save the list of post IDs (now type-safe since we're using validPosts)\n          const validPostIds = validPosts.map((post) => post.id);\n          const cacheKey = `tribe_${tribeId}`;\n          this.tribePostsCache.set(cacheKey, {\n            data: validPostIds,\n            timestamp: Date.now()\n          });\n          \n          // Save to localStorage if client-side\n          if (!this.isServer) {\n            try {\n              localStorage.setItem(cacheKey, JSON.stringify({\n                data: validPostIds,\n                timestamp: Date.now()\n              }));\n            } catch (error) {\n              console.warn('[Cache] Error saving tribe posts to localStorage:', error);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('[Blockchain] Error syncing tribe posts:', error);\n    }\n  }\n\n  /**\n   * Clear a specific post from cache to force a fresh fetch\n   * @param postId Post ID to clear from cache\n   */\n  public clearPostFromCache(postId: string): void {\n    const cacheKey = `posts:${postId}`;\n    this.postsCache.delete(cacheKey);\n    \n    // Also clear from localStorage if client-side\n    if (!this.isServer) {\n      try {\n        localStorage.removeItem(`post_${postId}`);\n      } catch (error) {\n        console.warn('Error removing post from localStorage:', error);\n      }\n    }\n  }\n  \n  /**\n   * Clear a tribe's posts from cache to force a fresh fetch\n   * @param tribeId Tribe ID to clear from cache\n   */\n  public clearTribeCache(tribeId: string): void {\n    const cacheKey = `tribe:${tribeId}`;\n    this.tribePostsCache.delete(cacheKey);\n    \n    // Also clear from localStorage if client-side\n    if (!this.isServer) {\n      try {\n        localStorage.removeItem(`tribe_posts_${tribeId}`);\n          } catch (error) {\n        console.warn('Error removing tribe posts from localStorage:', error);\n      }\n    }\n  }\n\n  private invalidateCache(postId: string): void {\n    // Clear specific post from cache\n    this.clearPostFromCache(postId);\n    \n    // Clear related tribe cache\n    const post = this.postsCache.get(`posts:${postId}`)?.data;\n    if (post?.tribeId) {\n      this.clearTribeCache(post.tribeId.toString());\n    }\n    \n    // Clear user cache\n    if (post?.author) {\n      this.clearUserCache(post.author);\n    }\n  }\n\n  private clearUserCache(userAddress: string): void {\n    this.userPostsCache.delete(userAddress);\n    if (!this.isServer) {\n      try {\n        localStorage.removeItem(`user_posts_${userAddress}`);\n          } catch (error) {\n        console.warn('[Cache] Error removing user posts from localStorage:', error);\n      }\n    }\n  }\n\n  // Get contract with proper provider\n  private async getContract(): Promise<any> {\n    if (this.contract) {\n      return this.contract;\n    }\n\n    try {\n      // Connect to blockchain if not already connected\n      await blockchain.connect();\n      \n      const chainId = await blockchain.getChainId();\n      console.info('[Blockchain] Using chain ID:', chainId);\n      \n      const { postMinter } = getContracts(chainId);\n      \n      // Use viem's public client instead of ethers.js Contract\n      const publicClient = getPublicClient(chainId);\n      \n      // Create a wrapper for the contract that uses viem's publicClient\n      const contract = {\n        address: postMinter.address,\n        abi: postMinter.abi,\n        \n        // Generic method for calling read functions\n        callReadFunction: async (functionName: string, args: any[] = []) => {\n          try {\n            const result = await publicClient.readContract({\n              address: postMinter.address as `0x${string}`,\n              abi: postMinter.abi,\n              functionName,\n              args\n            });\n            return result;\n          } catch (error) {\n            console.error(`[Blockchain] Error calling ${functionName}:`, error);\n            throw error;\n          }\n        },\n        \n        // Define specific contract methods\n        getPostsByUser: async (userId: string, offset: bigint, limit: bigint) => {\n          return contract.callReadFunction('getPostsByUser', [userId, offset, limit]);\n        },\n        \n        getPost: async (postId: number) => {\n          return contract.callReadFunction('getPost', [postId]);\n        },\n        \n        getTribePosts: async (tribeId: number, offset: bigint, limit: bigint) => {\n          return contract.callReadFunction('getTribePosts', [tribeId, offset, limit]);\n        },\n        \n        getUserPosts: async (userId: string) => {\n          console.info('[Blockchain] getUserPosts not implemented, using fallback');\n      return [];\n    }\n      };\n      \n      // Cache the contract\n      this.contract = contract;\n      return contract;\n    } catch (error) {\n      console.error('[Blockchain] Error creating contract:', error);\n      \n      // Return a mock contract for fallback\n      return this.createMockContract();\n    }\n  }\n  \n  // Create a mock contract for fallback\n  private createMockContract(): any {\n    return {\n      getPostsByUser: async () => {\n        console.info('[Mock] Using mock contract getPostsByUser');\n        return [[], 0];\n      },\n      getUserPosts: async () => {\n        console.info('[Mock] Using mock contract getUserPosts');\n      return [];\n      },\n      getPost: async () => null,\n      getTribePosts: async () => {\n        console.info('[Mock] Using mock contract getTribePosts');\n        return [[], 0]; \n      }\n    };\n  }\n\n  // Add these methods back\n  private loadFromLocalStorage(): void {\n    try {\n      // Load posts cache\n      const postsCache = localStorage.getItem('posts_cache');\n      if (postsCache) {\n        const parsedCache = JSON.parse(postsCache);\n        const now = Date.now();\n        \n        // Only load non-expired items\n        Object.entries(parsedCache).forEach(([key, entry]: [string, any]) => {\n          if (entry.timestamp && (now - entry.timestamp) < this.LOCAL_STORAGE_TTL) {\n            this.postsCache.set(key, entry);\n          }\n        });\n      }\n      \n      // Load tribe posts cache\n      const tribeCache = localStorage.getItem('tribe_posts_cache');\n      if (tribeCache) {\n        const parsedCache = JSON.parse(tribeCache);\n        const now = Date.now();\n        \n        Object.entries(parsedCache).forEach(([key, entry]: [string, any]) => {\n          if (entry.timestamp && (now - entry.timestamp) < this.LOCAL_STORAGE_TTL) {\n            this.tribePostsCache.set(key, entry);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('[Cache] Error loading from localStorage:', error);\n    }\n  }\n\n  private isCacheExpired(entry: CacheEntry<any>): boolean {\n    return Date.now() - entry.timestamp > this.CACHE_TTL;\n  }\n\n  private logCacheAccess(key: string, hit: boolean, source: keyof CacheMetrics['source']): void {\n    this.metrics[hit ? 'hits' : 'misses']++;\n    if (hit) {\n      this.metrics.source[source]++;\n    }\n\n    const stats = this.cacheStats.get(key) || {\n      lastAccess: 0,\n      accessCount: 0,\n      dataSource: source\n    };\n\n    stats.lastAccess = Date.now();\n    stats.accessCount++;\n    this.cacheStats.set(key, stats);\n\n    // Log only important cache events\n    if (!hit || stats.accessCount % 10 === 0) {\n      console.info(`[Cache ${hit ? 'HIT' : 'MISS'}] ${key} from ${source} (Access #${stats.accessCount})`);\n    }\n  }\n\n  public async mapBlockchainPostToUIPost(blockchainPost: any): Promise<Post | null> {\n    if (!blockchainPost || (!Array.isArray(blockchainPost) && typeof blockchainPost !== 'object')) {\n      console.info('[Blockchain] Invalid post data received');\n          return null;\n        }\n\n    try {\n      let metadata;\n      try {\n        metadata = typeof blockchainPost[3] === 'string' ? JSON.parse(blockchainPost[3]) : blockchainPost[3];\n        \n        // If metadata is a string (which can happen with blockchain data), parse it again\n        if (typeof metadata === 'string') {\n          metadata = JSON.parse(metadata);\n        }\n      } catch (error) {\n        console.warn('[Blockchain] Using default metadata due to parsing error:', error);\n        metadata = {\n          title: '',\n          content: '',\n          type: 'TEXT',\n          tags: [],\n          createdAt: new Date().toISOString()\n        };\n      }\n\n      const postType = this.getPostType(metadata.type || PostType.TEXT);\n      const author = blockchainPost[1] || '0x0000000000000000000000000000000000000000';\n      const tribeId = Number(blockchainPost[2]);\n\n      // Only return null if essential data is missing\n      if (!author || tribeId === undefined) {\n        console.warn('[Blockchain] Missing essential post data');\n        return null;\n      }\n\n      const post: Post = {\n        id: blockchainPost[0]?.toString() || '0',\n        author: author as `0x${string}`,\n        content: metadata.content || '',\n        type: postType,\n        createdAt: metadata.createdAt ? new Date(metadata.createdAt).getTime() : Date.now(),\n        tribeId,\n        stats: {\n          likeCount: Number(blockchainPost[6]) || 0,\n          commentCount: 0,\n          shareCount: 0,\n          viewCount: 0,\n          saveCount: 0\n        },\n        metadata: {\n          type: postType,\n          content: metadata.content || '',\n          title: metadata.title || '',\n          description: metadata.description || '',\n          tags: metadata.tags || [],\n          media: metadata.mediaContent?.map((m: any) => ({\n            url: m.url,\n            type: m.type,\n            width: m.width,\n            height: m.height\n          })) || [],\n          createdAt: metadata.createdAt || new Date().toISOString()\n        }\n      };\n\n      return post;\n    } catch (error) {\n      console.error('[Blockchain] Error mapping post:', error);\n      return null;\n    }\n  }\n\n  // Update the getPostType method with proper type handling\n  private getPostType(type: string): PostType {\n    const upperType = type.toUpperCase();\n    const validTypes = Object.values(PostType) as string[];\n    if (validTypes.includes(upperType)) {\n      return upperType as unknown as PostType;\n    }\n    return PostType.TEXT;\n  }\n\n  // Update queue service methods\n  private async processQueue(): Promise<void> {\n    if (!this.queueService) return;\n    await this.queueService.processQueue();\n  }\n\n  private async enqueueTask(task: QueueTask): Promise<void> {\n    if (!this.queueService) return;\n    await this.queueService.addToQueue(task.type, task.data, { priority: task.priority });\n  }\n}","import { useState, useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useProfile } from '../hooks/useProfile'\nimport { useNotification } from '../contexts/NotificationContext'\nimport { useAuth } from '../hooks/useAuth'\nimport { ProfileForm } from '../components/profile/ProfileForm'\nimport type { Profile as ProfileType } from '../types/contracts'\nimport { Copy, ExternalLink, Edit2, Users2, Medal, Star } from 'lucide-react'\nimport { useNetwork } from '../hooks/useNetwork'\nimport { blockchain } from '../utils/blockchainUtils'\nimport { ethers } from 'ethers'\nimport { getContractAddresses } from '../utils/contracts'\nimport { TribesABI } from '../utils/abis'\nimport { PostsService } from '../services/posts.service'\nimport { Post } from '../types/post'\n\nexport function Profile() {\n  const navigate = useNavigate()\n  const { isConnected, address } = useAuth()\n  const { chainId } = useNetwork()\n  const { getProfileByAddress } = useProfile()\n  const { showNotification } = useNotification()\n  const [isEditing, setIsEditing] = useState(false)\n  const [isLoading, setIsLoading] = useState(true)\n  const [profileData, setProfileData] = useState<ProfileType | null>(null)\n  const [userPosts, setUserPosts] = useState<Post[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const postsService = PostsService.getInstance()\n\n  const loadProfile = async () => {\n    try {\n      if (!isConnected || !address) {\n        console.log('[Profile] Not connected or no address, redirecting to connect');\n        navigate('/connect');\n        return;\n      }\n\n      if (!chainId) {\n        console.log('[Profile] No chain ID, showing network error');\n        showNotification('Please connect to a supported network', 'error');\n        return;\n      }\n\n      setIsLoading(true);\n      setError(null);\n      \n      // Get profile from blockchain\n      console.log('🔍 Fetching profile from blockchain:', { address, chainId });\n      if (!getProfileByAddress) {\n        console.error('[Profile] Profile service not available');\n        showNotification('Profile service not available', 'error');\n        setIsLoading(false);\n        return;\n      }\n      \n      const { profile, error } = await getProfileByAddress(address as `0x${string}`);\n      \n      if (error?.code === 'WRONG_CHAIN') {\n        console.log('[Profile] Wrong chain detected');\n        showNotification('Please connect to a supported network', 'error');\n        return;\n      }\n      \n      if (profile) {\n        console.log('[Profile] Profile found:', profile);\n        const defaultMetadata = {\n          avatar: '',\n          bio: '',\n          createdAt: Date.now()\n        };\n        \n        let metadata;\n        try {\n          metadata = typeof profile.metadata === 'string' \n            ? JSON.parse(profile.metadata) \n            : profile.metadata || defaultMetadata;\n        } catch (e) {\n          console.warn('[Profile] Failed to parse metadata:', e);\n          metadata = defaultMetadata;\n        }\n        \n        const fullProfile: ProfileType = {\n          tokenId: BigInt(profile.tokenId),\n          username: profile.username,\n          metadata: JSON.stringify(metadata),\n          nftUri: metadata.avatar || `https://api.dicebear.com/7.x/avataaars/svg?seed=${profile.username}`,\n          owner: profile.owner.toLowerCase() as `0x${string}`\n        };\n        \n        console.log('[Profile] Setting profile data:', fullProfile);\n        setProfileData(fullProfile);\n        setError(null);\n        return;\n      }\n\n      console.log('[Profile] No profile found, redirecting to setup');\n      navigate('/username-setup');\n    } catch (error) {\n      console.error('[Profile] Error loading profile:', error);\n      setError(error instanceof Error ? error.message : 'Failed to load profile');\n      showNotification('Failed to load profile', 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Load profile when chain or address changes\n  useEffect(() => {\n    loadProfile()\n  }, [isConnected, address, chainId])\n\n  // Format address for display (show first 6 and last 4 characters)\n  const formatAddress = (address: string | undefined) => {\n    if (!address) return ''\n    return `${address.slice(0, 6)}...${address.slice(-4)}`\n  }\n\n  useEffect(() => {\n    async function fetchUserPosts() {\n      if (!address) return;\n      \n      setLoading(true);\n      setError(null);\n      \n      try {\n        console.log('Connecting to blockchain to fetch posts');\n        await blockchain.connect();\n        \n        // Use a default chainId (Fuse Ember) if chainId is undefined\n        const currentChainId = chainId || 1264453517; // Default to Fuse Ember if chainId is undefined\n        console.log('Using chain ID:', currentChainId);\n        \n        const addresses = getContractAddresses(currentChainId);\n        const signer = blockchain.getSigner();\n        const contract = new ethers.Contract(addresses.tribes, TribesABI);\n        \n        console.log('Fetching posts for user', address);\n        const posts = await contract.getUserPosts(address);\n        \n        if (posts && Array.isArray(posts) && posts.length > 0) {\n          console.log('Found posts:', posts);\n          \n          const mappedPosts: any = posts\n            .map((post: any) => {\n              try {\n                return postsService.mapBlockchainPostToUIPost(post);\n              } catch (error) {\n                console.error('Failed to map post:', error);\n                return null;\n              }\n            })\n            .filter(Boolean);\n            \n          console.log('Processed posts:', mappedPosts);\n          setUserPosts(mappedPosts);\n        } else {\n          console.log('No posts found');\n          setUserPosts([]);\n        }\n      } catch (err) {\n        console.error('Error fetching user posts:', err);\n        setError('Failed to fetch posts');\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    fetchUserPosts();\n  }, [address, chainId, postsService]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-monad-purple\"></div>\n      </div>\n    )\n  }\n\n  if (!profileData || !profileData.owner) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen\">\n        <p className=\"text-gray-400 mb-4\">No profile found</p>\n        <button\n          onClick={() => navigate('/username-setup')}\n          className=\"px-6 py-3 bg-theme-primary text-white rounded-lg font-medium hover:bg-theme-primary/90 transition-colors\"\n        >\n          Create Profile\n        </button>\n      </div>\n    )\n  }\n\n  const metadata = profileData.metadata ? JSON.parse(profileData.metadata) : { bio: '' }\n\n  return (\n    <div className=\"max-w-6xl mx-auto px-4 pb-20\">\n      {/* Profile Header with Wallet Info */}\n      <div className=\"relative py-6 border-b border-white/10\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-8 items-center\">\n          {/* Column 1: Avatar and Profile Info */}\n          <div className=\"flex items-start space-x-4\">\n            <img\n              src={profileData.nftUri || `https://api.dicebear.com/7.x/avataaars/svg?seed=${profileData.username}`}\n              alt=\"Profile\"\n              className=\"w-20 h-20 rounded-full border-4 border-[#4ADE80]/20\"\n            />\n            <div className=\"flex flex-col space-y-2\">\n              <h1 className=\"text-xl font-bold text-white\">@{profileData.username}</h1>\n              <div className=\"flex items-center space-x-2\">\n                <p className=\"text-gray-400 text-sm\">{formatAddress(profileData.owner)}</p>\n                <button\n                  onClick={() => {\n                    if (profileData.owner) {\n                      navigator.clipboard.writeText(profileData.owner)\n                      showNotification('Address copied!', 'success')\n                    }\n                  }}\n                  className=\"text-gray-400 hover:text-white transition-colors\"\n                >\n                  <Copy className=\"w-4 h-4\" />\n                </button>\n                <a\n                  href={`https://explorer-devnet.monadinfra.com/address/${profileData.owner}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-gray-400 hover:text-white transition-colors\"\n                >\n                  <ExternalLink className=\"w-4 h-4\" />\n                </a>\n              </div>\n              <p className=\"text-gray-200 text-sm\">{metadata.bio || 'No bio yet'}</p>\n            </div>\n          </div>\n\n          {/* Column 2: Stats Row */}\n          <div className=\"flex items-center justify-center space-x-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Users2 className=\"w-5 h-5 text-[#4ADE80]\" />\n              <span className=\"text-lg font-bold text-white\">0</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Medal className=\"w-5 h-5 text-[#4ADE80]\" />\n              <span className=\"text-lg font-bold text-white\">0</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Star className=\"w-5 h-5 text-yellow-400\" />\n              <span className=\"text-lg font-bold text-white\">0</span>\n            </div>\n          </div>\n\n          {/* Column 3: Actions */}\n          <div className=\"flex justify-end\">\n            <button\n              onClick={() => setIsEditing(true)}\n              className=\"flex items-center space-x-2 px-4 py-2 bg-[#4ADE80] text-black rounded-lg hover:bg-[#4ADE80]/90 transition-colors\"\n            >\n              <Edit2 className=\"w-4 h-4\" />\n              <span>Edit Profile</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Collectibles Section */}\n      <div className=\"mt-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-bold text-white\">Your Collectibles</h2>\n          <button className=\"text-[#4ADE80] hover:text-[#4ADE80]/80 transition-colors text-sm\">\n            View All\n          </button>\n        </div>\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-3\">\n          {/* Placeholder for collectibles */}\n          <div className=\"aspect-square bg-white/5 backdrop-blur-xl rounded-lg border border-white/10 flex items-center justify-center\">\n            <p className=\"text-gray-400 text-sm\">No collectibles</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Recent Activity */}\n      <div className=\"mt-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-bold text-white\">Recent Activity</h2>\n          <button className=\"text-[#4ADE80] hover:text-[#4ADE80]/80 transition-colors text-sm\">\n            View All\n          </button>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n          {/* Placeholder for activity items */}\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-lg p-3 border border-white/10\">\n            <p className=\"text-gray-400 text-sm text-center\">No recent activity</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Display user posts */}\n      <div className=\"mt-8\">\n        <h2 className=\"text-2xl font-bold mb-4\">Your Posts</h2>\n        \n        {loading && <p>Loading posts...</p>}\n        {error && <p className=\"text-red-500\">{error}</p>}\n        \n        {userPosts.length === 0 && !loading && !error && (\n          <p className=\"text-gray-500\">No posts found. Create your first post!</p>\n        )}\n        \n        <div className=\"space-y-4\">\n          {userPosts.map(post => (\n            <div key={post.id} className=\"p-4 bg-gray-800 rounded-lg\">\n              <p className=\"text-lg\">{post.content}</p>\n              <p className=\"text-sm text-gray-400 mt-2\">\n                Posted on {new Date(post.createdAt).toLocaleDateString()}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Edit Profile Drawer */}\n      {isEditing && (\n        <div className=\"fixed inset-y-0 right-0 w-full max-w-md bg-gray-900 shadow-xl transform transition-transform duration-300 ease-in-out z-50\">\n          <div className=\"h-full overflow-y-auto p-6\">\n            <button\n              onClick={() => setIsEditing(false)}\n              className=\"absolute top-4 right-4 text-gray-400 hover:text-white\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n            <ProfileForm\n              mode=\"edit\"\n              existingProfile={profileData}\n              onSuccess={() => {\n                setIsEditing(false)\n                loadProfile()\n              }}\n              onCancel={() => setIsEditing(false)}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  )\n} ","import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Check, Users, Globe, Lock, MessageSquare, Activity, Plus } from 'lucide-react';\nimport type { Tribe } from '../../types/tribe';\nimport { Card, CardContent, Badge } from '../common/ui';\nimport { useTribesManagement } from '../../hooks/useTribesManagement';\nimport { \n  getTribeAvatar, \n  getTribePrivacy, \n  getTribeTopics, \n  getTribeDescription, \n  getTribeCoverImage,\n  getTribeMembershipStatus\n} from '../../utils/tribeHelpers';\n\n// Simpler interface that uses the base Tribe type\ninterface TribeCardEnhancedProps {\n  tribe: Tribe;\n  showJoinButton?: boolean;\n}\n\nexport function TribeCardEnhanced({ tribe, showJoinButton = true }: TribeCardEnhancedProps) {\n  const navigate = useNavigate();\n  const { joinTribe, requestToJoinTribe } = useTribesManagement();\n  const [isJoining, setIsJoining] = useState(false);\n  const [joinError, setJoinError] = useState<string | null>(null);\n  const [avatarUrl, setAvatarUrl] = useState<string>('');\n  const [coverImageUrl, setCoverImageUrl] = useState<string>('');\n  const [avatarError, setAvatarError] = useState(false);\n  const [coverError, setCoverError] = useState(false);\n\n  // Load and validate tribe data with metadata on mount\n  useEffect(() => {\n    if (!tribe) return;\n    \n    // Debug tribe data\n    console.log('TribeCardEnhanced processing tribe:', {\n      id: tribe.id,\n      name: tribe.name,\n      metadata: typeof tribe.metadata === 'string' ? (\n        tribe.metadata.length > 100 ? `${tribe.metadata.substring(0, 100)}...` : tribe.metadata\n      ) : 'Not a string',\n      memberCount: tribe.memberCount\n    });\n    \n    try {\n      // Get and set avatar URL with helper\n      const avatar = getTribeAvatar(tribe);\n      setAvatarUrl(avatar);\n      setAvatarError(false);\n      \n      // Get and set cover image URL with helper\n      const cover = getTribeCoverImage(tribe);\n      setCoverImageUrl(cover);\n      setCoverError(false);\n    } catch (error) {\n      console.error('Error loading tribe media:', error);\n    }\n  }, [tribe]);\n\n  const handleJoinTribe = async (e: React.MouseEvent) => {\n    e.stopPropagation(); // Prevent navigation to tribe page\n    \n    if (isJoining) return;\n    \n    setIsJoining(true);\n    setJoinError(null);\n    \n    try {\n      // Get privacy from helper function\n      const privacy = getTribePrivacy(tribe);\n      \n      if (privacy === 'public') {\n        await joinTribe(Number(tribe.id));\n      } else {\n        // For private tribes, we need to handle entry fee if applicable\n        const entryFee = tribe.entryFee || BigInt(0);\n        await requestToJoinTribe(Number(tribe.id), entryFee);\n      }\n      // Show success state or update UI\n    } catch (error) {\n      console.error('Failed to join tribe:', error);\n      setJoinError(error instanceof Error ? error.message : 'Failed to join tribe');\n    } finally {\n      setIsJoining(false);\n    }\n  };\n\n  // Define activity levels\n  const activityLevels = ['low', 'medium', 'high'] as const;\n  type ActivityLevel = typeof activityLevels[number];\n\n  // Calculate activity level based on recent posts and online members\n  const getActivityLevel = (): ActivityLevel => {\n    // Use memberCount from the tribe object directly, as it's required in the Tribe interface\n    const memberCount = tribe.memberCount || 0;\n    // These values aren't in the Tribe type, so set defaults\n    const onlineCount = 0; // This would need to come from a different source\n    const ratio = memberCount > 0 ? onlineCount / memberCount : 0;\n    \n    if (ratio > 0.3) return 'high';\n    if (ratio > 0.1) return 'medium';\n    return 'low';\n  };\n\n  const activityLevel = getActivityLevel();\n  \n  const activityColors = {\n    low: 'text-gray-400',\n    medium: 'text-yellow-500',\n    high: 'text-green-500'\n  };\n\n  // Get membership status using helper function\n  const { isMember, isPending, isAdmin } = getTribeMembershipStatus(tribe);\n\n  // Use helper functions to get metadata properties\n  const privacy = getTribePrivacy(tribe);\n  const description = getTribeDescription(tribe);\n  const topics = getTribeTopics(tribe);\n  \n  // Image error handlers\n  const handleAvatarError = () => {\n    console.warn(`Avatar load failed for tribe ${tribe.id}`);\n    setAvatarError(true);\n    setAvatarUrl('/images/default-avatar.png');\n  };\n  \n  const handleCoverError = () => {\n    console.warn(`Cover image load failed for tribe ${tribe.id}`);\n    setCoverError(true);\n    setCoverImageUrl('/images/default-cover.png');\n  };\n\n  return (\n    <Card \n      className=\"overflow-hidden hover:border-theme-primary/30 transition-colors cursor-pointer h-full flex flex-col\" \n      onClick={() => navigate(`/tribes/${tribe.id}`)}\n    >\n      {/* Cover Image */}\n      {coverImageUrl && !coverError && (\n        <div className=\"h-28 relative\">\n          <img \n            src={coverImageUrl} \n            alt={`${tribe.name} banner`}\n            className=\"w-full h-full object-cover\"\n            onError={handleCoverError}\n          />\n          \n          {/* Privacy Badge */}\n          {privacy === 'private' && (\n            <div className=\"absolute top-2 right-2 bg-black/60 text-white px-2 py-1 rounded-full text-xs flex items-center\">\n              <Lock className=\"w-3 h-3 mr-1\" />\n              Private\n            </div>\n          )}\n        </div>\n      )}\n      \n      <CardContent className=\"flex-1 flex flex-col px-4 py-3\">\n        {/* Avatar and Status */}\n        <div className=\"flex items-start\">\n          <div className=\"relative -mt-6 mr-3\">\n            <img \n              src={avatarUrl}\n              alt={tribe.name}\n              className=\"w-14 h-14 rounded-xl ring-2 ring-theme-bg shadow-lg bg-theme-bg\"\n              onError={handleAvatarError}\n            />\n            \n            {/* Membership Badge */}\n            {isMember && (\n              <div className=\"absolute -bottom-1 -right-1 bg-green-500 text-white p-1 rounded-full\">\n                <Check className=\"w-3 h-3\" />\n              </div>\n            )}\n          </div>\n          \n          <div className=\"flex-1 mt-1\">\n            <h3 className=\"font-bold text-lg text-white leading-tight flex items-center\">\n              {tribe.name}\n            </h3>\n            \n            {/* Stats */}\n            <div className=\"flex items-center space-x-3 mt-1 text-xs text-gray-400\">\n              <div className=\"flex items-center space-x-1\">\n                {privacy === 'public' ? (\n                  <Globe className=\"w-3.5 h-3.5\" />\n                ) : (\n                  <Lock className=\"w-3.5 h-3.5\" />\n                )}\n                <span>{privacy === 'public' ? 'Public' : 'Private'}</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <Users className=\"w-3.5 h-3.5\" />\n                <span>{tribe.memberCount.toLocaleString()}</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <MessageSquare className=\"w-3.5 h-3.5\" />\n                <span>0</span> {/* Default post count since it's not in the Tribe type */}\n              </div>\n              <div className={`flex items-center space-x-1 ${activityColors[activityLevel]}`}>\n                <Activity className=\"w-3.5 h-3.5\" />\n                <span className=\"capitalize\">{activityLevel}</span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Join Button */}\n          {showJoinButton && !isMember && !isPending && !isAdmin && (\n            <button\n              onClick={handleJoinTribe}\n              disabled={isJoining}\n              className={`\n                flex items-center rounded-lg px-3 py-1.5 text-sm font-medium \n                ${isJoining ? 'bg-gray-700 text-gray-400' : 'bg-theme-primary text-black hover:bg-theme-primary/90'}\n                transition-colors\n              `}\n            >\n              {isJoining ? (\n                <span>Joining...</span>\n              ) : (\n                <>\n                  <Plus className=\"w-4 h-4 mr-1\" />\n                  <span>Join</span>\n                </>\n              )}\n            </button>\n          )}\n          \n          {/* Pending Badge */}\n          {isPending && (\n            <Badge variant=\"outline\" className=\"border-yellow-500 text-yellow-500 ml-auto\">\n              Pending\n            </Badge>\n          )}\n        </div>\n\n        <p className=\"mt-3 text-gray-300 line-clamp-2 text-sm\">{description}</p>\n\n        <div className=\"mt-4 flex flex-wrap gap-2\">\n          {topics.length > 0 ? (\n            <>\n              {topics.slice(0, 3).map((topic) => (\n                <Badge \n                  key={topic.id}\n                  variant=\"secondary\"\n                  className=\"bg-gray-800/80 text-gray-300 text-xs\"\n                >\n                  {topic.name}\n                </Badge>\n              ))}\n              {topics.length > 3 && (\n                <Badge \n                  variant=\"secondary\"\n                  className=\"bg-gray-800/80 text-gray-300 text-xs\"\n                >\n                  +{topics.length - 3} more\n                </Badge>\n              )}\n            </>\n          ) : (\n            <Badge \n              variant=\"secondary\"\n              className=\"bg-gray-800/80 text-gray-300 text-xs\"\n            >\n              No topics\n            </Badge>\n          )}\n        </div>\n        \n        {/* Error Message */}\n        {joinError && (\n          <div className=\"mt-3 text-red-500 text-xs\">\n            {joinError}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n} ","import { useTribesData } from '../../hooks/useTribesData';\nimport { TribeCardEnhanced } from './TribeCardEnhanced';\nimport { useEffect } from 'react';\nimport { Tribe } from '../../types/tribe';\n\n// Define the ExtendedTribe interface to match TribeCardEnhanced expectations\n// but without extending Tribe to avoid type conflicts\ninterface ExtendedTribe {\n  id: string;\n  name: string;\n  metadata: string;\n  owner: `0x${string}`;\n  admins: `0x${string}`[];\n  memberCount: number;\n  createdAt: number;\n  joinType: number;\n  entryFee: string | number;\n  nftRequirements: any[];\n  privacy?: 'public' | 'private';\n  onlineCount?: number;\n  postCount?: number;\n  coverImage?: string;\n  avatar?: string;\n  isVerified?: boolean;\n  description?: string;\n  topics?: Array<{ id: string; name: string }>;\n  userMembershipStatus?: {\n    isMember?: boolean;\n    isPending?: boolean;\n    isAdmin?: boolean;\n  };\n}\n\n// Adapter function to convert Tribe to ExtendedTribe\nfunction adaptTribeToExtendedTribe(tribe: Tribe): ExtendedTribe {\n  return {\n    id: tribe.id,\n    name: tribe.name,\n    metadata: tribe.metadata,\n    owner: tribe.owner,\n    admins: tribe.admins,\n    memberCount: tribe.memberCount,\n    createdAt: tribe.createdAt,\n    joinType: tribe.joinType,\n    entryFee: tribe.entryFee.toString(), // Convert bigint to string\n    nftRequirements: tribe.nftRequirements,\n    privacy: 'public', // Default to public if not specified\n    onlineCount: 0,\n    postCount: 0,\n    description: '',\n    topics: [],\n    userMembershipStatus: {\n      isMember: false,\n      isPending: false,\n      isAdmin: false\n    }\n  };\n}\n\nexport function TribeList() {\n  const { tribes, isLoading: loading, error, refreshTribes } = useTribesData();\n\n  // Add debug logging \n  useEffect(() => {\n    console.log('TribeList - Tribes data:', { \n      tribes, \n      loading, \n      error, \n      tribesLength: tribes?.length,\n      tribesEmpty: !tribes?.length\n    });\n    \n    if (!tribes?.length && !loading && !error) {\n      console.log('TribeList - No tribes found, triggering refresh');\n      refreshTribes().catch(err => {\n        console.error('Failed to refresh tribes:', err);\n      });\n    }\n  }, [tribes, loading, error, refreshTribes]);\n\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {[...Array(6)].map((_, i) => (\n          <div key={i} className=\"animate-pulse bg-gray-800/30 rounded-xl h-48\" />\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    console.error('TribeList - Error loading tribes:', error);\n    return (\n      <div className=\"text-center text-gray-400 py-8\">\n        Failed to load tribes. Please try again later.\n        <pre className=\"mt-2 text-xs text-left bg-gray-800/30 p-2 rounded overflow-auto\">\n          {typeof error === 'string' ? error : JSON.stringify(error, null, 2)}\n        </pre>\n        <button \n          className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded\"\n          onClick={() => refreshTribes()}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  if (!tribes?.length) {\n    return (\n      <div className=\"text-center text-gray-400 py-8\">\n        No tribes found on this network.\n        <div className=\"mt-4\">\n          <button \n            className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n            onClick={() => refreshTribes()}\n          >\n            Refresh\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  console.log('TribeList - Rendering tribes:', tribes.map(t => ({ id: t.id, name: t.name })));\n  \n  // Adapt tribes to expected format\n  const extendedTribes = tribes.map(adaptTribeToExtendedTribe);\n  \n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n      {extendedTribes.map((tribe) => (\n        <TribeCardEnhanced key={tribe.id} tribe={tribe as any} />\n      ))}\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport { TribeList } from '../components/tribes/TribeList';\nimport { Plus, Search, Filter, Users, Sparkles } from 'lucide-react';\nimport { useTribesManagement } from '../hooks/useTribesManagement';\nimport { useNavigate } from 'react-router-dom';\n\nexport function Tribes() {\n  const navigate = useNavigate();\n  const { createTribe } = useTribesManagement();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [activeFilter, setActiveFilter] = useState<'all' | 'popular' | 'new' | 'joined'>('all');\n\n  const handleCreateTribe = () => {\n    // Navigate to create tribe page or open modal\n    navigate('/tribes/create');\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto px-4 py-8\">\n      {/* Hero Section */}\n      <div className=\"relative mb-10 rounded-2xl overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-900/90 to-purple-900/90 z-0\"></div>\n        <div className=\"absolute inset-0 bg-[url('/images/tribes-pattern.svg')] opacity-10 z-0\"></div>\n        \n        <div className=\"relative z-10 px-6 py-12 md:py-16 md:px-10\">\n          <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-3\">Discover Tribes</h1>\n          <p className=\"text-gray-300 text-lg max-w-2xl mb-6\">\n            Join communities of like-minded individuals, share ideas, and collaborate on projects that matter to you.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1 max-w-xl\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <Search className=\"h-5 w-5 text-gray-400\" />\n              </div>\n              <input\n                type=\"text\"\n                placeholder=\"Search tribes by name or description...\"\n                className=\"block w-full pl-10 pr-3 py-2.5 bg-gray-900/50 border border-gray-700/50 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n              />\n            </div>\n            \n            <button\n              onClick={handleCreateTribe}\n              className=\"flex items-center justify-center space-x-2 px-5 py-2.5 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors\"\n            >\n              <Plus className=\"w-5 h-5\" />\n              <span>Create Tribe</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex items-center justify-between mb-8\">\n        <div className=\"flex items-center space-x-2 overflow-x-auto scrollbar-hide\">\n          <button\n            onClick={() => setActiveFilter('all')}\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n              activeFilter === 'all'\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-800/30 text-gray-300 hover:bg-gray-800/50'\n            }`}\n          >\n            All Tribes\n          </button>\n          <button\n            onClick={() => setActiveFilter('popular')}\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors flex items-center space-x-2 ${\n              activeFilter === 'popular'\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-800/30 text-gray-300 hover:bg-gray-800/50'\n            }`}\n          >\n            <Sparkles className=\"w-4 h-4\" />\n            <span>Popular</span>\n          </button>\n          <button\n            onClick={() => setActiveFilter('new')}\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n              activeFilter === 'new'\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-800/30 text-gray-300 hover:bg-gray-800/50'\n            }`}\n          >\n            Newest\n          </button>\n          <button\n            onClick={() => setActiveFilter('joined')}\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors flex items-center space-x-2 ${\n              activeFilter === 'joined'\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-800/30 text-gray-300 hover:bg-gray-800/50'\n            }`}\n          >\n            <Users className=\"w-4 h-4\" />\n            <span>Joined</span>\n          </button>\n        </div>\n        \n        <button className=\"p-2 bg-gray-800/30 border border-gray-700/50 rounded-lg text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors\">\n          <Filter className=\"w-5 h-5\" />\n        </button>\n      </div>\n\n      {/* Tribes List */}\n      <TribeList />\n    </div>\n  );\n} ","import React, { useState, useMemo } from 'react';\n\ninterface FeedLayoutProps {\n  children: React.ReactNode;\n  leftSidebar?: React.ReactNode;\n  rightSidebar?: React.ReactNode;\n}\n\nexport function FeedLayout({ children, rightSidebar }: FeedLayoutProps) {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"w-full max-w-[1200px] mx-auto px-4 sm:px-6 py-8\">\n        <div className=\"flex gap-8\">\n\n          {/* Main Content */}\n          <div className=\"flex-1 min-w-0 max-w-[800px] mx-auto lg:mx-0\">\n            {children}\n          </div>\n\n          {/* Right Sidebar */}\n          {rightSidebar && (\n            <div className=\"hidden lg:block w-[380px] flex-shrink-0\">\n              {rightSidebar}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n} ","import { Link } from 'react-router-dom';\nimport { Hash, Crown, Shield } from 'lucide-react';\nimport { Card, CardContent } from '../common/ui';\nimport type { Topic, TribeMember } from '../../types/tribe';\n\ninterface TribeSidebarProps {\n  members: TribeMember[];\n  topics: Topic[];\n  onTopicSelect?: (topic: Topic) => void;\n  selectedTopicId?: string;\n}\n\nexport function TribeSidebar({\n  members = [],\n  topics = [],\n  onTopicSelect,\n  selectedTopicId,\n}: TribeSidebarProps) {\n  // Ensure members and topics are arrays\n  const safeMembers = Array.isArray(members) ? members : [];\n  const safeTopics = Array.isArray(topics) ? topics : [];\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Top Members */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <h3 className=\"text-lg font-medium mb-4 flex items-center gap-2\">\n            <Crown className=\"w-4 h-4 text-green-500\" />\n            Top Members\n          </h3>\n          <div className=\"space-y-2\">\n            {safeMembers.slice(0, 5).map((member) => (\n              <Link\n                key={member.id}\n                to={`/profile/${member.username}`}\n                className=\"flex items-center space-x-3 group p-2 hover:bg-green-100/20 rounded-lg transition-colors\"\n              >\n                <div className=\"relative flex-shrink-0\">\n                  <img\n                    src={member.avatar}\n                    alt={member.username}\n                    className=\"w-10 h-10 rounded-full object-cover\"\n                  />\n                  {member.role === 'admin' && (\n                    <Shield className=\"w-3.5 h-3.5 text-green-500 absolute -right-0.5 -bottom-0.5 bg-black rounded-full p-0.5\" />\n                  )}\n                </div>\n                <div className=\"flex-grow min-w-0 pr-1\">\n                  <p className=\"font-medium text-sm group-hover:text-green-500 truncate max-w-full\">\n                    @{member.username}\n                  </p>\n                  {member.role && (\n                    <p className=\"text-xs text-gray-400 truncate max-w-full\">\n                      {member.role === 'admin' ? 'Admin' : member.role}\n                    </p>\n                  )}\n                </div>\n              </Link>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Topics */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <h3 className=\"text-lg font-medium mb-4 flex items-center gap-2\">\n            <Hash className=\"w-4 h-4 text-green-500\" />\n            Topics\n          </h3>\n          <div className=\"space-y-2\">\n            {safeTopics.map((topic) => (\n              <button\n                key={topic.id}\n                onClick={() => onTopicSelect?.(topic)}\n                className={`w-full flex items-center space-x-2 px-3 py-2 rounded-lg transition-colors ${\n                  selectedTopicId === topic.id\n                    ? 'bg-green-500 text-white'\n                    : 'hover:bg-green-100/20 text-gray-400 hover:text-white'\n                }`}\n              >\n                <Hash className=\"w-4 h-4 flex-shrink-0\" />\n                <span className=\"text-sm truncate text-left\">{topic.name}</span>\n                {topic.postCount && (\n                  <span className={`text-xs ml-auto flex-shrink-0 px-1.5 py-0.5 rounded-full ${\n                    selectedTopicId === topic.id\n                      ? 'bg-green-600 text-white' \n                      : 'bg-green-200/10 text-gray-400'\n                  }`}>\n                    {topic.postCount}\n                  </span>\n                )}\n              </button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","import React from 'react';\nimport PostCreator from './post/PostCreator';\n\ninterface CreatePostProps {\n  isOpen: boolean;\n  onClose: () => void;\n  tribeId?: string; // Make tribeId optional for backward compatibility\n  onSuccess?: (postId: string) => void;\n}\n\n/**\n * Backward-compatible CreatePost that uses the new PostCreator component\n */\nexport function CreatePost({ isOpen, onClose, tribeId }: CreatePostProps) {\n  return (\n    <PostCreator \n      mode=\"dialog\"\n      isOpen={isOpen}\n      onClose={onClose}\n      tribeId={tribeId || ''}\n    />\n  );\n}","import { useState, useCallback, useEffect, useRef } from 'react';\nimport { useAccount } from 'wagmi';\nimport { Post } from '../types/post';\nimport { PostsService } from '../services/posts.service';\nimport { useNetwork } from './useNetwork';\n\nexport interface UsePostsManagementReturnType {\n  posts: Record<string, Post>;\n  loading: boolean;\n  error: Error | null;\n  fetchPost: (postId: string) => Promise<Post | null>;\n  fetchPostsByTribe: (tribeId: string) => Promise<Post[]>;\n  fetchFeed: () => Promise<Post[]>;\n}\n\nexport function usePostsManagement(): UsePostsManagementReturnType {\n  const { address } = useAccount();\n  const { chainId } = useNetwork();\n  const [posts, setPosts] = useState<Record<string, Post>>({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const postsServiceRef = useRef<PostsService | null>(null);\n\n  // Initialize PostsService\n  useEffect(() => {\n    postsServiceRef.current = PostsService.getInstance();\n    console.log('PostsService initialized:', postsServiceRef.current);\n  }, []);\n\n  // Ensure we have the PostsService instance\n  const getPostsService = () => {\n    if (!postsServiceRef.current) {\n      postsServiceRef.current = PostsService.getInstance();\n    }\n    return postsServiceRef.current;\n  };\n\n  const fetchPost = useCallback(async (postId: string) => {\n    try {\n      setLoading(true);\n      const postsService = getPostsService();\n      console.log(`Fetching post with ID: ${postId}`);\n      const post = await postsService.getPost(postId);\n      if (post) {\n        console.log('Post retrieved:', post);\n        setPosts(prev => ({ ...prev, [post.id]: post }));\n      } else {\n        console.log('No post found with ID:', postId);\n      }\n      return post;\n    } catch (err) {\n      console.error('Error fetching post:', err);\n      const error = err instanceof Error ? err : new Error('Failed to fetch post');\n      setError(error);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const fetchPostsByTribe = useCallback(async (tribeId: string) => {\n    try {\n      setLoading(true);\n      const postsService = getPostsService();\n      console.log(`Fetching posts for tribe: ${tribeId}`);\n      const tribePosts = await postsService.getPostsByTribe(tribeId);\n      console.log(`Retrieved ${tribePosts.length} posts for tribe ${tribeId}:`, tribePosts);\n      const postsMap = tribePosts.reduce((acc, post) => {\n        acc[post.id] = post;\n        return acc;\n      }, {} as Record<string, Post>);\n      setPosts(prev => ({ ...prev, ...postsMap }));\n      return tribePosts;\n    } catch (err) {\n      console.error('Error fetching tribe posts:', err);\n      const error = err instanceof Error ? err : new Error('Failed to fetch tribe posts');\n      setError(error);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const fetchFeed = useCallback(async () => {\n    if (!address) {\n      console.error('Cannot fetch feed: Wallet not connected');\n      setError(new Error('Wallet not connected'));\n      return [];\n    }\n\n    try {\n      setLoading(true);\n      const postsService = getPostsService();\n      console.log(`Fetching feed for address: ${address}`);\n      const feedPosts = await postsService.getUserFeed(address);\n      console.log(`Retrieved ${feedPosts.length} posts for feed:`, feedPosts);\n      const postsMap = feedPosts.reduce((acc, post) => {\n        acc[post.id] = post;\n        return acc;\n      }, {} as Record<string, Post>);\n      setPosts(prev => ({ ...prev, ...postsMap }));\n      return feedPosts;\n    } catch (err) {\n      console.error('Error fetching feed:', err);\n      const error = err instanceof Error ? err : new Error('Failed to fetch feed');\n      setError(error);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, [address]);\n\n  return {\n    posts,\n    loading,\n    error,\n    fetchPost,\n    fetchPostsByTribe,\n    fetchFeed\n  };\n} ","/**\n * Generates an avatar URL from an Ethereum address using DiceBear API\n * @param address The Ethereum address to generate an avatar for\n * @returns A URL to the generated avatar\n */\nexport function generateAvatarFromAddress(address: string | undefined | null): string {\n  // Handle undefined or null address\n  if (!address) {\n    console.warn('No address provided for avatar generation, using default');\n    return `https://api.dicebear.com/7.x/identicon/svg?seed=default&backgroundColor=transparent`;\n  }\n\n  // Remove '0x' prefix if present and take first 8 characters as seed\n  const seed = address.startsWith('0x') ? address.substring(2, 10) : address.substring(0, 8);\n  \n  // Use DiceBear API to generate a consistent avatar\n  return `https://api.dicebear.com/7.x/identicon/svg?seed=${seed}&backgroundColor=transparent`;\n} ","import React from 'react';\nimport { generateAvatarFromAddress } from '../../utils/avatar';\n\ninterface UserAvatarProps {\n  address?: string;\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n  showUsername?: boolean;\n}\n\nconst UserAvatar: React.FC<UserAvatarProps> = ({ address, className = '' }) => {\n  const avatarUrl = React.useMemo(() => generateAvatarFromAddress(address), [address]);\n  \n  return (\n    <div \n      className={`relative overflow-hidden rounded-full bg-neutral-200 dark:bg-neutral-800 ${className}`}\n      title={address || 'Unknown User'}\n    >\n      <img\n        src={avatarUrl}\n        alt={`Avatar for ${address || 'Unknown User'}`}\n        className=\"w-full h-full object-cover\"\n        loading=\"lazy\"\n      />\n      <div className=\"absolute inset-0 ring-1 ring-inset ring-black/10 dark:ring-white/10 rounded-full\" />\n    </div>\n  );\n};\n\nexport default UserAvatar; ","import { cva } from 'class-variance-authority';\nimport { colors } from '../../../theme/foundations/colors';\n\n// Type colors - Maps post types to consistent colors \nconst TYPE_COLORS = {\n  text: {\n    border: 'border-neutral-800 hover:border-neutral-700',\n    accent: 'bg-neutral-800/30 text-neutral-200',\n    icon: 'text-neutral-400',\n  },\n  image: {\n    border: 'border-blue-900 hover:border-blue-800',\n    accent: 'bg-blue-900/30 text-blue-200',\n    icon: 'text-blue-400',\n  },\n  video: {\n    border: 'border-purple-900 hover:border-purple-800',\n    accent: 'bg-purple-900/30 text-purple-200',\n    icon: 'text-purple-400',\n  },\n  link: {\n    border: 'border-green-900 hover:border-green-800',\n    accent: 'bg-green-900/30 text-green-200',\n    icon: 'text-green-400',\n  },\n  event: {\n    border: 'border-yellow-900 hover:border-yellow-800',\n    accent: 'bg-yellow-900/30 text-yellow-200',\n    icon: 'text-yellow-400',\n  },\n  poll: {\n    border: 'border-orange-900 hover:border-orange-800',\n    accent: 'bg-orange-900/30 text-orange-200',\n    icon: 'text-orange-400',\n  },\n  bounty: {\n    border: 'border-emerald-900 hover:border-emerald-800',\n    accent: 'bg-emerald-900/30 text-emerald-200',\n    icon: 'text-emerald-400',\n  },\n  project: {\n    border: 'border-indigo-900 hover:border-indigo-800',\n    accent: 'bg-indigo-900/30 text-indigo-200',\n    icon: 'text-indigo-400',\n  },\n};\n\n// Base post container styles with more refined styling\nexport const postContainerStyles = cva(\n  'relative w-full rounded-xl border p-5 shadow-md transition-all hover:shadow-lg bg-neutral-900 text-white backdrop-blur-sm',\n  {\n    variants: {\n      type: {\n        text: TYPE_COLORS.text.border,\n        image: TYPE_COLORS.image.border,\n        video: TYPE_COLORS.video.border,\n        link: TYPE_COLORS.link.border,\n        event: TYPE_COLORS.event.border,\n        poll: TYPE_COLORS.poll.border,\n        bounty: TYPE_COLORS.bounty.border,\n        project: TYPE_COLORS.project.border,\n      },\n    },\n    defaultVariants: {\n      type: 'text',\n    },\n  }\n);\n\n// Badge for post type indicator\nexport const postTypeBadgeStyles = cva(\n  'absolute top-4 right-4 inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium',\n  {\n    variants: {\n      type: {\n        text: TYPE_COLORS.text.accent,\n        image: TYPE_COLORS.image.accent,\n        video: TYPE_COLORS.video.accent,\n        link: TYPE_COLORS.link.accent,\n        event: TYPE_COLORS.event.accent,\n        poll: TYPE_COLORS.poll.accent,\n        bounty: TYPE_COLORS.bounty.accent,\n        project: TYPE_COLORS.project.accent,\n      }\n    },\n    defaultVariants: {\n      type: 'text',\n    },\n  }\n);\n\n// Icon container for post type\nexport const postTypeIconStyles = cva(\n  'flex items-center justify-center w-10 h-10 rounded-full',\n  {\n    variants: {\n      type: {\n        text: TYPE_COLORS.text.accent,\n        image: TYPE_COLORS.image.accent,\n        video: TYPE_COLORS.video.accent,\n        link: TYPE_COLORS.link.accent,\n        event: TYPE_COLORS.event.accent,\n        poll: TYPE_COLORS.poll.accent,\n        bounty: TYPE_COLORS.bounty.accent,\n        project: TYPE_COLORS.project.accent,\n      }\n    },\n    defaultVariants: {\n      type: 'text',\n    },\n  }\n);\n\n// Tag styles with refined design\nexport const tagStyles = cva(\n  'inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium transition-colors',\n  {\n    variants: {\n      variant: {\n        default: 'bg-neutral-800 text-neutral-200 hover:bg-neutral-700',\n        blue: 'bg-blue-900/50 text-blue-200 hover:bg-blue-800/50',\n        purple: 'bg-purple-900/50 text-purple-200 hover:bg-purple-800/50',\n        green: 'bg-green-900/50 text-green-200 hover:bg-green-800/50',\n        yellow: 'bg-yellow-900/50 text-yellow-200 hover:bg-yellow-800/50',\n        orange: 'bg-orange-900/50 text-orange-200 hover:bg-orange-800/50',\n        red: 'bg-red-900/50 text-red-200 hover:bg-red-800/50',\n        indigo: 'bg-indigo-900/50 text-indigo-200 hover:bg-indigo-800/50',\n        emerald: 'bg-emerald-900/50 text-emerald-200 hover:bg-emerald-800/50',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\n// Action button styles with improved hover states\nexport const actionButtonStyles = cva(\n  'inline-flex items-center justify-center rounded-md p-2 text-sm font-medium transition-colors',\n  {\n    variants: {\n      variant: {\n        default: 'text-neutral-400 hover:bg-neutral-800 hover:text-white',\n        primary: 'text-primary hover:bg-primary/20',\n        destructive: 'text-red-400 hover:bg-red-900/20 hover:text-red-200',\n        success: 'text-green-400 hover:bg-green-900/20 hover:text-green-200',\n      },\n      active: {\n        true: '',\n        false: '',\n      }\n    },\n    compoundVariants: [\n      {\n        variant: 'default',\n        active: true,\n        className: 'text-white bg-neutral-800',\n      },\n      {\n        variant: 'primary',\n        active: true,\n        className: 'text-white bg-primary/20',\n      },\n      {\n        variant: 'destructive',\n        active: true,\n        className: 'text-red-200 bg-red-900/20',\n      },\n      {\n        variant: 'success',\n        active: true,\n        className: 'text-green-200 bg-green-900/20',\n      },\n    ],\n    defaultVariants: {\n      variant: 'default',\n      active: false,\n    },\n  }\n);\n\n// Post metadata styles with improved spacing\nexport const metadataStyles = 'flex items-center gap-2 text-sm text-neutral-400 mt-2';\n\n// Post content styles with better readability\nexport const contentStyles = 'mt-4 text-neutral-100 whitespace-pre-wrap break-words leading-relaxed text-base';\n\n// Media container styles with subtle shadow\nexport const mediaContainerStyles = 'mt-4 overflow-hidden rounded-lg border border-neutral-800 shadow-sm';\n\n// Author styles with improved spacing\nexport const authorStyles = 'flex items-center gap-3';\nexport const authorNameStyles = 'font-semibold text-white hover:text-accent transition-colors';\nexport const authorAvatarStyles = 'h-10 w-10 rounded-full bg-neutral-800';\n\n// Timestamp styles\nexport const timestampStyles = 'text-sm text-neutral-400';\n\n// Section divider\nexport const dividerStyles = 'border-t border-neutral-800 my-4';\n\n// Button styles\nexport const buttonStyles = cva(\n  'inline-flex items-center justify-center rounded-lg px-4 py-2 font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-neutral-900',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-accent text-black hover:bg-accent/90 focus:ring-accent/50',\n        secondary: 'bg-neutral-800 text-white hover:bg-neutral-700 focus:ring-neutral-400/30',\n        outline: 'border border-neutral-700 text-white hover:bg-neutral-800 focus:ring-neutral-400/30',\n        destructive: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-400/30',\n        ghost: 'text-white hover:bg-neutral-800 focus:ring-neutral-400/30',\n      },\n      size: {\n        sm: 'text-xs px-2.5 py-1.5',\n        md: 'text-sm px-4 py-2',\n        lg: 'text-base px-5 py-2.5',\n      },\n      fullWidth: {\n        true: 'w-full',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n      size: 'md',\n    },\n  }\n); ","import React from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Post } from '../../../types/post';\nimport UserAvatar from '../../user/UserAvatar';\nimport { \n  postContainerStyles, \n  tagStyles, \n  actionButtonStyles,\n  metadataStyles,\n  contentStyles,\n  authorStyles,\n  authorNameStyles,\n  timestampStyles\n} from '../styles/post.styles';\nimport { Heart, MessageCircle, Share2, Flag } from 'lucide-react';\n\ninterface TextPostProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\nconst TextPost: React.FC<TextPostProps> = ({\n  post,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true\n}) => {\n  const handleClick = () => {\n    if (onClick) {\n      onClick(post.id);\n    }\n  };\n\n  const formattedDate = React.useMemo(() => {\n    try {\n      return formatDistanceToNow(new Date(post.createdAt), { addSuffix: true });\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return 'some time ago';\n    }\n  }, [post.createdAt]);\n\n  // Map tag colors consistently based on tag content\n  const getTagVariant = (tag: string): \"default\" | \"blue\" | \"purple\" | \"green\" | \"yellow\" | \"orange\" => {\n    const variants = [\"blue\", \"purple\", \"green\", \"yellow\", \"orange\"] as const;\n    const hash = tag.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return variants[hash % variants.length];\n  };\n\n  return (\n    <article \n      className={postContainerStyles({ type: 'text' })}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      {/* Author section */}\n      <div className={authorStyles}>\n        <UserAvatar \n          address={post.author} \n          className=\"h-10 w-10\"\n        />\n        <div className=\"flex flex-col\">\n          <a \n            href={`/profile/${post.author}`} \n            className={authorNameStyles}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {post.author}\n          </a>\n          <time className={timestampStyles}>\n            {formattedDate}\n          </time>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className={contentStyles}>\n        {post.content}\n      </div>\n\n      {/* Tags */}\n      {post.metadata?.tags && post.metadata.tags.length > 0 && (\n        <div className=\"mt-3 flex flex-wrap gap-2\">\n          {post.metadata.tags.map((tag, index) => (\n            <span \n              key={index} \n              className={tagStyles({ variant: getTagVariant(tag) })}\n            >\n              {tag}\n            </span>\n          ))}\n        </div>\n      )}\n\n      {/* Actions */}\n      {showActions && (\n        <div className=\"mt-4 flex items-center justify-between border-t border-neutral-700 pt-3\">\n          <div className=\"flex items-center gap-2\">\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onLike?.();\n              }}\n            >\n              <Heart className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.likeCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onComment?.();\n              }}\n            >\n              <MessageCircle className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.commentCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onShare?.();\n              }}\n            >\n              <Share2 className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.shareCount || 0}</span>\n            </button>\n          </div>\n          <button \n            className={actionButtonStyles({ variant: 'destructive' })}\n            onClick={(e) => {\n              e.stopPropagation();\n              onReport?.();\n            }}\n          >\n            <Flag className=\"h-4 w-4\" />\n          </button>\n        </div>\n      )}\n    </article>\n  );\n};\n\nexport default TextPost; ","import React from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Post } from '../../../types/post';\nimport UserAvatar from '../../user/UserAvatar';\nimport { \n  postContainerStyles, \n  tagStyles, \n  actionButtonStyles,\n  metadataStyles,\n  contentStyles,\n  authorStyles,\n  authorNameStyles,\n  timestampStyles,\n  mediaContainerStyles\n} from '../styles/post.styles';\nimport { Heart, MessageCircle, Share2, Flag, Maximize2 } from 'lucide-react';\n\ninterface ImagePostProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\nconst ImagePost: React.FC<ImagePostProps> = ({\n  post,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true\n}) => {\n  const [isImageExpanded, setIsImageExpanded] = React.useState(false);\n\n  const handleClick = () => {\n    if (onClick) {\n      onClick(post.id);\n    }\n  };\n\n  const handleImageClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsImageExpanded(!isImageExpanded);\n  };\n\n  const formattedDate = React.useMemo(() => {\n    try {\n      return formatDistanceToNow(new Date(post.createdAt), { addSuffix: true });\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return 'some time ago';\n    }\n  }, [post.createdAt]);\n\n  // Get the first image from media array\n  const mainImage = post.metadata?.media?.[0];\n\n  // Map tag colors consistently based on tag content\n  const getTagVariant = (tag: string): \"default\" | \"blue\" | \"purple\" | \"green\" | \"yellow\" | \"orange\" => {\n    const variants = [\"blue\", \"purple\", \"green\", \"yellow\", \"orange\"] as const;\n    const hash = tag.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return variants[hash % variants.length];\n  };\n\n  return (\n    <article \n      className={postContainerStyles({ type: 'image' })}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      {/* Author section */}\n      <div className={authorStyles}>\n        <UserAvatar \n          address={post.author} \n          className=\"h-10 w-10\"\n        />\n        <div className=\"flex flex-col\">\n          <a \n            href={`/profile/${post.author}`} \n            className={authorNameStyles}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {post.author}\n          </a>\n          <time className={timestampStyles}>\n            {formattedDate}\n          </time>\n        </div>\n      </div>\n\n      {/* Title */}\n      {post.metadata?.title && (\n        <h3 className=\"text-lg font-semibold mt-3 text-white\">\n          {post.metadata.title}\n        </h3>\n      )}\n\n      {/* Content */}\n      {post.content && (\n        <div className={contentStyles}>\n          {post.content}\n        </div>\n      )}\n\n      {/* Image */}\n      {mainImage && (\n        <div \n          className={`${mediaContainerStyles} relative group cursor-pointer`}\n          onClick={handleImageClick}\n        >\n          <div className=\"relative aspect-video w-full overflow-hidden\">\n            <img\n              src={mainImage.url}\n              alt={post.metadata?.title || 'Post image'}\n              className=\"w-full h-full object-cover transition-transform duration-200 group-hover:scale-105\"\n              loading=\"lazy\"\n            />\n          </div>\n          <button \n            className=\"absolute top-2 right-2 p-1 rounded-full bg-black/50 text-white opacity-0 group-hover:opacity-100 transition-opacity\"\n            onClick={(e) => {\n              e.stopPropagation();\n              setIsImageExpanded(true);\n            }}\n          >\n            <Maximize2 className=\"h-4 w-4\" />\n          </button>\n        </div>\n      )}\n\n      {/* Tags */}\n      {post.metadata?.tags && post.metadata.tags.length > 0 && (\n        <div className=\"mt-3 flex flex-wrap gap-2\">\n          {post.metadata.tags.map((tag, index) => (\n            <span \n              key={index} \n              className={tagStyles({ variant: getTagVariant(tag) })}\n            >\n              {tag}\n            </span>\n          ))}\n        </div>\n      )}\n\n      {/* Actions */}\n      {showActions && (\n        <div className=\"mt-4 flex items-center justify-between border-t border-neutral-700 pt-3\">\n          <div className=\"flex items-center gap-2\">\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onLike?.();\n              }}\n            >\n              <Heart className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.likeCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onComment?.();\n              }}\n            >\n              <MessageCircle className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.commentCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onShare?.();\n              }}\n            >\n              <Share2 className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.shareCount || 0}</span>\n            </button>\n          </div>\n          <button \n            className={actionButtonStyles({ variant: 'destructive' })}\n            onClick={(e) => {\n              e.stopPropagation();\n              onReport?.();\n            }}\n          >\n            <Flag className=\"h-4 w-4\" />\n          </button>\n        </div>\n      )}\n\n      {/* Image Modal */}\n      {isImageExpanded && mainImage && (\n        <div \n          className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/80\"\n          onClick={() => setIsImageExpanded(false)}\n        >\n          <div className=\"relative max-h-[90vh] max-w-[90vw]\">\n            <img\n              src={mainImage.url}\n              alt={post.metadata?.title || 'Post image'}\n              className=\"max-h-[90vh] max-w-[90vw] object-contain\"\n              loading=\"lazy\"\n            />\n            <button \n              className=\"absolute top-4 right-4 p-2 rounded-full bg-black/50 text-white\"\n              onClick={() => setIsImageExpanded(false)}\n            >\n              <Maximize2 className=\"h-6 w-6\" />\n            </button>\n          </div>\n        </div>\n      )}\n    </article>\n  );\n};\n\nexport default ImagePost; ","import React from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Post } from '../../../types/post';\nimport UserAvatar from '../../user/UserAvatar';\nimport { \n  postContainerStyles, \n  tagStyles, \n  actionButtonStyles,\n  metadataStyles,\n  contentStyles,\n  authorStyles,\n  authorNameStyles,\n  timestampStyles,\n  mediaContainerStyles\n} from '../styles/post.styles';\nimport { Heart, MessageCircle, Share2, Flag, Play, Pause, Volume2, VolumeX } from 'lucide-react';\n\ninterface VideoPostProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\nconst VideoPost: React.FC<VideoPostProps> = ({\n  post,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true\n}) => {\n  const videoRef = React.useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [isMuted, setIsMuted] = React.useState(true);\n\n  const handleClick = () => {\n    if (onClick) {\n      onClick(post.id);\n    }\n  };\n\n  const handlePlayPause = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (videoRef.current) {\n      if (isPlaying) {\n        videoRef.current.pause();\n      } else {\n        videoRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const handleMuteToggle = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (videoRef.current) {\n      videoRef.current.muted = !isMuted;\n      setIsMuted(!isMuted);\n    }\n  };\n\n  const formattedDate = React.useMemo(() => {\n    try {\n      return formatDistanceToNow(new Date(post.createdAt), { addSuffix: true });\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return 'some time ago';\n    }\n  }, [post.createdAt]);\n\n  // Get the first video from media array\n  const mainVideo = post.metadata?.media?.find(m => m.type === 'video');\n\n  // Map tag colors consistently based on tag content\n  const getTagVariant = (tag: string): \"default\" | \"blue\" | \"purple\" | \"green\" | \"yellow\" | \"orange\" => {\n    const variants = [\"blue\", \"purple\", \"green\", \"yellow\", \"orange\"] as const;\n    const hash = tag.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return variants[hash % variants.length];\n  };\n\n  return (\n    <article \n      className={postContainerStyles({ type: 'video' })}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      {/* Author section */}\n      <div className={authorStyles}>\n        <UserAvatar \n          address={post.author} \n          className=\"h-10 w-10\"\n        />\n        <div className=\"flex flex-col\">\n          <a \n            href={`/profile/${post.author}`} \n            className={authorNameStyles}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {post.author}\n          </a>\n          <time className={timestampStyles}>\n            {formattedDate}\n          </time>\n        </div>\n      </div>\n\n      {/* Content */}\n      {post.content && (\n        <div className={contentStyles}>\n          {post.content}\n        </div>\n      )}\n\n      {/* Video */}\n      {mainVideo && (\n        <div className={`${mediaContainerStyles} relative group`}>\n          <video\n            ref={videoRef}\n            src={mainVideo.url}\n            className=\"w-full aspect-video object-cover\"\n            loop\n            muted={isMuted}\n            playsInline\n            onClick={(e) => e.stopPropagation()}\n          />\n          <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center\">\n            <div className=\"flex items-center gap-4\">\n              <button\n                className=\"p-2 rounded-full bg-black/50 text-white hover:bg-black/70 transition-colors\"\n                onClick={handlePlayPause}\n              >\n                {isPlaying ? (\n                  <Pause className=\"h-6 w-6\" />\n                ) : (\n                  <Play className=\"h-6 w-6\" />\n                )}\n              </button>\n              <button\n                className=\"p-2 rounded-full bg-black/50 text-white hover:bg-black/70 transition-colors\"\n                onClick={handleMuteToggle}\n              >\n                {isMuted ? (\n                  <VolumeX className=\"h-6 w-6\" />\n                ) : (\n                  <Volume2 className=\"h-6 w-6\" />\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Tags */}\n      {post.metadata?.tags && post.metadata.tags.length > 0 && (\n        <div className=\"mt-3 flex flex-wrap gap-2\">\n          {post.metadata.tags.map((tag, index) => (\n            <span \n              key={index} \n              className={tagStyles({ variant: getTagVariant(tag) })}\n            >\n              {tag}\n            </span>\n          ))}\n        </div>\n      )}\n\n      {/* Actions */}\n      {showActions && (\n        <div className=\"mt-4 flex items-center justify-between border-t border-neutral-200 pt-3\">\n          <div className=\"flex items-center gap-2\">\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onLike?.();\n              }}\n            >\n              <Heart className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.likeCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onComment?.();\n              }}\n            >\n              <MessageCircle className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.commentCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onShare?.();\n              }}\n            >\n              <Share2 className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.shareCount || 0}</span>\n            </button>\n          </div>\n          <button \n            className={actionButtonStyles({ variant: 'destructive' })}\n            onClick={(e) => {\n              e.stopPropagation();\n              onReport?.();\n            }}\n          >\n            <Flag className=\"h-4 w-4\" />\n          </button>\n        </div>\n      )}\n    </article>\n  );\n};\n\nexport default VideoPost; ","import React from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Post } from '../../../types/post';\nimport UserAvatar from '../../user/UserAvatar';\nimport { \n  postContainerStyles, \n  tagStyles, \n  actionButtonStyles,\n  metadataStyles,\n  contentStyles,\n  authorStyles,\n  authorNameStyles,\n  timestampStyles,\n  mediaContainerStyles\n} from '../styles/post.styles';\nimport { Heart, MessageCircle, Share2, Flag, ExternalLink } from 'lucide-react';\n\ninterface LinkPostProps {\n  post: Post | any;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\nconst LinkPost: React.FC<LinkPostProps> = ({\n  post,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true\n}) => {\n  const handleClick = () => {\n    if (onClick) {\n      onClick(post.id);\n    }\n  };\n\n  const handleLinkClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (post.metadata?.link) {\n      window.open(post.metadata.link, '_blank', 'noopener,noreferrer');\n    }\n  };\n\n  const formattedDate = React.useMemo(() => {\n    try {\n      return formatDistanceToNow(new Date(post.createdAt), { addSuffix: true });\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return 'some time ago';\n    }\n  }, [post.createdAt]);\n\n  // Map tag colors consistently based on tag content\n  const getTagVariant = (tag: string): \"default\" | \"blue\" | \"purple\" | \"green\" | \"yellow\" | \"orange\" => {\n    const variants = [\"blue\", \"purple\", \"green\", \"yellow\", \"orange\"] as const;\n    const hash = tag.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return variants[hash % variants.length];\n  };\n\n  return (\n    <article \n      className={postContainerStyles({ type: 'link' })}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      {/* Author section */}\n      <div className={authorStyles}>\n        <UserAvatar \n          address={post.author} \n          className=\"h-10 w-10\"\n        />\n        <div className=\"flex flex-col\">\n          <a \n            href={`/profile/${post.author}`} \n            className={authorNameStyles}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {post.author}\n          </a>\n          <time className={timestampStyles}>\n            {formattedDate}\n          </time>\n        </div>\n      </div>\n\n      {/* Content */}\n      {post.content && (\n        <div className={contentStyles}>\n          {post.content}\n        </div>\n      )}\n\n      {/* Link Preview */}\n      {post.metadata?.link && (\n        <div \n          className={`${mediaContainerStyles} group cursor-pointer hover:border-neutral-300 transition-colors`}\n          onClick={handleLinkClick}\n        >\n          <div className=\"p-4\">\n            {post.metadata.title && (\n              <h3 className=\"text-lg font-semibold mb-2 group-hover:text-primary transition-colors\">\n                {post.metadata.title}\n              </h3>\n            )}\n            {post.metadata.description && (\n              <p className=\"text-neutral-600 line-clamp-2\">\n                {post.metadata.description}\n              </p>\n            )}\n            <div className=\"mt-2 flex items-center text-neutral-500 text-sm\">\n              <ExternalLink className=\"h-4 w-4 mr-1\" />\n              <span className=\"truncate\">\n                {post.metadata.link}\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Tags */}\n      {post.metadata?.tags && post.metadata.tags.length > 0 && (\n        <div className=\"mt-3 flex flex-wrap gap-2\">\n          {post.metadata.tags.map((tag: string, index: number) => (\n            <span \n              key={index} \n              className={tagStyles({ variant: getTagVariant(tag) })}\n            >\n              {tag}\n            </span>\n          ))}\n        </div>\n      )}\n\n      {/* Actions */}\n      {showActions && (\n        <div className=\"mt-4 flex items-center justify-between border-t border-neutral-200 pt-3\">\n          <div className=\"flex items-center gap-2\">\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onLike?.();\n              }}\n            >\n              <Heart className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.likeCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onComment?.();\n              }}\n            >\n              <MessageCircle className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.commentCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onShare?.();\n              }}\n            >\n              <Share2 className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.shareCount || 0}</span>\n            </button>\n          </div>\n          <button \n            className={actionButtonStyles({ variant: 'destructive' })}\n            onClick={(e) => {\n              e.stopPropagation();\n              onReport?.();\n            }}\n          >\n            <Flag className=\"h-4 w-4\" />\n          </button>\n        </div>\n      )}\n    </article>\n  );\n};\n\nexport default LinkPost; ","import { Post } from './post';\n\n/**\n * Blockchain Event data matching the EventController contract structure\n */\nexport interface BlockchainEvent {\n  metadataURI: string;  // IPFS URI containing event details\n  organizer: string;    // Address of event organizer\n  maxTickets: number;   // Maximum number of tickets available\n  ticketsSold: number;  // Number of tickets already sold\n  price: bigint;        // Price in wei\n  active: boolean;      // Whether the event is active or cancelled\n}\n\n/**\n * Represents an event ticket purchase on the blockchain\n */\nexport interface EventTicket {\n  eventId: number;      // Blockchain event ID\n  tokenId: number;      // NFT token ID\n  owner: string;        // Ticket owner address\n  purchasedAt: number;  // Timestamp when ticket was purchased\n  used: boolean;        // Whether the ticket has been used\n}\n\n/**\n * Represents a speaker at an event\n */\nexport interface EventSpeaker {\n  name: string;\n  role?: string;\n  avatar?: string;\n  bio?: string;\n  social?: {\n    twitter?: string;\n    linkedin?: string;\n    website?: string;\n  };\n}\n\n/**\n * Represents an agenda item for an event\n */\nexport interface EventAgendaItem {\n  title: string;\n  time?: string;\n  description?: string;\n  speaker?: string; // Reference to a speaker name\n  duration?: string;\n}\n\n/**\n * Enum for event accessibility types\n */\nexport enum EventAccessibilityType {\n  FULLY_ACCESSIBLE = 'fully_accessible',\n  LIMITED_ACCESSIBILITY = 'limited_accessibility',\n  NOT_ACCESSIBLE = 'not_accessible',\n}\n\n/**\n * Enum for event cost types\n */\nexport enum EventCostType {\n  FREE = 'free',\n  PAID = 'paid',\n  DONATION = 'donation',\n}\n\n/**\n * Represents complete event details - this is what would be stored\n * in the metadataURI field on the blockchain\n */\nexport interface EventDetails {\n  // Basic event information\n  title: string;        // Event title\n  startDate: string;    // ISO string\n  endDate?: string;     // ISO string\n  location?: any;\n  virtualLink?: string;\n  description?: string; // Detailed event description\n  \n  // Blockchain-specific fields\n  eventId?: number;     // Blockchain event ID (if already created)\n  contractAddress?: string; // Address of the EventController contract\n  organizer: string;    // Address of event organizer\n  price?: string;       // Human-readable price (e.g., \"0.1 ETH\")\n  priceInWei?: string;  // Price in wei as string (for big numbers)\n  maxTickets: number;   // Maximum number of tickets\n  ticketsSold?: number; // Number of tickets sold\n  active?: boolean;     // Whether the event is active\n  isOnChain?: boolean;  // Whether this event exists on the blockchain\n  ipfsHash?: string;    // IPFS hash for the metadata if stored on IPFS\n  \n  // Capacity information (UI-specific)\n  maxAttendees?: number;\n  currentAttendees?: number;\n  perWalletLimit?: number;\n  \n  // Additional details\n  cost?: string;\n  costType?: EventCostType;\n  category?: string;\n  accessibility?: EventAccessibilityType | string;\n  \n  // Rich content\n  speakers?: EventSpeaker[];\n  agenda?: EventAgendaItem[];\n  capacity?: number;\n  \n  // Additional fields\n  rsvpLink?: string;\n  ticketUrl?: string;\n  isCancelled?: boolean;\n  cancelReason?: string;\n  coverImage?: string;  // URL to event cover image\n  \n  // Social features\n  attendees?: string[]; // List of attendee addresses\n  interestedCount?: number; // Number of users interested but not attending\n}\n\n/**\n * Helper function to extract event details from post metadata\n * Handles different metadata structures and provides fallbacks\n */\nexport const extractEventDetails = (post: Post): EventDetails => {\n  // Try to get event details from the standard location first\n  const eventFromDetails = post.metadata?.eventDetails;\n  // Try legacy format\n  const eventFromLegacy = post.metadata?.event;\n  \n  // Create default structure with the post author as fallback organizer\n  const defaultDetails: EventDetails = {\n    title: post.metadata?.title || '',\n    startDate: new Date().toISOString(), // Default to now if no date provided\n    organizer: post.author,\n    maxTickets: 0,\n    currentAttendees: 0,\n    speakers: [],\n    agenda: []\n  };\n  \n  // Merge details in priority order: default < legacy < current\n  return {\n    ...defaultDetails,\n    ...(eventFromLegacy || {}),\n    ...(eventFromDetails || {})\n  };\n};\n\n/**\n * Helper function to check if a Post is an event type\n */\nexport const isEventPost = (post: Post): boolean => {\n  // Check through multiple ways to identify an event post\n  return (\n    // Check by type enum\n    post.type === 4 ||\n    // Check by string type\n    post.type?.toString().toLowerCase() === 'event' ||\n    // Check by metadata\n    !!post.metadata?.eventDetails ||\n    !!post.metadata?.event\n  );\n};\n\n/**\n * Convert frontend EventDetails to blockchain format\n * This prepares event data for storage on-chain\n */\nexport const eventDetailsToBlockchain = (details: EventDetails): {\n  metadataJson: string;\n  maxTickets: number;\n  price: bigint;\n} => {\n  // Create a copy of the details suitable for IPFS storage\n  const metadataForIpfs = {\n    title: details.title,\n    description: details.description || '',\n    startDate: details.startDate,\n    endDate: details.endDate,\n    location: details.location,\n    virtualLink: details.virtualLink,\n    organizer: details.organizer,\n    category: details.category,\n    speakers: details.speakers,\n    agenda: details.agenda,\n    coverImage: details.coverImage,\n    accessibility: details.accessibility\n  };\n\n  // Convert price from ETH string to wei if provided\n  const priceInWei = details.priceInWei \n    ? BigInt(details.priceInWei) \n    : details.price \n      ? BigInt(parseFloat(details.price) * 1e18) // Simple ETH to wei conversion\n      : BigInt(0);\n      \n  return {\n    metadataJson: JSON.stringify(metadataForIpfs),\n    maxTickets: details.maxTickets || 0,\n    price: priceInWei\n  };\n};\n\n/**\n * Convert blockchain event to frontend format\n */\nexport const blockchainToEventDetails = (\n  blockchainEvent: BlockchainEvent, \n  eventId: number,\n  metadata?: any // Parsed metadata JSON from IPFS\n): EventDetails => {\n  // Provide defaults if metadata is missing\n  const parsedMetadata = metadata || {};\n  \n  return {\n    title: parsedMetadata.title || `Event #${eventId}`,\n    description: parsedMetadata.description || '',\n    startDate: parsedMetadata.startDate || new Date().toISOString(),\n    endDate: parsedMetadata.endDate,\n    location: parsedMetadata.location,\n    virtualLink: parsedMetadata.virtualLink,\n    \n    // Blockchain-specific fields\n    eventId,\n    organizer: blockchainEvent.organizer,\n    maxTickets: blockchainEvent.maxTickets,\n    ticketsSold: blockchainEvent.ticketsSold,\n    priceInWei: blockchainEvent.price.toString(),\n    price: (Number(blockchainEvent.price) / 1e18).toString(), // Convert wei to ETH\n    active: blockchainEvent.active,\n    isOnChain: true,\n    ipfsHash: blockchainEvent.metadataURI.replace('ipfs://', ''),\n    \n    // Additional details from metadata\n    category: parsedMetadata.category,\n    accessibility: parsedMetadata.accessibility,\n    speakers: parsedMetadata.speakers || [],\n    agenda: parsedMetadata.agenda || [],\n    coverImage: parsedMetadata.coverImage,\n    \n    // UI-specific derived fields\n    isCancelled: !blockchainEvent.active,\n    maxAttendees: blockchainEvent.maxTickets,\n    currentAttendees: blockchainEvent.ticketsSold\n  };\n}; ","import { EventDetails, BlockchainEvent } from '../types/event';\n\n/**\n * Service for interacting with events on the blockchain\n * This is currently a mock implementation for UI testing\n */\nexport class EventsService {\n  /**\n   * Gets the number of tickets a user owns for an event\n   * @param eventId The blockchain event ID\n   * @param userAddress The user's wallet address\n   * @returns Number of tickets owned\n   */\n  static async getUserTickets(eventId: number, userAddress: string): Promise<number> {\n    console.log(`Getting tickets for event ${eventId} and user ${userAddress}`);\n    \n    // For demonstration, we'll return a mock value\n    // In a real implementation, this would call the blockchain\n    return localStorage.getItem(`event-${eventId}-user-${userAddress}-tickets`) \n      ? parseInt(localStorage.getItem(`event-${eventId}-user-${userAddress}-tickets`) || '0') \n      : 0;\n  }\n  \n  /**\n   * Purchases tickets for an event\n   * @param eventId The blockchain event ID\n   * @param amount Number of tickets to purchase\n   * @returns A transaction hash (mock)\n   */\n  static async purchaseTickets(eventId: number, amount: number): Promise<string> {\n    console.log(`Purchasing ${amount} tickets for event ${eventId}`);\n    \n    // Simulate blockchain delay\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    // In a real implementation, this would call the blockchain\n    // For now, let's just store in localStorage to simulate persistence\n    \n    // Get connected wallet (mock)\n    const userAddress = localStorage.getItem('connectedWallet');\n    if (!userAddress) {\n      throw new Error('No wallet connected');\n    }\n    \n    // Update ticket count\n    const currentTickets = localStorage.getItem(`event-${eventId}-user-${userAddress}-tickets`)\n      ? parseInt(localStorage.getItem(`event-${eventId}-user-${userAddress}-tickets`) || '0')\n      : 0;\n      \n    localStorage.setItem(\n      `event-${eventId}-user-${userAddress}-tickets`, \n      (currentTickets + amount).toString()\n    );\n    \n    // Return mock tx hash\n    return `0x${Math.random().toString(16).substring(2)}`;\n  }\n  \n  /**\n   * Create a new event on the blockchain\n   * @param eventDetails Event details to store\n   * @returns Transaction hash and event ID (mock)\n   */\n  static async createEvent(eventDetails: EventDetails): Promise<{ hash: string; eventId: number }> {\n    console.log('Creating event:', eventDetails);\n    \n    // Simulate blockchain delay\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Generate random event ID\n    const eventId = Math.floor(Math.random() * 1000) + 1;\n    \n    // Return mock values\n    return {\n      hash: `0x${Math.random().toString(16).substring(2)}`,\n      eventId\n    };\n  }\n  \n  /**\n   * Get an event by ID\n   * @param eventId Event ID\n   * @returns Event details or null\n   */\n  static async getEvent(eventId: number): Promise<EventDetails | null> {\n    console.log(`Getting event ${eventId}`);\n    \n    // In a real implementation, this would fetch from the blockchain\n    // For demo purposes, return mock data\n    return {\n      title: `Event #${eventId}`,\n      startDate: new Date().toISOString(),\n      endDate: new Date(Date.now() + 86400000).toISOString(),\n      location: 'Mock Location',\n      eventId,\n      isOnChain: true,\n      organizer: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n      maxTickets: 100,\n      ticketsSold: 45,\n      price: '0.05',\n      active: true,\n      priceInWei: '50000000000000000'\n    };\n  }\n  \n  /**\n   * Cancel an event on the blockchain\n   * @param eventId Event ID to cancel\n   * @returns Transaction hash (mock)\n   */\n  static async cancelEvent(eventId: number): Promise<string> {\n    console.log(`Cancelling event ${eventId}`);\n    \n    // Simulate blockchain delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Return mock tx hash\n    return `0x${Math.random().toString(16).substring(2)}`;\n  }\n} ","import React, { useState } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Post } from '../../types/post';\nimport UserAvatar from '../user/UserAvatar';\nimport { Heart, MessageCircle, Share2, Flag } from 'lucide-react';\nimport { \n  postContainerStyles, \n  authorStyles, \n  authorNameStyles, \n  timestampStyles, \n  contentStyles,\n  actionButtonStyles,\n  dividerStyles,\n  postTypeBadgeStyles\n} from './styles/post.styles';\n\nexport interface BasePostProps {\n  post: Post;\n  postType: string; // 'text', 'image', 'video', etc.\n  typeIcon?: React.ReactNode;\n  typeName?: string;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n}\n\nconst BasePost: React.FC<BasePostProps> = ({\n  post,\n  postType,\n  typeIcon,\n  typeName,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true,\n  className = '',\n  children\n}) => {\n  const [isLiked, setIsLiked] = useState(false);\n  \n  const handleLike = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsLiked(!isLiked);\n    onLike?.();\n  };\n  \n  const handleClick = () => {\n    if (onClick) {\n      onClick(post.id);\n    }\n  };\n\n  const formattedDate = React.useMemo(() => {\n    try {\n      return formatDistanceToNow(new Date(post.createdAt), { addSuffix: true });\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return 'some time ago';\n    }\n  }, [post.createdAt]);\n\n  return (\n    <article \n      className={`${postContainerStyles({ type: postType as any })} ${className}`}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      {/* Post Type Badge - if provided */}\n      {typeIcon && typeName && (\n        <div className={postTypeBadgeStyles({ type: postType as any })}>\n          {typeIcon}\n          <span>{typeName}</span>\n        </div>\n      )}\n      \n      {/* Author section */}\n      <div className={authorStyles}>\n        <UserAvatar \n          address={post.author} \n          className=\"h-10 w-10\"\n        />\n        <div className=\"flex flex-col\">\n          <a \n            href={`/profile/${post.author}`} \n            className={authorNameStyles}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {post.author}\n          </a>\n          <time className={timestampStyles}>\n            {formattedDate}\n          </time>\n        </div>\n      </div>\n\n      {/* Content */}\n      {post.content && (\n        <div className={contentStyles}>\n          {post.content}\n        </div>\n      )}\n\n      {/* Custom content for different post types */}\n      {children}\n\n      {/* Actions */}\n      {showActions && (\n        <>\n          <div className={dividerStyles} />\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <button \n                className={actionButtonStyles({ variant: 'default', active: isLiked })}\n                onClick={handleLike}\n              >\n                <Heart className=\"mr-1 h-4 w-4\" />\n                <span>{post.stats?.likeCount || 0}</span>\n              </button>\n              <button \n                className={actionButtonStyles({ variant: 'default' })}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onComment?.();\n                }}\n              >\n                <MessageCircle className=\"mr-1 h-4 w-4\" />\n                <span>{post.stats?.commentCount || 0}</span>\n              </button>\n              <button \n                className={actionButtonStyles({ variant: 'default' })}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onShare?.();\n                }}\n              >\n                <Share2 className=\"mr-1 h-4 w-4\" />\n                <span>{post.stats?.shareCount || 0}</span>\n              </button>\n            </div>\n            <button \n              className={actionButtonStyles({ variant: 'destructive' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onReport?.();\n              }}\n            >\n              <Flag className=\"h-4 w-4\" />\n            </button>\n          </div>\n        </>\n      )}\n    </article>\n  );\n};\n\nexport default BasePost; ","import React, { useState, useEffect } from 'react';\nimport { formatDistanceToNow, format, isBefore, isAfter, isToday } from 'date-fns';\nimport { Post } from '../../../types/post';\nimport { EventDetails, extractEventDetails, EventSpeaker, EventAgendaItem } from '../../../types/event';\nimport { EventsService } from '../../../services/events.service';\nimport UserAvatar from '../../user/UserAvatar';\nimport { \n  Calendar, \n  Clock, \n  MapPin, \n  Users, \n  Link as LinkIcon, \n  ExternalLink,\n  Heart, \n  MessageCircle, \n  Share2, \n  Flag, \n  Info,\n  DollarSign,\n  Accessibility,\n  User,\n  Tag,\n  Plus,\n  CalendarCheck,\n  Share,\n  Ticket,\n  AlertCircle\n} from 'lucide-react';\n\nimport BasePost from '../BasePost';\nimport { \n  tagStyles, \n  buttonStyles,\n  postTypeIconStyles,\n  dividerStyles\n} from '../styles/post.styles';\n\ninterface EventPostProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\nconst EventPost: React.FC<EventPostProps> = (props) => {\n  const { post } = props;\n  const [isAttending, setIsAttending] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [ticketCount, setTicketCount] = useState(0);\n  const [userAddress, setUserAddress] = useState<string | null>(null);\n  const [ticketQuantity, setTicketQuantity] = useState(1);\n  const [showTicketModal, setShowTicketModal] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  \n  // Extract event details from metadata using our helper function\n  const eventDetails: EventDetails = React.useMemo(() => {\n    return extractEventDetails(post);\n  }, [post]);\n\n  // Format event dates\n  const eventDates = React.useMemo(() => {\n    try {\n      if (!eventDetails.startDate) return { \n        display: \"Date not specified\",\n        status: \"unknown\" \n      };\n\n      const startDate = new Date(eventDetails.startDate);\n      const endDate = eventDetails.endDate ? new Date(eventDetails.endDate) : null;\n      \n      const formattedStartDate = format(startDate, 'PPP');\n      const formattedEndDate = endDate ? format(endDate, 'PPP') : null;\n      \n      const formattedStartTime = format(startDate, 'p');\n      const formattedEndTime = endDate ? format(endDate, 'p') : null;\n      \n      const isSameDay = formattedStartDate === formattedEndDate;\n      \n      let status = \"upcoming\";\n      if (isBefore(new Date(), startDate)) {\n        status = \"upcoming\";\n      } else if (endDate && isAfter(new Date(), endDate)) {\n        status = \"past\";\n      } else {\n        status = \"ongoing\";\n      }\n      \n      // Calculate days remaining\n      const now = new Date();\n      const diffTime = startDate.getTime() - now.getTime();\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      \n      let daysRemainingText = \"\";\n      if (diffDays > 0) {\n        daysRemainingText = `${diffDays} day${diffDays !== 1 ? 's' : ''} away`;\n      } else if (diffDays === 0) {\n        daysRemainingText = \"Today!\";\n      }\n      \n      return {\n        startDate: formattedStartDate,\n        startTime: formattedStartTime,\n        endDate: formattedEndDate,\n        endTime: formattedEndTime,\n        isSameDay,\n        status,\n        daysRemaining: diffDays,\n        daysRemainingText,\n        fullStartDate: startDate,\n        fullEndDate: endDate\n      };\n    } catch (error) {\n      console.error('Error formatting event dates:', error);\n      return {\n        display: \"Invalid date format\",\n        status: \"unknown\"\n      };\n    }\n  }, [eventDetails.startDate, eventDetails.endDate]);\n\n  // Get event status color and text\n  const getEventStatusInfo = (status: string) => {\n    switch (status) {\n      case 'upcoming':\n        return { \n          color: 'bg-emerald-900/30 text-emerald-300 border-emerald-700/50',\n          text: 'Upcoming' \n        };\n      case 'ongoing':\n        return { \n          color: 'bg-blue-900/30 text-blue-300 border-blue-700/50',\n          text: 'Happening now' \n        };\n      case 'past':\n        return { \n          color: 'bg-neutral-800/50 text-neutral-400 border-neutral-700/50',\n          text: 'Past event' \n        };\n      default:\n        return { \n          color: 'bg-neutral-800 text-neutral-400 border-neutral-700',\n          text: 'Date unknown' \n        };\n    }\n  };\n\n  // Map tag colors consistently based on tag content\n  const getTagVariant = (tag: string): \"default\" | \"blue\" | \"purple\" | \"green\" | \"yellow\" | \"orange\" | \"red\" | \"indigo\" | \"emerald\" => {\n    const variants = [\"blue\", \"purple\", \"green\", \"yellow\", \"orange\", \"red\", \"indigo\", \"emerald\"] as const;\n    const hash = tag.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return variants[hash % variants.length];\n  };\n\n  // Generate add to calendar link\n  const generateCalendarLink = () => {\n    if (!eventDates.fullStartDate) return '#';\n    \n    const title = encodeURIComponent(post.metadata?.title || 'Event');\n    const start = encodeURIComponent(eventDates.fullStartDate.toISOString());\n    const end = eventDates.fullEndDate ? encodeURIComponent(eventDates.fullEndDate.toISOString()) : start;\n    const location = encodeURIComponent(eventDetails.location || '');\n    const details = encodeURIComponent(post.content || '');\n    \n    return `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${title}&dates=${start}/${end}&details=${details}&location=${location}`;\n  };\n\n  // Check if user has tickets for this event\n  useEffect(() => {\n    const checkUserTickets = async () => {\n      try {\n        // Mock checking connected wallet address - replace with your wallet connection logic\n        const address = localStorage.getItem('connectedWallet') || '0xMockAddress';\n        setUserAddress(address);\n        \n        // Store mock address for testing purposes\n        if (!localStorage.getItem('connectedWallet')) {\n          localStorage.setItem('connectedWallet', address);\n        }\n        \n        // If this is a blockchain event and we have an eventId\n        if (eventDetails.isOnChain && eventDetails.eventId) {\n          try {\n            const tickets = await EventsService.getUserTickets(eventDetails.eventId, address);\n            setTicketCount(tickets);\n            setIsAttending(tickets > 0);\n          } catch (error) {\n            console.error('Error checking tickets, using mock data:', error);\n            // Use mock data for testing\n            setTicketCount(Math.random() > 0.7 ? 2 : 0);\n            setIsAttending(Math.random() > 0.7);\n          }\n        }\n      } catch (error) {\n        console.error('Error checking user tickets:', error);\n      }\n    };\n    \n    checkUserTickets();\n  }, [eventDetails.isOnChain, eventDetails.eventId]);\n\n  // Handle attend/RSVP button click\n  const handleAttend = async (e: React.MouseEvent) => {\n    e.stopPropagation();\n    \n    if (eventDetails.isOnChain && eventDetails.eventId) {\n      // For blockchain events, open ticket purchasing modal\n      setShowTicketModal(true);\n    } else {\n      // For regular events, toggle attendance state\n      setIsAttending(!isAttending);\n      // Here you would update your backend\n    }\n  };\n\n  // Handle ticket purchase\n  const handlePurchaseTickets = async () => {\n    if (!eventDetails.eventId) return;\n    \n    setIsLoading(true);\n    setErrorMessage('');\n    \n    try {\n      // Call blockchain service to purchase tickets\n      try {\n        await EventsService.purchaseTickets(eventDetails.eventId, ticketQuantity);\n      } catch (error) {\n        console.error('Service error, using mock fallback:', error);\n        // Simulate successful purchase for testing\n        await new Promise(resolve => setTimeout(resolve, 1500));\n        \n        // Store in localStorage for persistence\n        const userAddr = localStorage.getItem('connectedWallet') || '0xMockAddress';\n        const currentTickets = parseInt(localStorage.getItem(`event-${eventDetails.eventId}-user-${userAddr}-tickets`) || '0');\n        localStorage.setItem(`event-${eventDetails.eventId}-user-${userAddr}-tickets`, (currentTickets + ticketQuantity).toString());\n      }\n      \n      // Update state\n      setTicketCount(ticketCount + ticketQuantity);\n      setIsAttending(true);\n      setShowTicketModal(false);\n    } catch (error) {\n      console.error('Error purchasing tickets:', error);\n      setErrorMessage('Failed to purchase tickets. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Debug info for better troubleshooting\n  console.log('EventPost rendering with:', {\n    postType: post.type,\n    metadataKeys: post.metadata ? Object.keys(post.metadata) : [],\n    hasEventDetails: !!post.metadata?.eventDetails,\n    hasEventLegacy: !!post.metadata?.event,\n    extractedDetails: eventDetails,\n    isOnChain: eventDetails.isOnChain,\n    eventId: eventDetails.eventId\n  });\n\n  return (\n    <BasePost\n      {...props}\n      postType=\"event\"\n      typeIcon={<Calendar className=\"mr-1 h-3 w-3\" />}\n      typeName=\"Event\"\n    >\n      {/* Event Status Banner */}\n      {eventDates.status && (\n        <div className={`mt-4 flex items-center justify-between rounded-md px-3 py-2 border ${getEventStatusInfo(eventDates.status).color}`}>\n          <div className=\"flex items-center\">\n            <span className=\"font-medium\">{getEventStatusInfo(eventDates.status).text}</span>\n          </div>\n          {eventDates.daysRemainingText && eventDates.status === 'upcoming' && (\n            <span className=\"text-sm\">{eventDates.daysRemainingText}</span>\n          )}\n        </div>\n      )}\n\n      {/* Event Title */}\n      {post.metadata?.title && (\n        <h3 className=\"text-xl font-bold mt-4 text-white\">\n          {post.metadata.title}\n        </h3>\n      )}\n\n      {/* Blockchain Event Badge */}\n      {eventDetails.isOnChain && (\n        <div className=\"mt-2 inline-flex items-center rounded-full bg-indigo-900/30 text-indigo-300 px-2.5 py-0.5 text-xs font-medium\">\n          <Ticket className=\"mr-1 h-3 w-3\" />\n          <span>Blockchain Event</span>\n        </div>\n      )}\n\n      {/* Event Summary Grid */}\n      <div className=\"mt-4 grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {/* Left column - Date & Time */}\n        <div className=\"rounded-lg border border-yellow-900/40 bg-yellow-900/10 p-4\">\n          <div className=\"flex items-start gap-3\">\n            <div className={postTypeIconStyles({ type: 'event' })}>\n              <Calendar className=\"h-5 w-5 text-yellow-300\" />\n            </div>\n            <div className=\"space-y-1\">\n              <h4 className=\"font-semibold text-white\">Date & Time</h4>\n              \n              {eventDates.status !== 'unknown' ? (\n                <>\n                  {/* Calendar-style date display for start date */}\n                  <div className=\"flex items-center mt-2\">\n                    <div className=\"flex flex-col items-center justify-center bg-neutral-800 border border-neutral-700 rounded-md min-w-[60px] h-[60px] mr-3\">\n                      <span className=\"text-xs text-neutral-400\">{eventDates.fullStartDate ? format(eventDates.fullStartDate, 'MMM') : 'N/A'}</span>\n                      <span className=\"text-xl font-bold\">{eventDates.fullStartDate ? format(eventDates.fullStartDate, 'd') : '-'}</span>\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-sm text-neutral-300\">{eventDates.startDate || 'N/A'}</span>\n                      <span className=\"text-xs text-neutral-400\">From {eventDates.startTime || 'N/A'}</span>\n                      \n                      {eventDates.endDate && !eventDates.isSameDay && (\n                        <div className=\"mt-1 text-xs text-neutral-400\">\n                          To {eventDates.endDate} at {eventDates.endTime}\n                        </div>\n                      )}\n                      \n                      {eventDates.isSameDay && eventDates.endTime && (\n                        <div className=\"text-xs text-neutral-400\">\n                          Until {eventDates.endTime}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </>\n              ) : (\n                <span className=\"text-sm text-neutral-400\">Date and time not specified</span>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Right column - Location */}\n        <div className=\"rounded-lg border border-yellow-900/40 bg-yellow-900/10 p-4\">\n          <div className=\"flex items-start gap-3\">\n            <div className={postTypeIconStyles({ type: 'event' })}>\n              <MapPin className=\"h-5 w-5 text-yellow-300\" />\n            </div>\n            <div className=\"space-y-1\">\n              <h4 className=\"font-semibold text-white\">Location</h4>\n              \n              {eventDetails.location ? (\n                <div className=\"mt-2\">\n                  <p className=\"text-sm text-neutral-300\">{eventDetails.location}</p>\n                  \n                  {/* Map placeholder - in a real app, this could be a real map component */}\n                  <div className=\"mt-2 h-[60px] w-full rounded-md bg-neutral-800 border border-neutral-700 flex items-center justify-center\">\n                    <span className=\"text-xs text-neutral-400\">Map view</span>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"mt-2 text-sm text-neutral-400\">\n                  {eventDetails.virtualLink ? 'Online event' : 'Location not specified'}\n                </div>\n              )}\n              \n              {eventDetails.virtualLink && (\n                <a \n                  href={eventDetails.virtualLink}\n                  className=\"mt-2 inline-flex items-center gap-1.5 text-sm text-blue-400 hover:text-blue-300 transition-colors\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <LinkIcon className=\"h-3.5 w-3.5\" />\n                  <span>Join virtually</span>\n                  <ExternalLink className=\"h-3 w-3\" />\n                </a>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Event Details Section */}\n      <div className=\"mt-4 space-y-4\">\n        {/* Organizer & Categories */}\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n          {/* Organizer */}\n          <div className=\"flex items-center gap-2 text-sm\">\n            <User className=\"h-4 w-4 text-yellow-400\" />\n            <span className=\"text-neutral-400\">Organizer:</span>\n            <span className=\"text-white\">{eventDetails.organizer || post.author || 'N/A'}</span>\n          </div>\n          \n          {/* Categories */}\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Tag className=\"h-4 w-4 text-yellow-400\" />\n            <span className=\"text-neutral-400\">Category:</span>\n            {eventDetails.category ? (\n              <span className={tagStyles({ variant: getTagVariant(eventDetails.category) })}>\n                {eventDetails.category}\n              </span>\n            ) : post.metadata?.tags && post.metadata.tags.length > 0 ? (\n              <span className={tagStyles({ variant: getTagVariant(post.metadata.tags[0]) })}>\n                {post.metadata.tags[0]}\n              </span>\n            ) : (\n              <span className=\"text-neutral-400\">N/A</span>\n            )}\n          </div>\n        </div>\n\n        {/* Cost & Accessibility */}\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n          {/* Cost */}\n          <div className=\"flex items-center gap-2 text-sm\">\n            <DollarSign className=\"h-4 w-4 text-yellow-400\" />\n            <span className=\"text-neutral-400\">Cost:</span>\n            {eventDetails.isOnChain ? (\n              <span className=\"text-white\">{eventDetails.price || '0'} ETH per ticket</span>\n            ) : (\n              <span className=\"text-white\">{eventDetails.cost || 'Free / Not specified'}</span>\n            )}\n          </div>\n          \n          {/* Accessibility */}\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Accessibility className=\"h-4 w-4 text-yellow-400\" />\n            <span className=\"text-neutral-400\">Accessibility:</span>\n            <span className=\"text-white\">{eventDetails.accessibility || 'Not specified'}</span>\n          </div>\n        </div>\n\n        {/* Attendees */}\n        <div className=\"bg-neutral-800/60 rounded-lg p-4 border border-neutral-700/50\">\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n            <div className=\"flex items-start gap-2\">\n              <Users className=\"h-5 w-5 text-yellow-400 mt-0.5\" />\n              <div>\n                <div className=\"text-sm font-medium text-white\">\n                  {eventDetails.isOnChain ? 'Tickets' : 'Attendees'}\n                </div>\n                <div className=\"text-xs text-neutral-400\">\n                  {eventDetails.isOnChain ? (\n                    <>\n                      <span className=\"text-white text-sm\">{eventDetails.ticketsSold || 0}</span> of <span className=\"text-white text-sm\">{eventDetails.maxTickets}</span> tickets sold\n                      {ticketCount > 0 && (\n                        <div className=\"mt-1 text-emerald-400\">You own {ticketCount} ticket{ticketCount !== 1 ? 's' : ''}</div>\n                      )}\n                    </>\n                  ) : (\n                    eventDetails.currentAttendees !== undefined ? (\n                      <>\n                        <span className=\"text-white text-sm\">{eventDetails.currentAttendees}</span>\n                        {eventDetails.maxAttendees ? (\n                          <> of <span className=\"text-white text-sm\">{eventDetails.maxAttendees}</span> spots filled</>\n                        ) : (\n                          <> attending</>\n                        )}\n                      </>\n                    ) : (\n                      'Attendance not tracked'\n                    )\n                  )}\n                </div>\n              </div>\n            </div>\n            \n            {/* Attendance bar */}\n            {eventDetails.isOnChain ? (\n              <div className=\"w-full md:w-1/2 h-2 bg-neutral-700 rounded-full overflow-hidden\">\n                <div \n                  className=\"h-full bg-yellow-500\" \n                  style={{ \n                    width: `${Math.min(100, ((eventDetails.ticketsSold || 0) / eventDetails.maxTickets) * 100)}%` \n                  }}\n                />\n              </div>\n            ) : (\n              eventDetails.maxAttendees && eventDetails.currentAttendees !== undefined && (\n                <div className=\"w-full md:w-1/2 h-2 bg-neutral-700 rounded-full overflow-hidden\">\n                  <div \n                    className=\"h-full bg-yellow-500\" \n                    style={{ \n                      width: `${Math.min(100, (eventDetails.currentAttendees / eventDetails.maxAttendees) * 100)}%` \n                    }}\n                  />\n                </div>\n              )\n            )}\n          </div>\n          \n          {/* Ticket Purchase / Attendee actions */}\n          {eventDates.status !== 'past' && (\n            <div className=\"mt-3 flex justify-end\">\n              {eventDetails.isOnChain ? (\n                <button\n                  className={buttonStyles({ \n                    variant: ticketCount > 0 ? 'outline' : 'primary',\n                    size: 'sm'\n                  })}\n                  onClick={handleAttend}\n                  disabled={eventDetails.isOnChain && !eventDetails.active}\n                >\n                  {ticketCount > 0 ? (\n                    <>View My Ticket{ticketCount !== 1 ? 's' : ''}</>\n                  ) : (\n                    <>\n                      <Ticket className=\"mr-1 h-3.5 w-3.5\" />\n                      Purchase Tickets\n                    </>\n                  )}\n                </button>\n              ) : (\n                <button\n                  className={buttonStyles({ \n                    variant: isAttending ? 'outline' : 'primary',\n                    size: 'sm'\n                  })}\n                  onClick={handleAttend}\n                >\n                  {isAttending ? (\n                    <>I'm attending</>\n                  ) : (\n                    <>\n                      <Plus className=\"mr-1 h-3.5 w-3.5\" />\n                      Attend\n                    </>\n                  )}\n                </button>\n              )}\n            </div>\n          )}\n          \n          {/* Cancelled warning */}\n          {eventDetails.isOnChain && !eventDetails.active && (\n            <div className=\"mt-3 flex items-center gap-2 text-red-400 text-sm\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>This event has been cancelled by the organizer</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Event Description */}\n      {post.content && (\n        <div className=\"mt-4\">\n          <h4 className=\"text-sm font-medium text-white mb-2\">Description</h4>\n          <div className=\"text-neutral-300 text-sm leading-relaxed whitespace-pre-wrap\">\n            {post.content}\n          </div>\n        </div>\n      )}\n\n      {/* Speakers Section */}\n      {eventDetails.speakers && eventDetails.speakers.length > 0 && (\n        <div className=\"mt-4\">\n          <h4 className=\"text-sm font-medium text-white mb-2\">Featured Speakers</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n            {eventDetails.speakers.map((speaker: EventSpeaker, index: number) => (\n              <div key={index} className=\"flex items-center gap-2 bg-neutral-800/50 rounded-md p-2\">\n                <div className=\"w-8 h-8 rounded-full bg-neutral-700 flex items-center justify-center\">\n                  {speaker.avatar ? (\n                    <img src={speaker.avatar} alt={speaker.name} className=\"w-8 h-8 rounded-full\" />\n                  ) : (\n                    <User className=\"w-4 h-4 text-neutral-400\" />\n                  )}\n                </div>\n                <div>\n                  <div className=\"text-sm font-medium text-white\">{speaker.name}</div>\n                  {speaker.role && <div className=\"text-xs text-neutral-400\">{speaker.role}</div>}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Agenda Section */}\n      {eventDetails.agenda && eventDetails.agenda.length > 0 && (\n        <div className=\"mt-4\">\n          <h4 className=\"text-sm font-medium text-white mb-2\">Event Agenda</h4>\n          <div className=\"space-y-2\">\n            {eventDetails.agenda.map((item: EventAgendaItem, index: number) => (\n              <div key={index} className=\"bg-neutral-800/50 rounded-md p-3 border-l-2 border-yellow-500\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm font-medium text-white\">{item.title}</span>\n                  {item.time && <span className=\"text-xs text-neutral-400\">{item.time}</span>}\n                </div>\n                {item.description && (\n                  <p className=\"text-xs text-neutral-300 mt-1\">{item.description}</p>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Tags */}\n      {post.metadata?.tags && post.metadata.tags.length > 0 && (\n        <div className=\"mt-4 flex flex-wrap gap-2\">\n          {post.metadata.tags.map((tag: string, index: number) => (\n            <span \n              key={index} \n              className={tagStyles({ variant: getTagVariant(tag) })}\n            >\n              {tag}\n            </span>\n          ))}\n        </div>\n      )}\n\n      {/* Action Buttons */}\n      <div className={dividerStyles} />\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <a\n            href={generateCalendarLink()}\n            className={buttonStyles({ variant: 'outline', size: 'sm' })}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <CalendarCheck className=\"mr-1.5 h-3.5 w-3.5\" />\n            Add to Calendar\n          </a>\n          \n          <button\n            className={buttonStyles({ variant: 'outline', size: 'sm' })}\n            onClick={(e) => {\n              e.stopPropagation();\n              if (navigator.share) {\n                navigator.share({\n                  title: post.metadata?.title || 'Event',\n                  text: post.content || 'Check out this event',\n                  url: window.location.href\n                }).catch(console.error);\n              } else {\n                // Fallback\n                props.onShare?.();\n              }\n            }}\n          >\n            <Share className=\"mr-1.5 h-3.5 w-3.5\" />\n            Share Event\n          </button>\n        </div>\n      </div>\n      \n      {/* Ticket Purchase Modal */}\n      {showTicketModal && eventDetails.isOnChain && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\" onClick={() => setShowTicketModal(false)}>\n          <div className=\"bg-neutral-900 rounded-lg p-6 max-w-md w-full mx-4\" onClick={e => e.stopPropagation()}>\n            <h3 className=\"text-xl font-bold text-white mb-4\">Purchase Tickets</h3>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-neutral-300 mb-1\">Event</label>\n                <div className=\"text-white\">{post.metadata?.title}</div>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-neutral-300 mb-1\">Price per Ticket</label>\n                <div className=\"text-white\">{eventDetails.price || '0'} ETH</div>\n              </div>\n              \n              <div>\n                <label htmlFor=\"quantity\" className=\"block text-sm font-medium text-neutral-300 mb-1\">Quantity</label>\n                <input\n                  id=\"quantity\"\n                  type=\"number\"\n                  min=\"1\"\n                  max={eventDetails.maxTickets - (eventDetails.ticketsSold || 0)}\n                  value={ticketQuantity}\n                  onChange={e => setTicketQuantity(Math.max(1, parseInt(e.target.value) || 1))}\n                  className=\"w-full rounded-md border border-neutral-700 bg-neutral-800 p-2 text-white\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-neutral-300 mb-1\">Total Price</label>\n                <div className=\"text-white font-bold\">\n                  {eventDetails.price ? (parseFloat(eventDetails.price) * ticketQuantity).toFixed(4) : '0'} ETH\n                </div>\n              </div>\n              \n              {errorMessage && (\n                <div className=\"bg-red-900/20 border border-red-900 text-red-300 p-3 rounded-md text-sm\">\n                  {errorMessage}\n                </div>\n              )}\n              \n              <div className=\"flex justify-end gap-3 mt-6\">\n                <button\n                  className={buttonStyles({ variant: 'outline' })}\n                  onClick={() => setShowTicketModal(false)}\n                  disabled={isLoading}\n                >\n                  Cancel\n                </button>\n                \n                <button\n                  className={buttonStyles({ variant: 'primary' })}\n                  onClick={handlePurchaseTickets}\n                  disabled={isLoading || !eventDetails.active}\n                >\n                  {isLoading ? 'Processing...' : 'Purchase Tickets'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </BasePost>\n  );\n};\n\nexport default EventPost; ","import React, { useState } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Check } from 'lucide-react';\nimport { Post } from '../../../types/post';\nimport UserAvatar from '../../user/UserAvatar';\nimport { \n  HeartIcon, \n  ChatBubbleLeftIcon, \n  ArrowPathRoundedSquareIcon, \n  BookmarkIcon \n} from '@heroicons/react/24/outline';\nimport { \n  HeartIcon as HeartIconSolid, \n  BookmarkIcon as BookmarkIconSolid \n} from '@heroicons/react/24/solid';\n\ninterface PollPostProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\ninterface PollOption {\n  id: string;\n  text: string;\n  votes: number;\n}\n\ninterface PollData {\n  question?: string;\n  options?: PollOption[];\n  endDate?: string;\n}\n\nconst PollPost: React.FC<PollPostProps> = ({\n  post,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true\n}) => {\n  const [liked, setLiked] = useState(false);\n  const [saved, setSaved] = useState(false);\n  const [selectedOption, setSelectedOption] = useState<string | null>(null);\n  const [hasVoted, setHasVoted] = useState(false);\n  \n  // Format the timestamp\n  const formattedTime = (() => {\n    try {\n      // Check if createdAt is a valid date\n      const timestamp = post.createdAt;\n      if (!timestamp) return 'Unknown time';\n      \n      // Handle both number and string formats\n      const date = new Date(timestamp);\n      if (isNaN(date.getTime())) return 'Invalid date';\n      \n      return formatDistanceToNow(date, { addSuffix: true });\n    } catch (error) {\n      console.error('Error formatting date:', error, post);\n      return 'Unknown time';\n    }\n  })();\n  \n  // Extract poll data from metadata with proper typing\n  const pollData: PollData | any = post.metadata?.poll || {};\n  const pollQuestion = pollData.question || post.content || 'Poll';\n  const pollOptions: PollOption[] = pollData.options || [];\n  const pollEndDate = pollData.endDate ? new Date(pollData.endDate) : null;\n  \n  // Calculate if poll has ended\n  const isPollEnded = pollEndDate ? new Date() > pollEndDate : false;\n  \n  // Calculate total votes\n  const totalVotes = pollOptions.reduce((sum, option) => sum + (option.votes || 0), 0);\n  \n  // Format remaining time\n  const remainingTime = (() => {\n    if (!pollEndDate || isPollEnded) return null;\n    \n    const now = new Date();\n    const diffMs = pollEndDate.getTime() - now.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    const diffHours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    \n    if (diffDays > 0) {\n      return `${diffDays} day${diffDays !== 1 ? 's' : ''} left`;\n    } else if (diffHours > 0) {\n      return `${diffHours} hour${diffHours !== 1 ? 's' : ''} left`;\n    } else {\n      return 'Ending soon';\n    }\n  })();\n  \n  // Handle vote action\n  const handleVote = (optionId: string) => {\n    if (!hasVoted) {\n      setSelectedOption(optionId);\n      setHasVoted(true);\n    }\n  };\n  \n  // Handle like action\n  const handleLike = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setLiked(!liked);\n    if (onLike) onLike();\n  };\n  \n  // Handle comment action\n  const handleComment = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onComment) onComment();\n  };\n  \n  // Handle share action\n  const handleShare = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onShare) onShare();\n  };\n  \n  // Handle save action\n  const handleSave = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setSaved(!saved);\n  };\n  \n  // Handle card click\n  const handleCardClick = () => {\n    if (onClick) onClick(post.id);\n  };\n\n  // Get author name and profile picture\n  const authorName = typeof post.author === 'string' ? \n    `${post.author.slice(0, 6)}...${post.author.slice(-4)}` : \n    post.author;\n\n  const authorAddress = typeof post.author === 'string' ? \n    post.author : \n    post.author;\n    \n  // Safely get stats values\n  const likeCount = post.stats?.likeCount || 0;\n  const commentCount = post.stats?.commentCount || 0;\n\n  return (\n    <div \n      className=\"bg-white p-4 rounded-lg shadow-sm border border-gray-200 cursor-pointer\"\n      onClick={handleCardClick}\n    >\n      {/* Post Header */}\n      <div className=\"flex items-center mb-3\">\n        <div className=\"h-10 w-10 rounded-full bg-gradient-to-r from-blue-400 to-purple-500 flex items-center justify-center text-white font-bold\">\n          <UserAvatar \n            address={authorAddress}\n            size=\"md\"\n            showUsername={false}\n          />\n        </div>\n        <div className=\"ml-2\">\n          <div className=\"font-medium\">{authorName}</div>\n          <div className=\"text-xs text-gray-500 flex\">\n            {formattedTime}\n            {post.tribeId && (\n              <>\n                <span className=\"mx-1\">•</span>\n                <span>Tribe #{post.tribeId}</span>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Poll Question */}\n      <h3 className=\"text-lg font-medium mb-3\">{pollQuestion}</h3>\n      \n      {/* Poll Options */}\n      <div className=\"space-y-2\">\n        {pollOptions.map((option) => {\n          const percentage = totalVotes > 0 ? Math.round((option.votes / totalVotes) * 100) : 0;\n          const isSelected = selectedOption === option.id;\n          \n          return (\n            <button\n              key={option.id}\n              onClick={() => handleVote(option.id)}\n              disabled={hasVoted && !isSelected}\n              className=\"w-full\"\n            >\n              <div className=\"relative\">\n                <div\n                  className={`w-full p-3 rounded-xl border ${\n                    isSelected\n                      ? 'border-[#4ADE80] bg-[#4ADE80]/10'\n                      : 'border-gray-200 hover:bg-gray-50'\n                  }`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <span>{option.text}</span>\n                    {hasVoted && (\n                      <span className=\"text-sm text-gray-500\">{percentage}%</span>\n                    )}\n                  </div>\n                </div>\n                {hasVoted && (\n                  <div\n                    className=\"absolute top-0 left-0 h-full bg-[#4ADE80]/10 rounded-xl transition-all\"\n                    style={{ width: `${percentage}%` }}\n                  />\n                )}\n              </div>\n            </button>\n          );\n        })}\n      </div>\n      \n      {/* Poll Stats */}\n      <div className=\"flex items-center justify-between text-sm text-gray-500 mt-3\">\n        <span>{totalVotes.toLocaleString()} votes</span>\n        {remainingTime && <span>{remainingTime}</span>}\n        {isPollEnded && <span>Poll ended</span>}\n      </div>\n      \n      {/* Post Stats */}\n      {showActions && (\n        <>\n          <div className=\"flex items-center mt-4 text-gray-500 text-sm\">\n            <div className=\"flex items-center\">\n              <span>{likeCount}</span>\n              <span className=\"mx-1\">likes</span>\n            </div>\n            <span className=\"mx-1.5\">•</span>\n            <div className=\"flex items-center\">\n              <span>{commentCount}</span>\n              <span className=\"mx-1\">comments</span>\n            </div>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-gray-100\">\n            <button \n              onClick={handleLike}\n              className=\"flex items-center text-gray-500 hover:text-red-600\"\n            >\n              {liked ? (\n                <HeartIconSolid className=\"h-5 w-5 text-red-600\" />\n              ) : (\n                <HeartIcon className=\"h-5 w-5\" />\n              )}\n              <span className=\"ml-1.5 text-sm\">{likeCount > 0 ? likeCount : ''}</span>\n            </button>\n            \n            <button \n              onClick={handleComment}\n              className=\"flex items-center text-gray-500 hover:text-blue-600\"\n            >\n              <ChatBubbleLeftIcon className=\"h-5 w-5\" />\n              <span className=\"ml-1.5 text-sm\">{commentCount > 0 ? commentCount : ''}</span>\n            </button>\n            \n            <button \n              onClick={handleShare}\n              className=\"flex items-center text-gray-500 hover:text-green-600\"\n            >\n              <ArrowPathRoundedSquareIcon className=\"h-5 w-5\" />\n            </button>\n            \n            <button \n              onClick={handleSave}\n              className=\"flex items-center text-gray-500 hover:text-yellow-600\"\n            >\n              {saved ? (\n                <BookmarkIconSolid className=\"h-5 w-5 text-yellow-600\" />\n              ) : (\n                <BookmarkIcon className=\"h-5 w-5\" />\n              )}\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default PollPost; ","import React, { useState } from 'react';\nimport { Post } from '../../../types/post';\nimport { Bug, ArrowUpRight, Github, Clock } from 'lucide-react';\nimport { \n  tagStyles, \n  buttonStyles,\n  postTypeIconStyles\n} from '../styles/post.styles';\nimport BasePost from '../BasePost';\n\ninterface BountyPostProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\nconst BountyPost: React.FC<BountyPostProps> = (props) => {\n  const { post } = props;\n  \n  // Extract bounty data from metadata\n  const bountyData = React.useMemo(() => {\n    return post.metadata?.bounty || {\n      reward: '0',\n      currency: 'ETH',\n      difficulty: 'medium',\n      deadline: undefined,\n      tags: [],\n      requirements: [],\n      repository: undefined\n    };\n  }, [post.metadata?.bounty]);\n\n  // Get difficulty color\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty.toLowerCase()) {\n      case 'easy':\n        return 'bg-green-500/20 text-green-500';\n      case 'medium':\n        return 'bg-yellow-500/20 text-yellow-500';\n      case 'hard':\n        return 'bg-red-500/20 text-red-500';\n      default:\n        return 'bg-neutral-500/20 text-neutral-400';\n    }\n  };\n\n  // Map tag colors consistently based on tag content\n  const getTagVariant = (tag: string): \"default\" | \"blue\" | \"purple\" | \"green\" | \"yellow\" | \"orange\" | \"red\" | \"indigo\" | \"emerald\" => {\n    const variants = [\"blue\", \"purple\", \"green\", \"yellow\", \"orange\", \"red\", \"indigo\", \"emerald\"] as const;\n    const hash = tag.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return variants[hash % variants.length];\n  };\n\n  return (\n    <BasePost \n      {...props} \n      postType=\"bounty\"\n      typeIcon={<Bug className=\"mr-1 h-3 w-3\" />}\n      typeName=\"Bounty\"\n    >\n      {/* Bounty Content */}\n      <div className=\"space-y-4 mt-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={postTypeIconStyles({ type: 'bounty' })}>\n              <Bug className=\"w-5 h-5 text-emerald-300\" />\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-white\">\n                {bountyData.reward} {bountyData.currency}\n              </div>\n              <div className=\"text-sm text-neutral-400\">Reward</div>\n            </div>\n          </div>\n          <span\n            className={`px-3 py-1 rounded-full text-sm ${getDifficultyColor(bountyData.difficulty)}`}\n          >\n            {bountyData.difficulty.charAt(0).toUpperCase() + bountyData.difficulty.slice(1)}\n          </span>\n        </div>\n\n        {bountyData.deadline && (\n          <div className=\"flex items-center space-x-2 text-sm text-neutral-400\">\n            <Clock className=\"w-4 h-4\" />\n            <span>Deadline: {new Date(bountyData.deadline).toLocaleDateString()}</span>\n          </div>\n        )}\n\n        {/* Requirements */}\n        {bountyData.requirements && bountyData.requirements.length > 0 && (\n          <div className=\"space-y-2 mt-3\">\n            <h4 className=\"text-sm font-medium text-white\">Requirements</h4>\n            <ul className=\"space-y-2\">\n              {bountyData.requirements.map((req: string, index: number) => (\n                <li key={index} className=\"flex items-start space-x-2 text-sm text-neutral-300\">\n                  <span className=\"w-1.5 h-1.5 mt-1.5 rounded-full bg-emerald-500\" />\n                  <span>{req}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {/* Repository Link */}\n        {bountyData.repository && (\n          <a\n            href={bountyData.repository}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"flex items-center space-x-2 px-4 py-2 bg-neutral-800 rounded-full hover:bg-neutral-700 w-fit transition-colors\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <Github className=\"w-4 h-4\" />\n            <span>View Repository</span>\n            <ArrowUpRight className=\"w-4 h-4\" />\n          </a>\n        )}\n\n        {/* Tags */}\n        {bountyData.tags && bountyData.tags.length > 0 && (\n          <div className=\"mt-3 flex flex-wrap gap-2\">\n            {bountyData.tags.map((tag: string, index: number) => (\n              <span \n                key={index} \n                className={tagStyles({ variant: getTagVariant(tag) })}\n              >\n                {tag}\n              </span>\n            ))}\n          </div>\n        )}\n\n        {/* Apply Button */}\n        <button \n          className={buttonStyles({ variant: 'primary', fullWidth: true })}\n          onClick={(e) => {\n            e.stopPropagation();\n            // Apply for bounty logic here\n          }}\n        >\n          Apply for Bounty\n        </button>\n      </div>\n    </BasePost>\n  );\n};\n\nexport default BountyPost; ","import React, { useState } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Post } from '../../../types/post';\nimport UserAvatar from '../../user/UserAvatar';\nimport { \n  HeartIcon, \n  ChatBubbleLeftIcon, \n  ArrowPathRoundedSquareIcon, \n  BookmarkIcon \n} from '@heroicons/react/24/outline';\nimport { \n  HeartIcon as HeartIconSolid, \n  BookmarkIcon as BookmarkIconSolid \n} from '@heroicons/react/24/solid';\nimport { ExternalLink, GitBranch, Globe } from 'lucide-react';\n\ninterface ProjectPostProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\nconst ProjectPost: React.FC<ProjectPostProps> = ({\n  post,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true\n}) => {\n  const [liked, setLiked] = useState(false);\n  const [saved, setSaved] = useState(false);\n  \n  // Format the timestamp\n  const formattedTime = (() => {\n    try {\n      // Check if createdAt is a valid date\n      const timestamp = post.createdAt;\n      if (!timestamp) return 'Unknown time';\n      \n      // Handle both number and string formats\n      const date = new Date(timestamp);\n      if (isNaN(date.getTime())) return 'Invalid date';\n      \n      return formatDistanceToNow(date, { addSuffix: true });\n    } catch (error) {\n      console.error('Error formatting date:', error, post);\n      return 'Unknown time';\n    }\n  })();\n  \n  // Extract project data from metadata\n  const projectData = post.metadata?.project || {\n    github: undefined,\n    website: undefined\n  };\n  \n  // Handle like action\n  const handleLike = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setLiked(!liked);\n    if (onLike) onLike();\n  };\n  \n  // Handle comment action\n  const handleComment = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onComment) onComment();\n  };\n  \n  // Handle share action\n  const handleShare = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onShare) onShare();\n  };\n  \n  // Handle save action\n  const handleSave = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setSaved(!saved);\n  };\n  \n  // Handle card click\n  const handleCardClick = () => {\n    if (onClick) onClick(post.id);\n  };\n\n  // Get author name and profile picture\n  const authorName = typeof post.author === 'string' ? \n    `${post.author.slice(0, 6)}...${post.author.slice(-4)}` : \n    post.author;\n\n  const authorAddress = typeof post.author === 'string' ? \n    post.author : \n    post.author;\n    \n  // Safely get stats values\n  const likeCount = post.stats?.likeCount || 0;\n  const commentCount = post.stats?.commentCount || 0;\n\n  return (\n    <div \n      className=\"bg-white p-4 rounded-lg shadow-sm border border-gray-200 cursor-pointer\"\n      onClick={handleCardClick}\n    >\n      {/* Post Header */}\n      <div className=\"flex items-center mb-3\">\n        <div className=\"h-10 w-10 rounded-full bg-gradient-to-r from-blue-400 to-purple-500 flex items-center justify-center text-white font-bold\">\n          <UserAvatar \n            address={authorAddress}\n            size=\"md\"\n            showUsername={false}\n          />\n        </div>\n        <div className=\"ml-2\">\n          <div className=\"font-medium\">{authorName}</div>\n          <div className=\"text-xs text-gray-500 flex\">\n            {formattedTime}\n            {post.tribeId && (\n              <>\n                <span className=\"mx-1\">•</span>\n                <span>Tribe #{post.tribeId}</span>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Post Content */}\n      {post.content && (\n        <div className=\"text-gray-800 whitespace-pre-line mb-4\">\n          {post.content}\n        </div>\n      )}\n      \n      {/* Project Repository Widget */}\n      <div className=\"mt-4 rounded-xl border border-purple-500/20\">\n        <div className=\"flex items-center justify-between p-4 border-b border-purple-500/10\">\n          <div className=\"text-gray-800 font-medium flex items-center gap-2\">\n            <GitBranch className=\"w-4 h-4\" />\n            <span>Project Repository</span>\n          </div>\n        </div>\n        <div className=\"p-4\">\n          <div className=\"flex items-center gap-3 text-gray-600\">\n            {projectData.github && (\n              <a \n                href={projectData.github}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"flex items-center gap-2 px-3 py-1.5 rounded-lg hover:bg-purple-500/10 transition-colors\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                <GitBranch className=\"w-4 h-4\" />\n                <span>GitHub</span>\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            )}\n            {projectData.website && (\n              <a\n                href={projectData.website}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\" \n                className=\"flex items-center gap-2 px-3 py-1.5 rounded-lg hover:bg-purple-500/10 transition-colors\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                <Globe className=\"w-4 h-4\" />\n                <span>Website</span>\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Post Stats */}\n      {showActions && (\n        <>\n          <div className=\"flex items-center mt-4 text-gray-500 text-sm\">\n            <div className=\"flex items-center\">\n              <span>{likeCount}</span>\n              <span className=\"mx-1\">likes</span>\n            </div>\n            <span className=\"mx-1.5\">•</span>\n            <div className=\"flex items-center\">\n              <span>{commentCount}</span>\n              <span className=\"mx-1\">comments</span>\n            </div>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-gray-100\">\n            <button \n              onClick={handleLike}\n              className=\"flex items-center text-gray-500 hover:text-red-600\"\n            >\n              {liked ? (\n                <HeartIconSolid className=\"h-5 w-5 text-red-600\" />\n              ) : (\n                <HeartIcon className=\"h-5 w-5\" />\n              )}\n              <span className=\"ml-1.5 text-sm\">{likeCount > 0 ? likeCount : ''}</span>\n            </button>\n            \n            <button \n              onClick={handleComment}\n              className=\"flex items-center text-gray-500 hover:text-blue-600\"\n            >\n              <ChatBubbleLeftIcon className=\"h-5 w-5\" />\n              <span className=\"ml-1.5 text-sm\">{commentCount > 0 ? commentCount : ''}</span>\n            </button>\n            \n            <button \n              onClick={handleShare}\n              className=\"flex items-center text-gray-500 hover:text-green-600\"\n            >\n              <ArrowPathRoundedSquareIcon className=\"h-5 w-5\" />\n            </button>\n            \n            <button \n              onClick={handleSave}\n              className=\"flex items-center text-gray-500 hover:text-yellow-600\"\n            >\n              {saved ? (\n                <BookmarkIconSolid className=\"h-5 w-5 text-yellow-600\" />\n              ) : (\n                <BookmarkIcon className=\"h-5 w-5\" />\n              )}\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ProjectPost; ","import React from 'react';\nimport { Post, PostType } from '../../types/post';\nimport { \n  TextPost, \n  ImagePost, \n  VideoPost, \n  LinkPost, \n  EventPost, \n  PollPost, \n  BountyPost,\n  ProjectPost\n} from './types';\n\n// Define a mapping from PostType enum to component type string\nconst POST_TYPE_MAPPING: Record<number, string> = {\n  [PostType.TEXT]: 'text',\n  [PostType.IMAGE]: 'image',\n  [PostType.VIDEO]: 'video',\n  [PostType.LINK]: 'link',\n  [PostType.EVENT]: 'event',\n  [PostType.POLL]: 'poll',\n  [6]: 'bounty', // BOUNTY type\n  [7]: 'project' // PROJECT type\n};\n\ninterface PostTypeMapperProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\n/**\n * PostTypeMapper - Maps a post to the appropriate component based on its type\n * This follows the strategy pattern, allowing us to easily add new post types\n */\nconst PostTypeMapper: React.FC<PostTypeMapperProps> = ({\n  post,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true\n}) => {\n  // Enhanced debug logging for post type detection\n  const renderPostByType = () => {\n    const postTypeString = post.type !== undefined && post.type !== null \n      ? String(post.type) \n      : '';\n      \n    // Debug logging to help diagnose post type issues\n    console.log('PostTypeMapper rendering post:', {\n      id: post.id,\n      rawType: post.type,\n      numericType: typeof post.type === 'number' ? post.type : parseInt(postTypeString, 10),\n      author: post.author,\n      content: post.content?.substring(0, 30) + (post.content && post.content.length > 30 ? '...' : ''),\n      hasMetadata: !!post.metadata,\n      metadataKeys: post.metadata ? Object.keys(post.metadata) : [],\n      hasMedia: post.metadata?.media && post.metadata.media.length > 0,\n      mediaTypes: post.metadata?.media?.map((m: any) => m.type),\n      componentType: typeof post.type === 'number' \n        ? POST_TYPE_MAPPING[post.type] \n        : postTypeString.toLowerCase(),\n    });\n\n    // Special handling for event posts\n    const isEventType = post.type === PostType.EVENT || post.type === 3;\n    const isEventString = postTypeString.toLowerCase() === 'event';\n    const hasEventMetadata = post.metadata?.event !== undefined;\n    \n    console.log('Event detection:', {\n      eventDetails: post.metadata?.event,\n      isEventType,\n      isEventString,\n      hasEventMetadata\n    });\n\n    // Determine the numeric type for consistent comparison\n    const numericType = typeof post.type === 'number' \n      ? post.type \n      : parseInt(postTypeString, 10);\n\n    // Use the numeric type to get the component type string\n    const componentType = isNaN(numericType) \n      ? postTypeString.toLowerCase() \n      : POST_TYPE_MAPPING[numericType];\n\n    // Render the appropriate component based on the post type\n    switch (componentType) {\n      case 'text':\n        return (\n          <TextPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      case 'image':\n        return (\n          <ImagePost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      case 'video':\n        return (\n          <VideoPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      case 'link':\n        return (\n          <LinkPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      case 'event':\n        return (\n          <EventPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      case 'poll':\n        return (\n          <PollPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      case 'bounty':\n        return (\n          <BountyPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      case 'project':\n        return (\n          <ProjectPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      default:\n        console.warn(`Unknown post type: ${post.type}, falling back to TextPost`);\n        return (\n          <TextPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n    }\n  };\n\n  return renderPostByType();\n};\n\nexport default PostTypeMapper; ","import React from 'react';\nimport { useState, useMemo, useEffect } from 'react';\nimport { Clock, TrendingUp, Star, Filter, SlidersHorizontal, Plus, Loader2 } from 'lucide-react';\nimport { Post, PostType } from '../../types/post';\nimport type { FeedItem, BaseFeedItem } from '../../types/feed';\nimport PostTypeMapper from '../posts/PostTypeMapper';\nimport { useDispatch } from 'react-redux';\nimport { setCreatingPost } from '../../store/slices/postsSlice';\nimport clsx from 'clsx';\nimport { isEventPost } from '../../types/event';\n\ninterface UnifiedFeedProps {\n  items: (Post | FeedItem)[];\n  loading?: boolean;\n  showCreateButton?: boolean;\n  tribeId?: string;\n  showFilters?: boolean;\n  onItemClick?: (item: Post | FeedItem) => void;\n}\n\ntype TimeFilter = 'today' | 'week' | 'month' | 'all';\ntype SortFilter = 'trending' | 'latest' | 'top';\n\nconst filterOptions: { value: PostType | 'ALL'; label: string }[] = [\n  { value: 'ALL', label: 'All' },\n  { value: PostType.TEXT, label: 'Text' },\n  { value: PostType.IMAGE, label: 'Image' },\n  { value: PostType.VIDEO, label: 'Video' },\n  { value: PostType.POLL, label: 'Polls' },\n  { value: PostType.EVENT, label: 'Events' },\n  { value: PostType.LINK, label: 'Links' },\n];\n\nexport function UnifiedFeed({ \n  items, \n  loading = false, \n  showCreateButton = true,\n  showFilters = true,\n  onItemClick\n}: UnifiedFeedProps) {\n  const dispatch = useDispatch();\n  const [contentFilter, setContentFilter] = useState<PostType | 'ALL'>('ALL');\n  const [timeFilter, setTimeFilter] = useState<TimeFilter>('all');\n  const [sortFilter, setSortFilter] = useState<SortFilter>('latest');\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);\n\n  // Debug effect to track item changes\n  useEffect(() => {\n  }, [items]);\n\n  const timeFilters: { value: TimeFilter; label: string }[] = [\n    { value: 'today', label: 'Today' },\n    { value: 'week', label: 'This Week' },\n    { value: 'month', label: 'This Month' },\n    { value: 'all', label: 'All Time' }\n  ];\n\n  const sortFilters: { value: SortFilter; label: string; icon: typeof Clock }[] = [\n    { value: 'trending', label: 'Trending', icon: TrendingUp },\n    { value: 'latest', label: 'Latest', icon: Clock },\n    { value: 'top', label: 'Top', icon: Star }\n  ];\n\n  const handleLike = (_id: string) => {\n    // Implementation removed\n  };\n\n  const handleComment = (_id: string) => {\n    // Implementation removed\n  };\n\n  const handleShare = (_id: string) => {\n    // Implementation removed\n  };\n\n  const handleReport = (_id: string) => {\n    // Implementation removed\n  };\n\n  const openCreatePostModal = () => {\n    dispatch(setCreatingPost(true));\n  };\n\n  const filteredItems = useMemo(() => {\n    if (!items || items.length === 0) {\n      return [];\n    }\n    \n    let filtered = [...items];\n    \n    // Filter by content type with improved matching\n    if (contentFilter !== 'ALL') {\n      filtered = filtered.filter(item => {\n        if ('content' in item && 'type' in item) {\n          const post = item as Post;\n\n          // Special handling for event posts\n          if (contentFilter === PostType.EVENT) {\n            return isEventPost(post);\n          }\n          \n          // Convert both to strings for comparison\n          const typeStr = String(post.type).toLowerCase();\n          const filterStr = String(contentFilter).toLowerCase();\n          \n          // Check for exact match\n          if (typeStr === filterStr) {\n            return true;\n          }\n          \n          // Check for TEXT (0)\n          if (contentFilter === PostType.TEXT && \n              (post.type === 0 || typeStr === 'text' || typeStr === '0')) {\n            return true;\n          }\n          \n          // Check for numeric types\n          if (typeof contentFilter === 'number') {\n            const postTypeNum = parseInt(typeStr, 10);\n            if (!isNaN(postTypeNum) && postTypeNum === contentFilter) {\n              return true;\n            }\n            \n            // Try enum name match\n            const enumName = PostType[contentFilter];\n            if (enumName && typeStr === enumName.toLowerCase()) {\n              return true;\n            }\n          }\n          \n          return false;\n        }\n        return false;\n      });\n    }\n    \n    // Apply time filter \n    const now = new Date();\n    if (timeFilter !== 'all') {\n      filtered = filtered.filter(item => {\n        const timestamp = 'createdAt' in item ? item.createdAt : (item as BaseFeedItem).createdAt;\n        const itemDate = new Date(timestamp);\n        \n        switch (timeFilter) {\n          case 'today': {\n            return itemDate.getDate() === now.getDate() && \n                   itemDate.getMonth() === now.getMonth() &&\n                   itemDate.getFullYear() === now.getFullYear();\n          }\n          case 'week': {\n            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n            return itemDate >= weekAgo;\n          }\n          case 'month': {\n            return itemDate.getMonth() === now.getMonth() &&\n                   itemDate.getFullYear() === now.getFullYear();\n          }\n          default: {\n            return true;\n          }\n        }\n      });\n    }\n\n    // Apply sort filter with updated stats properties\n    switch (sortFilter) {\n      case 'trending':\n        filtered.sort((a, b) => {\n          const aStats = 'stats' in a ? a.stats : { likeCount: 0, commentCount: 0 };\n          const bStats = 'stats' in b ? b.stats : { likeCount: 0, commentCount: 0 };\n          const aEngagement = (aStats?.likeCount || 0) + ((aStats?.commentCount || 0) * 2);\n          const bEngagement = (bStats?.likeCount || 0) + ((bStats?.commentCount || 0) * 2);\n          return bEngagement - aEngagement;\n        });\n        break;\n      case 'latest':\n        filtered.sort((a, b) => {\n          const aTimestamp = 'createdAt' in a ? \n            new Date(a.createdAt).getTime() : \n            new Date((a as BaseFeedItem).createdAt).getTime();\n          const bTimestamp = 'createdAt' in b ? \n            new Date(b.createdAt).getTime() : \n            new Date((b as BaseFeedItem).createdAt).getTime();\n          return bTimestamp - aTimestamp;\n        });\n        break;\n      case 'top':\n        filtered.sort((a, b) => {\n          const aStats = 'stats' in a ? a.stats : { likeCount: 0 };\n          const bStats = 'stats' in b ? b.stats : { likeCount: 0 };\n          return ((bStats?.likeCount || 0) - (aStats?.likeCount || 0));\n        });\n        break;\n    }\n\n    return filtered;\n  }, [items, contentFilter, timeFilter, sortFilter]);\n\n  const renderItem = (item: Post | FeedItem) => {\n    // Check if item is a Post\n    if ('content' in item && 'type' in item) {\n      return (\n        <div key={item.id} className=\"mb-4\">\n          <PostTypeMapper\n            post={item as Post}\n            onLike={() => handleLike(item.id)}\n            onComment={() => handleComment(item.id)}\n            onShare={() => handleShare(item.id)}\n            onReport={() => handleReport(item.id)}\n            onClick={() => onItemClick?.(item)}\n          />\n        </div>\n      );\n    }\n    \n    // Handle other item types if needed\n    return null;\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      {showFilters && (\n        <>\n          {/* Content type filters */}\n          <div className=\"flex items-center justify-between p-4 bg-transparent\">\n            <div className=\"flex items-center space-x-2 overflow-x-auto scrollbar-hide\">\n              <div className=\"flex rounded-lg bg-gray-800/30 p-1\">\n                {filterOptions.map((option) => (\n                  <button\n                    key={option.value}\n                    onClick={() => setContentFilter(option.value)}\n                    className={clsx(\n                      \"px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200\",\n                      contentFilter === option.value \n                        ? \"bg-blue-600 text-white shadow-md\" \n                        : \"text-gray-400 hover:text-gray-200 hover:bg-gray-700/30\"\n                    )}\n                  >\n                    {option.label}\n                  </button>\n                ))}\n              </div>\n            </div>\n            \n            <button \n              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n              className=\"p-2.5 bg-gray-800/30 border border-gray-700/50 rounded-lg text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors\"\n            >\n              <SlidersHorizontal className=\"w-5 h-5\" />\n            </button>\n          </div>\n          \n          {/* Advanced filters */}\n          {showAdvancedFilters && (\n            <div className=\"px-4 py-3 bg-gray-800/20 border-t border-b border-gray-700/30\">\n              <div className=\"mb-3\">\n                <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Sort By</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {sortFilters.map(({ value, label, icon: Icon }) => (\n                    <button\n                      key={value}\n                      onClick={() => setSortFilter(value)}\n                      className={clsx(\n                        'px-3 py-1.5 rounded-full flex items-center space-x-2 text-sm transition-colors',\n                        sortFilter === value\n                          ? 'bg-blue-600 text-white'\n                          : 'text-gray-400 hover:text-white bg-gray-800/30 hover:bg-gray-700/50'\n                      )}\n                    >\n                      <Icon className=\"w-4 h-4\" />\n                      <span>{label}</span>\n                    </button>\n                  ))}\n                </div>\n              </div>\n              \n              <div>\n                <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Time Range</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {timeFilters.map(({ value, label }) => (\n                    <button\n                      key={value}\n                      onClick={() => setTimeFilter(value)}\n                      className={clsx(\n                        'px-3 py-1 rounded-full text-sm transition-colors',\n                        timeFilter === value\n                          ? 'bg-blue-600 text-white'\n                          : 'text-gray-400 hover:text-white bg-gray-800/30 hover:bg-gray-700/50'\n                      )}\n                    >\n                      {label}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n\n      {/* Items feed */}\n      <div className=\"px-4 pb-4 space-y-4\">\n        {loading ? (\n          <div className=\"flex flex-col items-center justify-center py-16\">\n            <Loader2 className=\"w-10 h-10 text-blue-500 animate-spin mb-4\" />\n            <p className=\"text-gray-400\">Loading content...</p>\n          </div>\n        ) : filteredItems.length > 0 ? (\n          <div className=\"space-y-4\">\n            {filteredItems.map(renderItem)}\n          </div>\n        ) : (\n          <div className=\"flex flex-col items-center justify-center py-16 text-center\">\n            <div className=\"w-16 h-16 bg-gray-800/50 border border-gray-700/50 rounded-full flex items-center justify-center mb-4\">\n              <Filter className=\"w-8 h-8 text-gray-500\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-white mb-1\">No content found</h3>\n            <p className=\"text-gray-400 mb-6 max-w-md\">\n              {contentFilter === 'ALL' \n                ? 'No posts or content available.' \n                : `No ${contentFilter === PostType.EVENT ? 'event' : \n                    contentFilter === PostType.POLL ? 'poll' :\n                    contentFilter === PostType.TEXT ? 'text' :\n                    contentFilter === PostType.IMAGE ? 'image' :\n                    contentFilter === PostType.VIDEO ? 'video' :\n                    contentFilter === PostType.LINK ? 'link' :\n                    ''} content found. Try a different filter or create a new post.`}\n            </p>\n            {showCreateButton && (\n              <button\n                onClick={openCreatePostModal}\n                className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors shadow-md\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Post\n              </button>\n            )}\n          </div>\n        )}\n        \n        {/* Create post floating button (for mobile) */}\n        {showCreateButton && (\n          <div className=\"fixed bottom-6 right-6 md:hidden\">\n            <button\n              onClick={openCreatePostModal}\n              className=\"w-12 h-12 rounded-full bg-blue-600 text-white shadow-lg flex items-center justify-center hover:bg-blue-700 transition-colors\"\n            >\n              <Plus className=\"w-6 h-6\" />\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n} ","import React, { useState, useEffect, useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Plus, Users } from 'lucide-react';\nimport { Feed } from '../components/feed/Feed';\nimport { FeedLayout } from '../components/layout/FeedLayout';\nimport { TribeSidebar } from '../components/sidebars/TribeSidebar';\nimport { CreatePost } from '../components/CreatePost';\nimport { useTribesData } from '../hooks/useTribesData';\nimport { usePostsManagement } from '../hooks/usePostsManagement';\nimport { Tribe } from '../types/tribe';\nimport { \n  getTribeAvatar, \n  getTribeDescription, \n  getTribeCoverImage,\n  getTribeTopics\n} from '../utils/tribeHelpers';\nimport { blockchain } from '../utils/blockchainUtils';\nimport { getContractAddresses } from '../constants/contracts';\nimport { ABIS } from '../config/abis';\nimport { ethers } from 'ethers';\nimport { useNotification } from '../contexts/NotificationContext';\nimport { PostType } from '../types/post';\nimport { UnifiedFeed } from '../components/feed/UnifiedFeed';\n\n// Define Topic type directly since it might be missing from tribe.ts\ninterface Topic {\n  id: string;\n  name: string;\n}\n\nimport type { FeedItem } from '../types/feed';\nimport clsx from 'clsx';\n\nexport function TribeView() {\n  const { tribeId } = useParams();\n  const { tribes, isLoading: isLoadingTribes } = useTribesData();\n  const { posts, loading: postsLoading, error: postsError, fetchFeed } = usePostsManagement();\n  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);\n  const [isJoined, setIsJoined] = useState(false);\n  const [isJoining, setIsJoining] = useState(false);\n  const [showCreatePost, setShowCreatePost] = useState(false);\n  const [activeTab, setActiveTab] = useState<'all' | 'media' | 'events'>('all');\n  const { showNotification } = useNotification();\n  \n  // Find tribe by ID with proper type checking\n  const tribe = useMemo(() => {\n    return tribes?.find(t => t.id.toString() === tribeId?.toString());\n  }, [tribes, tribeId]);\n\n  // Extract tribe display properties using helper functions to avoid linter errors\n  const tribeDisplay = useMemo(() => {\n    if (!tribe) return null;\n    \n    return {\n      id: tribe.id,\n      name: tribe.name,\n      description: getTribeDescription(tribe),\n      avatar: getTribeAvatar(tribe),\n      coverImage: getTribeCoverImage(tribe),\n      memberCount: tribe.memberCount,\n      // We can safely cast the tribe to any inside this helper fn\n      isVerified: (tribe as any).isVerified || false,\n      members: (tribe as any).members || [],\n      topics: getTribeTopics(tribe)\n    };\n  }, [tribe]);\n\n  // Check if the user is a member of the tribe\n  useEffect(() => {\n    const checkMembership = async () => {\n      if (!tribeId) return;\n      \n      try {\n        // Connect to blockchain\n        await blockchain.connect();\n        \n        // Get user address\n        const userAddress = await blockchain.getAddress();\n        \n        // Get current chain ID\n        const chainId = await blockchain.getCurrentChainId();\n        \n        // Get contract addresses for the current chain\n        const addresses = getContractAddresses(chainId);\n        \n        // Get provider and signer\n        const provider = await blockchain.getProvider();\n        const signer = await blockchain.getSigner();\n        \n        if (!signer) {\n          console.error('No signer available');\n          return;\n        }\n        \n        // Create contract instance\n        const tribeControllerContract = new ethers.Contract(\n          addresses.TRIBE_CONTROLLER,\n          ABIS.TribeController,\n          signer\n        );\n        \n        // Check if user is a member\n        const isMember = await tribeControllerContract.isMember(\n          Number(tribeId),\n          userAddress\n        );\n\n        console.log(`[TribeView]: isMember: ${isMember} ${userAddress} ${tribeId}`);\n        \n        setIsJoined(isMember);\n        console.log(`User ${userAddress} is${isMember ? '' : ' not'} a member of tribe ${tribeId}`);\n      } catch (error) {\n        console.error('Error checking tribe membership:', error);\n      }\n    };\n    \n    checkMembership();\n  }, [tribeId]);\n\n  // Handle joining or leaving the tribe\n  const handleToggleMembership = async () => {\n    if (!tribeId) return;\n    \n    try {\n      setIsJoining(true);\n      \n      // Connect to blockchain\n      await blockchain.connect();\n      \n      // Get current chain ID\n      const chainId = await blockchain.getCurrentChainId();\n      \n      // Get contract addresses for the current chain\n      const addresses = getContractAddresses(chainId);\n      \n      // Get provider and signer\n      const provider = await blockchain.getProvider();\n      const signer = await blockchain.getSigner();\n      \n      if (!signer) {\n        throw new Error('No signer available');\n      }\n      \n      // Create contract instance\n      const tribeControllerContract = new ethers.Contract(\n        addresses.TRIBE_CONTROLLER,\n        ABIS.TribeController,\n        signer\n      );\n      \n      if (isJoined) {\n        // Leave tribe\n        const tx = await tribeControllerContract.leaveTribe(Number(tribeId), {\n          gasLimit: 300000\n        });\n        \n        showNotification('Leaving tribe transaction has been sent', 'info');\n        \n        console.log('Leave tribe transaction sent:', tx.hash);\n        \n        // Wait for transaction confirmation\n        const receipt = await tx.wait();\n        console.log('Leave tribe transaction confirmed:', receipt);\n        \n        setIsJoined(false);\n        \n        showNotification('You have left the tribe', 'success');\n      } else {\n        console.log(`[TribeView]: Joining tribe ${tribeId}`);\n        // Join tribe\n        // First check if the tribe requires approval\n        const tribeDetails = await tribeControllerContract.getTribeDetails(Number(tribeId));\n        console.log(`[TribeView]: Tribe details: ${tribeDetails}`,`[tribeDetailsJoinType]: joinType: ${tribeDetails?.joinType}`);\n        // JoinType: 0 = Open, 1 = Approval, 2 = Invite, 3 = NFT\n        const joinType = tribeDetails.joinType;\n        \n        if (joinType == 0) {\n          console.log(`[TribeView]: Joining open tribe ${tribeId}`);\n          // Open tribe - join directly\n          const tx = await tribeControllerContract.joinTribe(Number(tribeId), {\n            gasLimit: 300000\n          });\n\n          console.log(`[TribeView]: Joining tribe ${tribeId} with tx: ${tx.hash}`);\n          showNotification('Joining tribe transaction has been sent', 'info');\n          \n          console.log('Join tribe transaction sent:', tx.hash);\n          \n          // Wait for transaction confirmation\n          const receipt = await tx.wait();\n          console.log('Join tribe transaction confirmed:', receipt);\n          \n          setIsJoined(true);\n          \n          showNotification('You have joined the tribe', 'success');\n        } else if (joinType === 1) {\n          // Approval required\n          console.log(`[TribeView]: Approval required for tribe ${tribeId}`);\n          const tx = await tribeControllerContract.requestToJoinTribe(Number(tribeId), {\n            gasLimit: 300000\n          });\n          \n          showNotification('Your request to join the tribe has been sent', 'info');\n          \n          console.log('Request to join tribe sent:', tx.hash);\n          \n          // Wait for transaction confirmation\n          const receipt = await tx.wait();\n          console.log('Request to join tribe confirmed:', receipt);\n          \n          showNotification('Your request is pending approval from tribe admins', 'info');\n        } else {\n          console.log(`[TribeView]: Other join types (invite, NFT) for tribe ${tribeId} ${joinType}`);\n          // Other join types (invite, NFT) - show appropriate message\n          showNotification('This tribe requires an invitation or specific NFT to join', 'error');\n        }\n      }\n    } catch (error) {\n      console.error('Error toggling tribe membership:', error);\n      \n      showNotification(`Failed to ${isJoined ? 'leave' : 'join'} tribe: ${(error as Error).message}`, 'error');\n    } finally {\n      setIsJoining(false);\n    }\n  };\n\n  // Debug logging to help troubleshoot tribe data issues - with proper dependencies\n  useEffect(() => {\n    if (tribe) {\n      console.log('Found tribe:', tribe);\n      console.log('Formatted tribe display:', tribeDisplay);\n      \n    } else if (tribes?.length > 0) {\n      console.log('Tribes available but none match ID:', tribeId);\n      console.log('Available tribe IDs:', tribes.map(t => t.id));\n    }\n  }, [tribe, tribes, tribeId]); // Removed tribeDisplay to prevent infinite loop\n\n  // Update the tribePosts useMemo to filter by tribeId\n  const tribePosts = useMemo(() => {\n    if (!posts || !tribeId) return [];\n    \n    // Convert posts object to array\n    const postsArray = Object.values(posts);\n    console.log(`[TribeView]: Filtering ${postsArray.length} posts for tribe ${tribeId}`);\n    \n    // Filter posts by the current tribe ID\n    const filtered = postsArray.filter(post => {\n      const postTribeId = post.tribeId?.toString();\n      const currentTribeId = tribeId.toString();\n      const isMatch = postTribeId === currentTribeId;\n      \n      if (isMatch) {\n        console.log(`[TribeView]: Post ${post.id} matches tribe ${tribeId}`);\n      }\n      \n      return isMatch;\n    });\n    \n    console.log(`[TribeView]: Found ${filtered.length} posts for tribe ${tribeId}`);\n    return filtered;\n  }, [posts, tribeId]);\n\n  // Update the filteredPosts useMemo to filter from tribePosts by type\n  const filteredPosts = useMemo(() => {\n    if (activeTab === 'all') {\n      return tribePosts;\n    } else if (activeTab === 'media') {\n      // Filter for image and video posts\n      return tribePosts.filter(post => {\n        const type = post.type;\n        return type === PostType.IMAGE || type === PostType.VIDEO;\n      });\n    } else if (activeTab === 'events') {\n      // Filter for event posts\n      return tribePosts.filter(post => post.type === PostType.EVENT);\n    }\n    \n    return tribePosts;\n  }, [tribePosts, activeTab]);\n\n  // Add this function to fetch posts by type\n  const fetchPostsByType = async (type: 'all' | 'media' | 'events') => {\n    if (!tribeId) return;\n    \n    try {\n      // Connect to blockchain\n      await blockchain.connect();\n      \n      // Get current chain ID\n      const chainId = await blockchain.getCurrentChainId();\n      \n      // Get contract addresses for the current chain\n      const addresses = getContractAddresses(chainId);\n      \n      // Get provider and signer\n      const provider = await blockchain.getProvider();\n      const signer = await blockchain.getSigner();\n      \n      if (!signer) {\n        console.error('No signer available');\n        return;\n      }\n      \n      // Create contract instance\n      const tribeControllerContract = new ethers.Contract(\n        addresses.TRIBE_CONTROLLER,\n        ABIS.TribeController,\n        signer\n      );\n      \n      // Get all posts for the tribe\n      const posts = await tribeControllerContract.getTribePosts(Number(tribeId));\n      console.log(`[TribeView]: Fetched ${posts.length} posts for tribe ${tribeId}`);\n      \n      // Filter posts by type\n      let filtered = posts;\n      \n      if (type === 'media') {\n        // Filter for image and video posts\n        filtered = posts.filter((post: any) => {\n          const metadata = JSON.parse(post.metadata || '{}');\n          return metadata.type === 'IMAGE' || metadata.type === 'VIDEO' || metadata.type === 'RICH_MEDIA';\n        });\n      } else if (type === 'events') {\n        // Filter for event posts\n        filtered = posts.filter((post: any) => {\n          const metadata = JSON.parse(post.metadata || '{}');\n          return metadata.type === 'EVENT';\n        });\n      }\n      \n      // Format posts for display\n      const formattedPosts = filtered.map((post: any) => {\n        const metadata = JSON.parse(post.metadata || '{}');\n        return {\n          id: post.id.toString(),\n          content: metadata.content || '',\n          title: metadata.title || '',\n          author: post.creator,\n          tribeId: Number(tribeId),\n          createdAt: post.createdAt ? Number(post.createdAt) * 1000 : Date.now(),\n          type: metadata.type || 'TEXT',\n          metadata\n        };\n      });\n      \n      // setFilteredPosts(formattedPosts);\n      \n    } catch (error) {\n      console.error('Error fetching posts by type:', error);\n    }\n  };\n\n  // Update the activeTab state to trigger post filtering\n  useEffect(() => {\n    fetchPostsByType(activeTab);\n  }, [activeTab, tribeId]);\n\n  // Update the tab click handlers\n  const handleTabClick = (tab: 'all' | 'media' | 'events') => {\n    setActiveTab(tab);\n  };\n\n  // Update the Feed component to use filteredPosts when available\n  const postsToDisplay = filteredPosts.length > 0 ? filteredPosts : tribePosts;\n\n  // Replace the fetchPostsByTribe effect with fetchFeed\n  useEffect(() => {\n    console.log('[TribeView]: Fetching all posts using fetchFeed');\n    fetchFeed().catch(error => {\n      console.error('Error fetching feed:', error);\n    });\n  }, [fetchFeed]);\n\n  // Update the post creation success handler to use fetchFeed\n  const handlePostCreationSuccess = (postId: string) => {\n    console.log(`[TribeView]: Post created successfully with ID: ${postId}`);\n    // Refresh all posts\n    fetchFeed();\n    // Close the create post modal\n    setShowCreatePost(false);\n  };\n\n  if (isLoadingTribes) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-pulse bg-accent/10 rounded-xl h-48 w-96\" />\n      </div>\n    );\n  }\n\n  if (!tribe || !tribeDisplay) {\n    return (\n      <div className=\"text-center py-12 text-muted-foreground\">\n        Tribe not found\n      </div>\n    );\n  }\n\n  const handleItemClick = (item: any) => {\n    // Handle item clicks here\n    console.log('Clicked item:', item);\n  };\n\n  const rightSidebar = (\n    <div className=\"space-y-4\">\n      {/* Tribe Info Card */}\n      <div className=\"bg-card rounded-xl overflow-hidden\">\n        {/* Cover Image */}\n        <div className=\"h-24 relative\">\n          {tribeDisplay.coverImage && (\n            <img\n              src={tribeDisplay.coverImage}\n              alt={tribeDisplay.name}\n              className=\"w-full h-full object-cover\"\n              onError={(e) => {\n                (e.target as HTMLImageElement).src = '/images/default-cover.png';\n              }}\n            />\n          )}\n          <div className=\"absolute inset-0 bg-gradient-to-t from-background/60 to-transparent\" />\n        </div>\n\n        {/* Tribe Info */}\n        <div className=\"p-4\">\n          <div className=\"flex items-center space-x-3 mt-2\">\n            <img\n              src={tribeDisplay.avatar}\n              alt={tribeDisplay.name}\n              className=\"w-16 h-16 rounded-xl border-4 border-background\"\n              onError={(e) => {\n                (e.target as HTMLImageElement).src = '/images/default-avatar.png';\n              }}\n            />\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-semibold flex items-center gap-1\">\n                {tribeDisplay.name}\n                {tribeDisplay.isVerified && (\n                  <span className=\"text-theme-primary text-sm\">✓</span>\n                )}\n              </h3>\n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                <Users className=\"w-4 h-4 mr-1\" />\n                <span>{tribeDisplay.memberCount.toLocaleString()} members</span>\n              </div>\n            </div>\n          </div>\n          <p className=\"mt-3 text-sm text-muted-foreground\">{tribeDisplay.description}</p>\n          <button\n            onClick={handleToggleMembership}\n            disabled={isJoining}\n            className={clsx(\n              'w-full mt-4 px-4 py-2 rounded-lg text-sm font-medium transition-colors',\n              isJoining ? 'bg-gray-700/50 cursor-not-allowed' : \n              isJoined\n                ? 'bg-gray-700/10 hover:bg-gray-700/20 text-white'\n                : 'bg-theme-primary hover:bg-theme-primary/90 text-white'\n            )}\n          >\n            {isJoining ? 'Processing...' : isJoined ? 'Joined' : 'Join Tribe'}\n          </button>\n        </div>\n      </div>\n\n      {/* Topics */}\n      <TribeSidebar\n        members={tribeDisplay.members}\n        topics={tribeDisplay.topics}\n        onTopicSelect={setSelectedTopic}\n        selectedTopicId={selectedTopic?.id}\n      />\n    </div>\n  );\n\n  return (\n    <FeedLayout rightSidebar={rightSidebar}>\n      <div className=\"min-w-[320px] overflow-x-hidden\">\n        {/* Feed Controls */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-6\">\n          <div className=\"flex space-x-4 overflow-x-auto\">\n            <button\n              onClick={() => handleTabClick('all')}\n              className={clsx(\n                'px-4 py-2 rounded-full whitespace-nowrap',\n                activeTab === 'all'\n                  ? 'bg-foreground/10 text-foreground'\n                  : 'text-muted-foreground hover:text-foreground'\n              )}\n            >\n              All Posts\n            </button>\n            <button\n              onClick={() => handleTabClick('media')}\n              className={clsx(\n                'px-4 py-2 rounded-full whitespace-nowrap',\n                activeTab === 'media'\n                  ? 'bg-foreground/10 text-foreground'\n                  : 'text-muted-foreground hover:text-foreground'\n              )}\n            >\n              Media\n            </button>\n            <button\n              onClick={() => handleTabClick('events')}\n              className={clsx(\n                'px-4 py-2 rounded-full whitespace-nowrap',\n                activeTab === 'events'\n                  ? 'bg-foreground/10 text-foreground'\n                  : 'text-muted-foreground hover:text-foreground'\n              )}\n            >\n              Events\n            </button>\n          </div>\n          <button\n            onClick={() => setShowCreatePost(true)}\n            className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-theme-primary text-white rounded-full font-medium hover:bg-theme-primary/90 transition-colors w-full sm:w-auto\"\n          >\n            <Plus className=\"w-5 h-5\" />\n            <span>Create Post</span>\n          </button>\n        </div>\n\n        {/* Feed */}\n        <div className=\"space-y-4\">\n          {postsLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-theme-primary\"></div>\n            </div>\n          ) : filteredPosts.length > 0 ? (\n            <UnifiedFeed \n              items={filteredPosts}\n              loading={postsLoading}\n              showCreateButton={false}\n              onItemClick={handleItemClick}\n            />\n          ) : (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              <h3 className=\"text-lg font-medium text-white mb-2\">No posts yet</h3>\n              <p className=\"text-gray-400 mb-6\">\n                Be the first to create a post in this tribe!\n              </p>\n              <button\n                onClick={() => setShowCreatePost(true)}\n                className=\"inline-flex items-center px-4 py-2 bg-theme-primary text-white rounded-lg hover:bg-theme-primary/90 transition-colors\"\n              >\n                <Plus className=\"w-5 h-5 mr-2\" />\n                Create Post\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Create Post Modal */}\n      {showCreatePost && (\n        <div className=\"fixed inset-0 bg-background/80 backdrop-blur-sm flex items-end sm:items-center justify-center z-50 p-4\">\n          <div className=\"bg-card w-full max-w-[600px] rounded-t-xl sm:rounded-xl\">\n            <CreatePost \n              onClose={() => setShowCreatePost(false)} \n              isOpen={showCreatePost}\n              tribeId={tribe.id}\n              onSuccess={handlePostCreationSuccess}\n            />\n          </div>\n        </div>\n      )}\n    </FeedLayout>\n  );\n} ","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { TribeView } from './TribeView';\n\nexport function TribeDetails() {\n  // TribeDetails is just a wrapper for TribeView\n  // No need to duplicate the hooks as TribeView already handles this logic\n  return <TribeView />;\n} ","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useTribesManagement } from '../hooks/useTribesManagement';\nimport { Image, X, Plus, Upload, Lock, Globe } from 'lucide-react';\n\nexport function CreateTribe() {\n  const navigate = useNavigate();\n  const { createTribe } = useTribesManagement();\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [isPrivate, setIsPrivate] = useState(false);\n  const [avatar, setAvatar] = useState<File | null>(null);\n  const [avatarPreview, setAvatarPreview] = useState<string | null>(null);\n  const [coverImage, setCoverImage] = useState<File | null>(null);\n  const [coverPreview, setCoverPreview] = useState<string | null>(null);\n  const [tags, setTags] = useState<string[]>([]);\n  const [tagInput, setTagInput] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [success, setSuccess] = useState(false);\n\n  // Handle avatar selection\n  const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      setAvatar(file);\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setAvatarPreview(event.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Handle cover image selection\n  const handleCoverChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      setCoverImage(file);\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setCoverPreview(event.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Add tag\n  const handleAddTag = () => {\n    if (tagInput && !tags.includes(tagInput) && tags.length < 5) {\n      setTags([...tags, tagInput]);\n      setTagInput('');\n    }\n  };\n\n  // Remove tag\n  const handleRemoveTag = (tagToRemove: string) => {\n    setTags(tags.filter(tag => tag !== tagToRemove));\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n\n    // Validate inputs\n    if (!name.trim()) {\n      setError('Tribe name is required');\n      return;\n    }\n\n    if (!description.trim()) {\n      setError('Description is required');\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      // Call the createTribe function from the hook with correct parameters\n      const metadataObj = {\n        name: name.trim(),\n        description,\n        privacy: isPrivate ? 'private' : 'public',\n        tags,\n        avatar: avatarPreview,\n        coverImage: coverPreview,\n        createdAt: new Date().toISOString()\n      };\n      console.log('Creating tribe with metadata:', metadataObj);\n      const metadataStr = JSON.stringify(metadataObj);\n      const joinType = isPrivate ? 1 : 0; // 0 = public, 1 = private\n      await createTribe(name, metadataStr);\n      \n      setSuccess(true);\n\n      // Redirect after successful creation (with a short delay to show success)\n      setTimeout(() => {\n        navigate('/tribes');\n      }, 2000);\n    } catch (err) {\n      console.error('Error creating tribe:', err);\n      setError(err instanceof Error ? err.message : 'Failed to create tribe');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-3xl mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-white\">Create a New Tribe</h1>\n        <p className=\"text-gray-400 mt-2\">Create a community around your interests, project, or organization.</p>\n      </div>\n\n      {success ? (\n        <div className=\"bg-green-500/20 border border-green-500/30 rounded-lg p-4 text-center\">\n          <h3 className=\"text-xl font-semibold text-white mb-2\">Tribe Created Successfully!</h3>\n          <p className=\"text-gray-300\">Redirecting you to the tribes page...</p>\n        </div>\n      ) : (\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Cover Image Upload */}\n          <div className=\"relative\">\n            <div className={`h-48 w-full rounded-xl overflow-hidden bg-gray-800/50 border-2 border-dashed ${coverPreview ? 'border-transparent' : 'border-gray-700'}`}>\n              {coverPreview ? (\n                <>\n                  <img src={coverPreview} alt=\"Cover Preview\" className=\"w-full h-full object-cover\" />\n                  <button \n                    type=\"button\"\n                    onClick={() => {\n                      setCoverImage(null);\n                      setCoverPreview(null);\n                    }}\n                    className=\"absolute top-2 right-2 bg-black/70 text-white p-1.5 rounded-full hover:bg-black/90\"\n                  >\n                    <X size={18} />\n                  </button>\n                </>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-full text-gray-400\">\n                  <Image className=\"w-10 h-10 mb-2\" />\n                  <p className=\"text-sm\">Upload cover image (optional)</p>\n                </div>\n              )}\n            </div>\n            \n            <input \n              type=\"file\" \n              id=\"cover-image\" \n              accept=\"image/*\" \n              onChange={handleCoverChange} \n              className=\"hidden\" \n            />\n            \n            {!coverPreview && (\n              <label \n                htmlFor=\"cover-image\" \n                className=\"absolute bottom-4 right-4 bg-gray-800 text-white px-3 py-2 rounded-lg flex items-center cursor-pointer hover:bg-gray-700\"\n              >\n                <Upload size={16} className=\"mr-2\" />\n                <span>Upload Cover</span>\n              </label>\n            )}\n          </div>\n\n          {/* Basic Info */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {/* Avatar Upload */}\n            <div className=\"col-span-1\">\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">Avatar</label>\n              <div className=\"relative\">\n                <div className={`w-24 h-24 rounded-xl overflow-hidden bg-gray-800/50 border-2 border-dashed ${avatarPreview ? 'border-transparent' : 'border-gray-700'}`}>\n                  {avatarPreview ? (\n                    <img src={avatarPreview} alt=\"Avatar Preview\" className=\"w-full h-full object-cover\" />\n                  ) : (\n                    <div className=\"flex items-center justify-center h-full text-gray-400\">\n                      <Plus size={24} />\n                    </div>\n                  )}\n                </div>\n                \n                <input \n                  type=\"file\" \n                  id=\"avatar\" \n                  accept=\"image/*\" \n                  onChange={handleAvatarChange} \n                  className=\"hidden\" \n                />\n                \n                <label \n                  htmlFor=\"avatar\" \n                  className=\"absolute -bottom-1 -right-1 bg-blue-600 text-white p-1.5 rounded-full cursor-pointer hover:bg-blue-700\"\n                >\n                  <Plus size={14} />\n                </label>\n              </div>\n            </div>\n\n            {/* Name and Description */}\n            <div className=\"col-span-3 space-y-4\">\n              <div>\n                <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-300 mb-2\">Tribe Name*</label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                  className=\"w-full px-3 py-2 bg-gray-800/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"Enter a name for your tribe\"\n                  maxLength={50}\n                />\n              </div>\n              \n              <div>\n                <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-300 mb-2\">Description*</label>\n                <textarea\n                  id=\"description\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  className=\"w-full px-3 py-2 bg-gray-800/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\"\n                  placeholder=\"What is your tribe about?\"\n                  rows={3}\n                  maxLength={300}\n                />\n                <p className=\"text-gray-400 text-xs mt-1\">{description.length}/300 characters</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Privacy Settings */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">Privacy</label>\n            <div className=\"flex space-x-4\">\n              <button\n                type=\"button\"\n                onClick={() => setIsPrivate(false)}\n                className={`flex items-center space-x-3 p-3 rounded-lg border ${\n                  !isPrivate \n                    ? 'border-blue-500 bg-blue-500/10' \n                    : 'border-gray-700 bg-gray-800/50 hover:bg-gray-800'\n                }`}\n              >\n                <Globe className={`w-5 h-5 ${!isPrivate ? 'text-blue-500' : 'text-gray-400'}`} />\n                <div className=\"text-left\">\n                  <div className={`font-medium ${!isPrivate ? 'text-blue-500' : 'text-white'}`}>Public</div>\n                  <div className=\"text-xs text-gray-400\">Anyone can join and view content</div>\n                </div>\n              </button>\n              \n              <button\n                type=\"button\"\n                onClick={() => setIsPrivate(true)}\n                className={`flex items-center space-x-3 p-3 rounded-lg border ${\n                  isPrivate \n                    ? 'border-blue-500 bg-blue-500/10' \n                    : 'border-gray-700 bg-gray-800/50 hover:bg-gray-800'\n                }`}\n              >\n                <Lock className={`w-5 h-5 ${isPrivate ? 'text-blue-500' : 'text-gray-400'}`} />\n                <div className=\"text-left\">\n                  <div className={`font-medium ${isPrivate ? 'text-blue-500' : 'text-white'}`}>Private</div>\n                  <div className=\"text-xs text-gray-400\">Members must be approved to join</div>\n                </div>\n              </button>\n            </div>\n          </div>\n\n          {/* Tags */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">Tags (up to 5)</label>\n            <div className=\"flex flex-wrap gap-2 mb-2\">\n              {tags.map((tag) => (\n                <div key={tag} className=\"flex items-center bg-gray-800 text-white px-3 py-1 rounded-full\">\n                  <span className=\"text-sm\">{tag}</span>\n                  <button\n                    type=\"button\"\n                    onClick={() => handleRemoveTag(tag)}\n                    className=\"ml-2 text-gray-400 hover:text-white\"\n                  >\n                    <X size={14} />\n                  </button>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"flex\">\n              <input\n                type=\"text\"\n                value={tagInput}\n                onChange={(e) => setTagInput(e.target.value)}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter') {\n                    e.preventDefault();\n                    handleAddTag();\n                  }\n                }}\n                className=\"flex-1 px-3 py-2 bg-gray-800/50 border border-r-0 border-gray-700 rounded-l-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Add a tag\"\n                disabled={tags.length >= 5}\n              />\n              <button\n                type=\"button\"\n                onClick={handleAddTag}\n                disabled={tags.length >= 5 || !tagInput.trim()}\n                className=\"px-3 py-2 bg-gray-700 text-white rounded-r-lg hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Add\n              </button>\n            </div>\n            <p className=\"text-gray-400 text-xs mt-1\">Tags help people discover your tribe</p>\n          </div>\n\n          {/* Error Message */}\n          {error && (\n            <div className=\"bg-red-500/20 border border-red-500/30 text-red-200 px-4 py-3 rounded-lg\">\n              {error}\n            </div>\n          )}\n\n          {/* Submit Buttons */}\n          <div className=\"flex items-center justify-end space-x-4 mt-8\">\n            <button\n              type=\"button\"\n              onClick={() => navigate('/tribes')}\n              className=\"px-4 py-2 text-gray-300 hover:text-white\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"px-6 py-2.5 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors disabled:opacity-70 disabled:cursor-not-allowed\"\n            >\n              {isSubmitting ? 'Creating...' : 'Create Tribe'}\n            </button>\n          </div>\n        </form>\n      )}\n    </div>\n  );\n} ","export enum OnboardingStep {\n  WALLET_CONNECTION = 'WALLET_CONNECTION',\n  PROFILE_CREATION = 'PROFILE_CREATION',\n  FOLLOW_SUGGESTIONS = 'FOLLOW_SUGGESTIONS',\n  COMPLETED = 'COMPLETED'\n}\n\nexport interface OnboardingState {\n  currentStep: OnboardingStep\n  isCompleted: boolean\n  walletAddress?: string\n  chainId?: number\n  profileId?: string\n}\n\nexport const ONBOARDING_STORAGE_KEY = 'tribes_onboarding'\n\nexport const STEP_TITLES = {\n  [OnboardingStep.WALLET_CONNECTION]: 'Connect Wallet',\n  [OnboardingStep.PROFILE_CREATION]: 'Create Profile',\n  [OnboardingStep.FOLLOW_SUGGESTIONS]: 'Follow Users',\n  [OnboardingStep.COMPLETED]: 'Welcome to Tribes'\n}\n\nexport const INITIAL_ONBOARDING_STATE: OnboardingState = {\n  currentStep: OnboardingStep.WALLET_CONNECTION,\n  isCompleted: false\n} ","import { Address, keccak256, toHex, Log } from 'viem';\nimport { getPublicClient, getContracts } from '../config/contracts';\nimport { blockchain } from './blockchainUtils';\n\nexport interface ProfileMetadata {\n  avatar: string;\n  bio: string;\n  createdAt: number;\n}\n\nexport interface ProfileData {\n  tokenId: string;\n  username: string;\n  metadata?: ProfileMetadata;\n  owner: string;\n}\n\nexport interface ProfileSearchResult {\n  tokenId: string;\n  username: string;\n  bio: string;\n  avatarNFT: string;\n  avatarTokenId: string;\n  website: string;\n  twitter: string;\n}\n\ninterface ProfileResponse {\n  username: string;\n  metadataURI: string;\n  owner: string;\n}\n\n// Make storage key chain-specific\nconst getProfileStorageKey = (chainId: number) => `tribes_profile_data_${chainId}`;\n\n// Save profile data to local storage with chain ID\nconst saveProfileToStorage = (profile: ProfileData, chainId: number) => {\n  localStorage.setItem(getProfileStorageKey(chainId), JSON.stringify(profile));\n};\n\n// // Get profile data from local storage for specific chain\n// const getProfileFromStorage = (chainId: number): ProfileData | null => {\n//   const stored = localStorage.getItem(getProfileStorageKey(chainId));\n//   if (stored) {\n//     const profile = JSON.parse(stored);\n//     return profile;\n//   }\n//   return null;\n// };\n\n// Read Operations\nexport async function searchProfileByUsername(username: string, chainId: number): Promise<ProfileSearchResult | null> {\n  try {\n    const contracts = getContracts(chainId);\n    const client = getPublicClient(chainId);\n\n    // First check if username exists\n    const exists = await client.readContract({\n      address: contracts.profileNFTMinter.address,\n      abi: contracts.profileNFTMinter.abi,\n      functionName: 'usernameExists',\n      args: [username]\n    });\n\n    if (!exists) {\n      return null;\n    }\n    \n    // Get token ID by username\n    const tokenId = await client.readContract({\n      address: contracts.profileNFTMinter.address,\n      abi: contracts.profileNFTMinter.abi,\n      functionName: 'getTokenIdByUsername',\n      args: [username]\n    }) as bigint;\n\n    // Get profile data using token ID\n    const profileData = await client.readContract({\n      address: contracts.profileNFTMinter.address,\n      abi: contracts.profileNFTMinter.abi,\n      functionName: 'getProfileByTokenId',\n      args: [tokenId]\n    }) as ProfileResponse;\n\n    if (!profileData) return null;\n\n    const owner = await client.readContract({\n      address: contracts.profileNFTMinter.address,\n      abi: contracts.profileNFTMinter.abi,\n      functionName: 'ownerOf',\n      args: [tokenId]\n    });\n\n    return {\n      tokenId: tokenId.toString(),\n      username: profileData.username,\n      bio: profileData.metadataURI,\n      avatarNFT: owner as string,\n      avatarTokenId: '0',\n      website: '',\n      twitter: ''\n    };\n  } catch (error) {\n    console.error('Error searching profile:', error);\n    return null;\n  }\n}\n\nexport async function getProfileByAddress(address: Address, chainId: number): Promise<ProfileData | null> {\n  // If chainId is undefined, log an error and try to get it\n  if (!chainId) {\n    console.error('❌ Chain ID is undefined in getProfileByAddress, using fallback');\n    try {\n      // Try to get chainId from ethereum provider\n      const provider = window.ethereum;\n      if (provider) {\n        const rawChainId = await provider.request({ method: 'eth_chainId' });\n        chainId = parseInt(rawChainId as string, 16);\n        console.log('🔄 Retrieved chainId from provider:', chainId);\n      } else {\n        chainId = 20143; // Your target chain as fallback\n        console.warn('⚠️ No provider, using fallback chainId:', chainId);\n      }\n    } catch (e) {\n      console.error('❌ Failed to get chainId, using fallback:', e);\n      chainId = 20143; // Your target chain as fallback\n    }\n  }\n\n  const contracts = getContracts(chainId);\n  const client = getPublicClient(chainId);\n  \n  try {\n    // Ensure chainId is included in every log object\n    const chainIdForLogs = chainId; // Store in a separate variable to be safe\n    \n    console.log('🔍 Checking profile on chain:', {\n      chainId: chainIdForLogs, // Use the safe variable\n      address,\n      contractAddress: contracts.profileNFTMinter.address,\n      rpcUrl: client.transport.url\n    });\n    \n    // 1. Get token balance for the address\n    const balance = await client.readContract({\n      address: contracts.profileNFTMinter.address,\n      abi: contracts.profileNFTMinter.abi,\n      functionName: 'balanceOf',\n      args: [address]\n    }) as bigint;\n\n    console.log('📊 Balance check result:', {\n      balance: balance.toString(),\n      chainId: chainIdForLogs, // Use the safe variable\n      address\n    });\n\n    // Check if user has any profiles\n    if (balance === BigInt(0)) {\n      console.log('❌ No profile found - balance is 0', { chainId: chainIdForLogs, address });\n      return null;\n    }\n\n    // 2. Find the first token ID owned by this address\n    let userTokenId: number | null = null;\n    \n    for (let i = 0; i < 10; i++) {\n      try {\n        console.log('🔍 Checking token ownership:', { tokenId: i, chainId: chainIdForLogs });\n        \n        const owner = await client.readContract({\n          address: contracts.profileNFTMinter.address,\n          abi: contracts.profileNFTMinter.abi,\n          functionName: 'ownerOf',\n          args: [BigInt(i)]\n        }) as string;\n\n        console.log('👤 Token owner:', { tokenId: i, owner, chainId: chainIdForLogs });\n\n        if (owner.toLowerCase() === address.toLowerCase()) {\n          userTokenId = i;\n          console.log('✅ Found matching token:', { tokenId: i, chainId: chainIdForLogs });\n          break;\n        }\n      } catch (e) {\n        console.log('⚠️ Token check error:', { tokenId: i, chainId: chainIdForLogs, error: e });\n        continue;\n      }\n    }\n\n    if (userTokenId === null) {\n      console.log('❌ No owned token found', { chainId: chainIdForLogs, address });\n      return null;\n    }\n    \n    console.log('🔍 Fetching profile data:', { tokenId: userTokenId, chainId: chainIdForLogs });\n    \n    const profileResponse = await client.readContract({\n      address: contracts.profileNFTMinter.address,\n      abi: contracts.profileNFTMinter.abi,\n      functionName: 'getProfileByTokenId',\n      args: [BigInt(userTokenId)]\n    }) as [string, string, string];\n\n    const [username, metadataURI, owner] = profileResponse;\n    \n    console.log('📦 Raw profile data:', { \n      username, \n      metadataURI, \n      owner,\n      chainId: chainIdForLogs \n    });\n\n    // 4. Verify owner matches\n    if (owner.toLowerCase() !== address.toLowerCase()) {\n      console.log('❌ Owner mismatch:', {\n        expectedOwner: address.toLowerCase(),\n        actualOwner: owner.toLowerCase(),\n        chainId: chainIdForLogs\n      });\n      return null;\n    }\n\n    let metadata: ProfileMetadata;\n    try {\n      const parsedMetadata = JSON.parse(metadataURI);\n      metadata = {\n        avatar: parsedMetadata.avatar || '',\n        bio: parsedMetadata.bio || '',\n        createdAt: parsedMetadata.createdAt || Date.now()\n      };\n      console.log('✅ Parsed metadata:', { metadata, chainId: chainIdForLogs });\n    } catch (e) {\n      console.warn('⚠️ Failed to parse metadata:', { metadataURI, error: e, chainId: chainIdForLogs });\n      metadata = {\n        avatar: '',\n        bio: '',\n        createdAt: Date.now()\n      };\n    }\n\n    const profile: ProfileData = {\n      tokenId: userTokenId.toString(),\n      owner: address,\n      username,\n      metadata\n    };\n\n    console.log('✅ Profile found:', { profile, chainId: chainIdForLogs });\n    return profile;\n\n  } catch (error: any) {\n    console.error('❌ Profile fetch error:', {\n      error,\n      chainId, // Use the original chainId variable\n      address,\n      contractAddress: contracts.profileNFTMinter.address,\n      rpcUrl: client.transport.url\n    });\n    return null;\n  }\n}\n\n// Write Operations - These now use the blockchain utility\nexport async function createProfile(\n  username: string,\n  metadata: ProfileMetadata,\n  chainId: number\n): Promise<{ success: boolean; tokenId?: string; error?: string }> {\n  try {\n    const metadataString = JSON.stringify(metadata);\n    const hash = await blockchain.mintProfile({\n      username,\n      metadataURI: metadataString\n    });\n\n    // Get tokenId from event\n    const client = getPublicClient(chainId);\n    const receipt = await client.waitForTransactionReceipt({ hash });\n    \n    const eventSignature = 'ProfileCreated(uint256,address,string)';\n    const eventTopic = keccak256(toHex(eventSignature));\n    const createEvent = receipt.logs.find(\n      (log: Log) => log.topics[0] === eventTopic\n    );\n    \n    const tokenId = createEvent ? Number(createEvent.topics[1]).toString() : hash;\n\n    // Save initial profile data to storage\n    const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    const profileData: ProfileData = {\n      tokenId,\n      username,\n      metadata,\n      owner: account\n    };\n    saveProfileToStorage(profileData, chainId);\n\n    return { success: true, tokenId };\n  } catch (error: any) {\n    console.error('❌ Error creating profile:', error);\n    return { \n      success: false, \n      error: error.message || 'Failed to create profile'\n    };\n  }\n}\n\nexport async function updateProfile(\n  tokenId: string,\n  metadata: ProfileMetadata,\n  chainId: number\n): Promise<{ success: boolean; error?: string }> {\n  try {\n    const metadataString = JSON.stringify(metadata);\n    await blockchain.updateProfile({\n      tokenId: Number(tokenId),\n      metadata: metadataString\n    });\n\n    // Update local storage\n    const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    const profile = await getProfileByAddress(account as Address, chainId);\n    if (profile) {\n      const updatedProfile = { ...profile, metadata };\n      saveProfileToStorage(updatedProfile, chainId);\n    }\n\n    return { success: true };\n  } catch (error: any) {\n    console.error('❌ Error updating profile:', error);\n    return { \n      success: false, \n      error: error.message || 'Failed to update profile'\n    };\n  }\n} ","import { useState, useEffect, useCallback, useRef } from 'react'\nimport {\n  OnboardingStep,\n  OnboardingState,\n  INITIAL_ONBOARDING_STATE,\n  ONBOARDING_STORAGE_KEY\n} from '../constants/onboarding'\nimport { getProfileByAddress } from '../utils/profile'\nimport { Address } from 'viem'\n\nconst WALLET_CHECK_TIMEOUT = 3000 // 3 seconds\nconst MAX_RETRIES = 3\n\nexport const useOnboarding = () => {\n  const [state, setState] = useState<OnboardingState>(() => {\n    const stored = localStorage.getItem(ONBOARDING_STORAGE_KEY)\n    return stored ? JSON.parse(stored) : INITIAL_ONBOARDING_STATE\n  })\n  \n  const retryCount = useRef(0)\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>()\n\n  // Effect to check wallet connection status\n  useEffect(() => {\n    const checkWalletConnection = async () => {\n      \n      if (!window.ethereum) {\n        console.log('❌ No ethereum provider found')\n        return\n      }\n\n      try {\n        // Set timeout for wallet check\n        const timeoutPromise = new Promise((_, reject) => {\n          timeoutRef.current = setTimeout(() => {\n            reject(new Error('Wallet check timeout'))\n          }, WALLET_CHECK_TIMEOUT)\n        })\n\n        // Race between wallet check and timeout\n        const accounts = await Promise.race([\n          window.ethereum.request({ method: 'eth_accounts' }),\n          timeoutPromise\n        ]) as string[]\n\n        clearTimeout(timeoutRef.current)\n        \n        const isConnected = accounts && accounts.length > 0\n        const address = isConnected ? accounts[0] : undefined\n        const chainId = isConnected ? \n          await window.ethereum.request({ method: 'eth_chainId' }) : undefined\n\n\n        if (isConnected && address) {\n          \n          // Check for existing profile\n          const profile = await getProfileByAddress(address as Address, chainId as number)\n\n          setState(prev => ({\n            ...prev,\n            walletAddress: address,\n            chainId: chainId ? parseInt(chainId as string) : undefined,\n            currentStep: profile ? OnboardingStep.COMPLETED : OnboardingStep.PROFILE_CREATION,\n            isCompleted: !!profile,\n            profileId: profile?.tokenId\n          }))\n\n          // Update wallet data atomically\n          const walletData = { \n            isConnected, \n            address, \n            chainId,\n            profileId: profile?.tokenId \n          }\n          localStorage.setItem('wallet_data', JSON.stringify(walletData))\n          \n          retryCount.current = 0 // Reset retry count on success\n        } else {\n          throw new Error('No wallet connected')\n        }\n      } catch (error) {\n        console.error('❌ Error checking wallet connection:', error)\n        \n        // Clear timeout if it exists\n        if (timeoutRef.current) {\n          clearTimeout(timeoutRef.current)\n        }\n\n        // Retry logic\n        if (retryCount.current < MAX_RETRIES) {\n          retryCount.current++\n          setTimeout(checkWalletConnection, 1000) // Retry after 1 second\n        } else {\n          console.log('❌ Max retries reached, resetting to initial state')\n          setState(prev => ({\n            ...prev,\n            walletAddress: undefined,\n            chainId: undefined,\n            currentStep: OnboardingStep.WALLET_CONNECTION\n          }))\n        }\n      }\n    }\n\n    checkWalletConnection()\n\n    // Listen for account and chain changes\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', checkWalletConnection)\n      window.ethereum.on('chainChanged', checkWalletConnection)\n      \n      return () => {\n        if (timeoutRef.current) {\n          clearTimeout(timeoutRef.current)\n        }\n        window.ethereum.removeListener('accountsChanged', checkWalletConnection)\n        window.ethereum.removeListener('chainChanged', checkWalletConnection)\n      }\n    }\n  }, []) // Empty dependency array since we want this to run only on mount\n\n  // Save state changes to localStorage\n  useEffect(() => {\n    localStorage.setItem(ONBOARDING_STORAGE_KEY, JSON.stringify(state))\n  }, [state])\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n    }\n  }, [])\n\n  const getCurrentStep = useCallback((): OnboardingStep => {\n    \n    // Check wallet data from localStorage to ensure sync\n    const walletData = localStorage.getItem('wallet_data')\n    const { isConnected, address, profileId } = walletData ? JSON.parse(walletData) : {}\n    \n    if (!isConnected || !address) {\n      return OnboardingStep.WALLET_CONNECTION\n    }\n    \n    if (!profileId) {\n      return OnboardingStep.PROFILE_CREATION\n    }\n    \n    if (!state.isCompleted) {\n      return OnboardingStep.FOLLOW_SUGGESTIONS\n    }\n    \n    return OnboardingStep.COMPLETED\n  }, [state])\n\n  const updateWalletInfo = useCallback(async (walletAddress: string, chainId: number) => {\n    \n    // Check for existing profile\n    const profile = await getProfileByAddress(walletAddress as Address, chainId as number)\n\n    setState(prev => ({\n      ...prev,\n      walletAddress,\n      chainId,\n      currentStep: profile ? OnboardingStep.COMPLETED : OnboardingStep.PROFILE_CREATION,\n      isCompleted: !!profile,\n      profileId: profile?.tokenId\n    }))\n    \n    localStorage.setItem('wallet_data', JSON.stringify({\n      isConnected: true,\n      address: walletAddress,\n      chainId,\n      profileId: profile?.tokenId\n    }))\n  }, [])\n\n  const clearWalletInfo = useCallback(() => {\n    setState(INITIAL_ONBOARDING_STATE)\n    localStorage.removeItem('wallet_data')\n    localStorage.removeItem(ONBOARDING_STORAGE_KEY)\n  }, [])\n\n  const updateProfileId = useCallback((profileId: string) => {\n    setState(prev => ({\n      ...prev,\n      profileId,\n      currentStep: OnboardingStep.FOLLOW_SUGGESTIONS\n    }))\n  }, [])\n\n  const completeOnboarding = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      currentStep: OnboardingStep.COMPLETED,\n      isCompleted: true\n    }))\n  }, [])\n\n  const resetOnboarding = useCallback(() => {\n    setState(INITIAL_ONBOARDING_STATE)\n    localStorage.removeItem('wallet_data')\n    localStorage.removeItem(ONBOARDING_STORAGE_KEY)\n  }, [])\n\n  return {\n    ...state,\n    getCurrentStep,\n    updateWalletInfo,\n    clearWalletInfo,\n    updateProfileId,\n    completeOnboarding,\n    resetOnboarding\n  }\n} ","import React, { useState, useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useProfile } from '../hooks/useProfile'\nimport { useOnboarding } from '../hooks/useOnboarding'\nimport { COLORS, SPACING, BORDER_RADIUS, SHADOWS } from '../constants/theme'\n\ninterface ProfileFormData {\n  username: string\n  avatar: string\n  bio: string\n}\n\nconst inputStyles = {\n  base: `block w-full rounded-lg border-2 shadow-sm \n    focus:ring-2 focus:ring-opacity-50 focus:outline-none\n    transition-colors duration-200`,\n  default: `border-gray-700 bg-gray-900 text-white placeholder-gray-500\n    focus:border-green-500 focus:ring-green-500/20`,\n  error: `border-red-500 bg-gray-900 text-white placeholder-gray-500\n    focus:border-red-500 focus:ring-red-500/20`,\n  disabled: `border-gray-600 bg-gray-800 text-gray-400 cursor-not-allowed`\n}\n\nconst buttonStyles = {\n  base: `w-full flex justify-center items-center py-3 px-6 rounded-lg font-medium\n    transition-all duration-200 ease-in-out transform`,\n  primary: `bg-green-500 hover:bg-green-600 active:bg-green-700 \n    text-white shadow-lg shadow-green-500/20 \n    hover:shadow-green-500/30 hover:-translate-y-0.5`,\n  secondary: `bg-gray-800 hover:bg-gray-700 active:bg-gray-600\n    text-gray-300 hover:text-white border border-gray-700\n    hover:border-gray-600`,\n  disabled: `bg-gray-600 text-gray-300 cursor-not-allowed opacity-50`\n}\n\nexport const ProfileCreation: React.FC = () => {\n  const navigate = useNavigate()\n  const { createProfile, skipProfileCreation, hasSkippedProfileCreation, checkProfileOwnership } = useProfile()\n  const { updateProfileId, completeOnboarding } = useOnboarding()\n  const [isLoading, setIsLoading] = useState(false)\n  const [isSkipping, setIsSkipping] = useState(false)\n  const [existingProfile, setExistingProfile] = useState<{ tokenId: string; username: string } | null>(null)\n  const [formData, setFormData] = useState<ProfileFormData>({\n    username: '',\n    avatar: '',\n    bio: ''\n  })\n\n  useEffect(() => {\n    // Check if user has already skipped or has a profile\n    const checkStatus = async () => {\n      const walletClient = await window.ethereum?.request({ method: 'eth_requestAccounts' })\n      if (walletClient?.[0]) {\n        const hasSkipped = await hasSkippedProfileCreation(walletClient[0])\n        if (hasSkipped) {\n          completeOnboarding()\n          navigate('/dashboard')\n          return\n        }\n\n        // Check for existing profile\n        const profile = await checkProfileOwnership(walletClient[0])\n        if (profile) {\n          setExistingProfile({ tokenId: profile.tokenId, username: profile.username })\n          setFormData(prev => ({\n            ...prev,\n            username: profile.username,\n            avatar: profile.metadata?.avatar || '',\n            bio: profile.metadata?.bio || ''\n          }))\n          // If username exists, mark onboarding as complete\n          updateProfileId(profile.tokenId)\n          completeOnboarding()\n          navigate('/dashboard')\n        }\n      }\n    }\n    checkStatus()\n  }, [hasSkippedProfileCreation, checkProfileOwnership, completeOnboarding, navigate, updateProfileId])\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      const metadata = JSON.stringify({\n        avatar: formData.avatar || `https://api.dicebear.com/7.x/avataaars/svg?seed=${formData.username}`,\n        bio: formData.bio,\n        createdAt: Date.now()\n      });\n\n      const hash = await createProfile(formData.username, metadata);\n      if (hash) {\n        updateProfileId(hash.toString());\n        navigate('/onboarding/follow');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const handleSkip = async () => {\n    setIsSkipping(true)\n    try {\n      const skipped = await skipProfileCreation()\n      if (skipped) {\n        completeOnboarding()\n        navigate('/dashboard')\n      }\n    } finally {\n      setIsSkipping(false)\n    }\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target\n    setFormData(prev => ({ ...prev, [name]: value }))\n  }\n\n  if (existingProfile) {\n    return (\n      <div className=\"w-full max-w-lg mx-auto px-4 py-8\">\n        <div className=\"bg-gray-800/50 backdrop-blur-sm p-8 rounded-xl border border-gray-700/50 shadow-xl\">\n          <h2 className=\"text-3xl font-bold mb-8 text-white text-center\">\n            Profile Already Exists\n          </h2>\n          <p className=\"text-gray-300 text-center mb-6\">\n            You already have a profile with username: <span className=\"text-green-500 font-semibold\">{existingProfile.username}</span>\n          </p>\n          <button\n            onClick={() => navigate('/dashboard')}\n            className={buttonStyles.primary}\n          >\n            Go to Dashboard\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"w-full max-w-lg mx-auto px-4 py-8\">\n      <div className=\"bg-gray-800/50 backdrop-blur-sm p-8 rounded-xl border border-gray-700/50 shadow-xl\">\n        <h2 className=\"text-3xl font-bold mb-8 text-white text-center\">\n          Create Your Profile\n        </h2>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Username Input */}\n          <div className=\"space-y-2\">\n            <label \n              htmlFor=\"username\" \n              className=\"block text-sm font-medium text-gray-200\"\n            >\n              Username\n            </label>\n            <input\n              type=\"text\"\n              name=\"username\"\n              id=\"username\"\n              required\n              value={formData.username}\n              onChange={handleChange}\n              disabled={!!existingProfile}\n              className={`${inputStyles.base} ${existingProfile ? inputStyles.disabled : inputStyles.default}`}\n              placeholder=\"Enter your username\"\n            />\n          </div>\n\n          {/* Avatar Selection */}\n          <div className=\"space-y-2\">\n            <label \n              className=\"block text-sm font-medium text-gray-200\"\n            >\n              Avatar\n            </label>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <img\n                  src={formData.avatar || `https://api.dicebear.com/7.x/avataaars/svg?seed=${formData.username || 'default'}`}\n                  alt=\"Avatar preview\"\n                  className=\"w-20 h-20 rounded-full bg-gray-700 ring-2 ring-green-500/20\"\n                />\n                <div className=\"absolute inset-0 rounded-full shadow-inner\"></div>\n              </div>\n              <input\n                type=\"text\"\n                name=\"avatar\"\n                value={formData.avatar}\n                onChange={handleChange}\n                className={`${inputStyles.base} ${inputStyles.default}`}\n                placeholder=\"Avatar URL (optional)\"\n              />\n            </div>\n          </div>\n\n          {/* Bio Input */}\n          <div className=\"space-y-2\">\n            <label \n              htmlFor=\"bio\" \n              className=\"block text-sm font-medium text-gray-200\"\n            >\n              Bio\n            </label>\n            <textarea\n              name=\"bio\"\n              id=\"bio\"\n              rows={3}\n              value={formData.bio}\n              onChange={handleChange}\n              className={`${inputStyles.base} ${inputStyles.default} resize-none`}\n              placeholder=\"Tell us about yourself\"\n            />\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-4\">\n            <button\n              type=\"submit\"\n              disabled={isLoading || !!existingProfile}\n              className={`${buttonStyles.base} ${\n                isLoading || existingProfile ? buttonStyles.disabled : buttonStyles.primary\n              }`}\n            >\n              {isLoading ? (\n                <>\n                  <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Creating Profile...\n                </>\n              ) : (\n                'Create Profile'\n              )}\n            </button>\n\n            {!existingProfile && (\n              <button\n                type=\"button\"\n                onClick={handleSkip}\n                disabled={isSkipping}\n                className={`${buttonStyles.base} ${\n                  isSkipping ? buttonStyles.disabled : buttonStyles.secondary\n                }`}\n              >\n                {isSkipping ? 'Skipping...' : 'Skip for now'}\n              </button>\n            )}\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n} \n","import React, { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useOnboarding } from '../hooks/useOnboarding'\n\n// Mock data for suggested users\nconst SUGGESTED_USERS = [\n  {\n    id: '1',\n    username: 'alice',\n    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=alice',\n    bio: 'Web3 Developer & DeFi enthusiast'\n  },\n  {\n    id: '2',\n    username: 'bob',\n    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=bob',\n    bio: 'NFT Artist & Collector'\n  },\n  {\n    id: '3',\n    username: 'charlie',\n    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=charlie',\n    bio: 'Blockchain Researcher'\n  }\n]\n\nexport const FollowSuggestions: React.FC = () => {\n  const navigate = useNavigate()\n  const { completeOnboarding } = useOnboarding()\n  const [selectedUsers, setSelectedUsers] = useState<Set<string>>(new Set())\n\n  const toggleUser = (userId: string) => {\n    setSelectedUsers(prev => {\n      const newSet = new Set(prev)\n      if (newSet.has(userId)) {\n        newSet.delete(userId)\n      } else {\n        newSet.add(userId)\n      }\n      return newSet\n    })\n  }\n\n  const handleComplete = () => {\n    // Here you would typically make API calls to follow the selected users\n    // For now, we'll just complete the onboarding\n    completeOnboarding()\n    navigate('/dashboard')\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">\n          Follow some interesting people\n        </h2>\n        <p className=\"mt-2 text-sm text-gray-600\">\n          Follow at least 3 people to get started\n        </p>\n      </div>\n\n      <div className=\"space-y-4\">\n        {SUGGESTED_USERS.map(user => (\n          <div\n            key={user.id}\n            className={`flex items-center justify-between p-4 rounded-lg border ${\n              selectedUsers.has(user.id)\n                ? 'border-green-500 bg-green-50'\n                : 'border-gray-200'\n            }`}\n          >\n            <div className=\"flex items-center space-x-4\">\n              <img\n                src={user.avatar}\n                alt={user.username}\n                className=\"w-12 h-12 rounded-full\"\n              />\n              <div>\n                <h3 className=\"font-medium text-gray-900\">@{user.username}</h3>\n                <p className=\"text-sm text-gray-500\">{user.bio}</p>\n              </div>\n            </div>\n            <button\n              onClick={() => toggleUser(user.id)}\n              className={`px-4 py-2 rounded-full text-sm font-medium ${\n                selectedUsers.has(user.id)\n                  ? 'bg-green-500 text-white'\n                  : 'bg-gray-100 text-gray-900'\n              }`}\n            >\n              {selectedUsers.has(user.id) ? 'Following' : 'Follow'}\n            </button>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"flex justify-between\">\n        <button\n          onClick={() => navigate('/dashboard')}\n          className=\"text-gray-600 hover:text-gray-900\"\n        >\n          Skip for now\n        </button>\n        <button\n          onClick={handleComplete}\n          disabled={selectedUsers.size < 3}\n          className={`px-6 py-2 rounded-full font-medium ${\n            selectedUsers.size >= 3\n              ? 'bg-green-500 text-white hover:bg-green-600'\n              : 'bg-gray-200 text-gray-500 cursor-not-allowed'\n          }`}\n        >\n          Continue\n        </button>\n      </div>\n    </div>\n  )\n} ","import React from 'react'\nimport { Navigate } from 'react-router-dom'\nimport { OnboardingStep } from '../constants/onboarding'\nimport { useOnboarding } from '../hooks/useOnboarding'\nimport { Navigation } from '../components/Navigation'\nimport { WalletConnect } from '../components/WalletConnect'\nimport { ProfileCreation } from './ProfileCreation'\nimport { FollowSuggestions } from '../components/FollowSuggestions'\n\nexport const Onboarding: React.FC = () => {\n  const { getCurrentStep } = useOnboarding()\n  const currentStep = getCurrentStep()\n\n  // If onboarding is completed, redirect to dashboard\n  if (currentStep === OnboardingStep.COMPLETED) {\n    return <Navigate to=\"/dashboard\" replace />\n  }\n\n  // Render the appropriate component based on current step\n  const renderStep = () => {\n    switch (currentStep) {\n      case OnboardingStep.WALLET_CONNECTION:\n        return <WalletConnect />\n      case OnboardingStep.PROFILE_CREATION:\n        return <ProfileCreation />\n      case OnboardingStep.FOLLOW_SUGGESTIONS:\n        return <FollowSuggestions />\n      default:\n        return null\n    }\n  }\n\n  return (\n    <>\n      <style>\n        {`\n          body {\n            background-color: #111827;\n            min-height: 100vh;\n            margin: 0;\n          }\n        `}\n      </style>\n      <div className=\"min-h-screen flex flex-col bg-gradient-to-b from-gray-900 to-black\">\n        <Navigation onMenuClick={() => {}} />\n        <main className=\"flex-1 flex items-center justify-center\">\n          <div className=\"w-full\">\n            {renderStep()}\n          </div>\n        </main>\n      </div>\n    </>\n  )\n} ","import React from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { Info } from 'lucide-react';\n\n// Comment out the extended interfaces for now\n// We will properly map topics to post tags in a future implementation\n\n/**\n * TopicsView - Display a global view of topics across the platform\n * \n * TODO: Implement proper mapping between topics and post tags\n */\nexport function TopicsView() {\n  const { topicId } = useParams();\n\n  return (\n    <div className=\"min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        <div className=\"bg-gray-800/30 border border-gray-700/50 rounded-xl p-6 text-center\">\n          <Info className=\"w-12 h-12 mx-auto text-blue-400 mb-4\" />\n          <h1 className=\"text-2xl font-bold mb-2\">Topics View</h1>\n          <p className=\"text-gray-300 mb-4\">\n            This feature is currently under development. Topics will soon be mapped to post tags \n            to provide a unified view of content across tribes.\n          </p>\n          <p className=\"text-gray-400\">\n            Topic ID: {topicId || 'None selected'}\n          </p>\n          <div className=\"mt-6\">\n            <Link \n              to=\"/\"\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              Return to Home\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n} ","import { TopicsView } from '../components/topics/TopicsView';\n\nexport function TopicDetails() {\n  return <TopicsView />;\n} ","import { ReactNode, useEffect, useState, useRef } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useProfile } from '../hooks/useProfile';\nimport { getWalletClient } from '../config/contracts';\nimport { useNetwork } from '../hooks/useNetwork';\nimport { FUSE_EMBER } from '../constants/networks';\nimport { useTribesSDK } from '../contexts/TribesContext';\n\ninterface AuthGuardProps {\n  children: ReactNode;\n}\n\nconst STORAGE_KEY = 'tribes_auth_state';\nconst DEBUG = true; // Toggle debugging\n\ninterface AuthState {\n  address: string;\n  chainId: number;\n  profile?: {\n    tokenId: string;\n    username: string;\n    metadata: {\n      uri: string;\n    };\n  };\n  timestamp: number;\n}\n\n// Debug function to track auth flow\nconst logDebug = (message: string, data?: any) => {\n  if (!DEBUG) return;\n  const timestamp = new Date().toISOString().split('T')[1].split('.')[0];\n  if (data) {\n    console.log(`[AuthGuard:${timestamp}] ${message}`, data);\n  } else {\n    console.log(`[AuthGuard:${timestamp}] ${message}`);\n  }\n};\n\nexport const AuthGuard = ({ children }: AuthGuardProps) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { getProfileByAddress, isLoading: isSdkLoading } = useProfile();\n  const { chainId, switchNetwork } = useNetwork();\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastCheckedChainId, setLastCheckedChainId] = useState<number>();\n  const [retryCount, setRetryCount] = useState(0);\n  const profileCheckInProgress = useRef(false);\n  const MAX_RETRIES = 3;\n  const SDK_INIT_TIMEOUT = 5000; // 5 seconds timeout for SDK initialization\n  const { sdk, isInitialized } = useTribesSDK();\n  \n  // Track navigation attempts to prevent loops\n  const navigationAttempts = useRef(new Map<string, number>());\n  const MAX_NAVIGATION_ATTEMPTS = 3;\n  const sdkInitTimer = useRef<NodeJS.Timeout>();\n\n  // Load stored auth state\n  const loadStoredAuthState = (): AuthState | null => {\n    try {\n      // First check tribes_auth_state\n      const stored = localStorage.getItem(STORAGE_KEY);\n      if (stored) {\n        const state = JSON.parse(stored) as AuthState;\n        // Check if stored state is less than 1 hour old\n        if (Date.now() - state.timestamp <= 3600000) {\n          logDebug('Found valid tribes_auth_state', { address: state.address, chainId: state.chainId });\n          return state;\n        }\n        localStorage.removeItem(STORAGE_KEY);\n        logDebug('Removed expired tribes_auth_state');\n      }\n\n      // If no valid tribes_auth_state, check tribes_auth and tribes_profile\n      const authData = localStorage.getItem('tribes_auth');\n      const profileData = localStorage.getItem('tribes_profile');\n      \n      if (authData) {\n        const auth = JSON.parse(authData);\n        const profile = profileData ? JSON.parse(profileData) : null;\n        \n        if (auth.isConnected && auth.address) {\n          const state = {\n            address: auth.address,\n            chainId: chainId || 0,\n            profile: profile ? {\n              tokenId: profile.tokenId?.toString() || '0',\n              username: profile.username || '',\n              metadata: {\n                uri: profile.avatarNFT || ''\n              }\n            } : undefined,\n            timestamp: Date.now()\n          };\n          logDebug('Created auth state from tribes_auth/profile', { address: state.address });\n          return state;\n        }\n      }\n      \n      logDebug('No valid auth state found');\n      return null;\n    } catch (err) {\n      console.error('Failed to load stored auth state:', err);\n      return null;\n    }\n  };\n\n  // Save auth state\n  const saveAuthState = (state: AuthState) => {\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify({\n        ...state,\n        timestamp: Date.now()\n      }));\n      logDebug('Saved auth state', { address: state.address, chainId: state.chainId });\n    } catch (err) {\n      console.error('Failed to save auth state:', err);\n    }\n  };\n  \n  // Safe navigation that prevents loops\n  const safeNavigate = (path: string) => {\n    if (location.pathname === path) {\n      logDebug(`Already at ${path}, not navigating`);\n      return;\n    }\n    \n    const currentCount = navigationAttempts.current.get(path) || 0;\n    if (currentCount >= MAX_NAVIGATION_ATTEMPTS) {\n      logDebug(`Too many navigation attempts to ${path}, stopping`);\n      setIsLoading(false);\n      return;\n    }\n    \n    navigationAttempts.current.set(path, currentCount + 1);\n    logDebug(`Navigating to ${path} (attempt ${currentCount + 1})`);\n    navigate(path);\n  };\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      // Reset navigation attempts when pathname changes\n      if (location.pathname !== '/connect') {\n        navigationAttempts.current.delete('/connect');\n      }\n      \n      // Skip check if SDK is still loading or not initialized\n      if (isSdkLoading || !sdk || !isInitialized) {\n        logDebug('SDK not ready, waiting...', { isSdkLoading, hasSdk: !!sdk, isInitialized });\n        return;\n      }\n\n      // Clear any existing SDK init timer\n      if (sdkInitTimer.current) {\n        clearTimeout(sdkInitTimer.current);\n      }\n\n      // Prevent multiple simultaneous profile checks\n      if (profileCheckInProgress.current) {\n        logDebug('Profile check already in progress, skipping');\n        return;\n      }\n\n      try {\n        profileCheckInProgress.current = true;\n        logDebug(`Starting auth check on path: ${location.pathname}, chainId: ${chainId}`);\n\n        // Skip check if we're already on connect, create-profile, or username-setup routes\n        if (['/connect', '/create-profile', '/username-setup'].includes(location.pathname)) {\n          logDebug('On auth/profile page, skipping check');\n          setIsLoading(false);\n          return;\n        }\n\n        // If chain hasn't changed and we're not retrying, don't recheck\n        if (chainId === lastCheckedChainId && retryCount === 0) {\n          logDebug('Chain ID unchanged and not retrying, skipping check');\n          return;\n        }\n\n        setIsLoading(true);\n\n        // Try to get wallet client first\n        let walletClient;\n        try {\n          logDebug('Getting wallet client');\n          walletClient = await getWalletClient(chainId);\n        } catch (error) {\n          logDebug('No wallet connected, redirecting to connect');\n          safeNavigate('/connect');\n          return;\n        }\n\n        const [address] = await walletClient.getAddresses();\n        if (!address) {\n          logDebug('No address in wallet client, redirecting to connect');\n          safeNavigate('/connect');\n          return;\n        }\n        logDebug('Found wallet address', { address });\n\n        // Load stored auth state first\n        const storedState = loadStoredAuthState();\n        if (storedState?.profile && storedState.address === address && storedState.chainId === chainId) {\n          logDebug('Valid stored auth state found, proceeding');\n          // If we have a valid stored state and we're not on profile creation pages, proceed\n          if (location.pathname === '/create-profile' || location.pathname === '/username-setup') {\n            logDebug('On profile creation page with valid profile, redirecting to dashboard');\n            safeNavigate('/dashboard');\n          }\n          setIsLoading(false);\n          return;\n        }\n\n        // Ensure we're on a supported chain\n        if (!chainId) {\n          if (retryCount < MAX_RETRIES) {\n            logDebug('No chainId, retrying', { retryCount });\n            setRetryCount(prev => prev + 1);\n            return;\n          }\n          logDebug('No chainId after max retries, switching network');\n          await switchNetwork(FUSE_EMBER.id);\n          setRetryCount(0);\n          return;\n        }\n\n        setLastCheckedChainId(chainId);\n        logDebug('Checking profile on chain', { chainId, address });\n\n        // Check for profile on current chain\n        const { profile, error } = await getProfileByAddress(address);\n        \n        if (error) {\n          logDebug('Profile check returned error', { code: error.code });\n          \n          // If SDK is not initialized, wait and retry\n          if (error.code === 'SDK_NOT_INITIALIZED' && retryCount < MAX_RETRIES) {\n            logDebug('SDK not initialized, retrying', { retryCount });\n            setRetryCount(prev => prev + 1);\n            // Set a timeout to retry\n            sdkInitTimer.current = setTimeout(() => {\n              setRetryCount(prev => prev + 1);\n            }, 1000);\n            return;\n          }\n        }\n\n        if (error?.code === 'WRONG_CHAIN') {\n          if (retryCount < MAX_RETRIES) {\n            logDebug('Wrong chain, retrying', { retryCount });\n            setRetryCount(prev => prev + 1);\n            return;\n          }\n          logDebug('Wrong chain after max retries, redirecting to connect');\n          safeNavigate('/connect');\n          setRetryCount(0);\n          return;\n        }\n\n        // Reset retry count on successful chain connection\n        setRetryCount(0);\n\n        if (error?.code === 'NO_PROFILE') {\n          logDebug('No profile found, redirecting to create-profile');\n          // Only redirect to create-profile if we're not already there\n          if (location.pathname !== '/create-profile') {\n            safeNavigate('/create-profile');\n          }\n          setIsLoading(false);\n          return;\n        }\n\n        if (!profile) {\n          logDebug('No profile and no specific error, redirecting to connect');\n          safeNavigate('/connect');\n          return;\n        }\n\n        logDebug('Profile found, saving auth state', { username: profile.username });\n        // Save successful auth state\n        saveAuthState({\n          address,\n          chainId,\n          profile: {\n            tokenId: profile.tokenId,\n            username: profile.username,\n            metadata: {\n              uri: profile.metadata?.avatar || ''\n            }\n          },\n          timestamp: Date.now()\n        });\n\n        // If we have a profile and we're on create-profile, redirect to dashboard\n        if (location.pathname === '/create-profile') {\n          logDebug('On profile creation page with valid profile, redirecting to dashboard');\n          safeNavigate('/dashboard');\n        }\n\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        if (retryCount < MAX_RETRIES) {\n          logDebug('Auth check error, retrying', { retryCount });\n          setRetryCount(prev => prev + 1);\n          return;\n        }\n        logDebug('Auth check failed after max retries, redirecting to connect');\n        safeNavigate('/connect');\n        setRetryCount(0);\n      } finally {\n        profileCheckInProgress.current = false;\n        if (retryCount >= MAX_RETRIES) {\n          logDebug('Max retries reached, stopping loading');\n          setIsLoading(false);\n          setRetryCount(0);\n        }\n      }\n    };\n\n    checkAuth();\n\n    // Cleanup timer on unmount\n    return () => {\n      if (sdkInitTimer.current) {\n        clearTimeout(sdkInitTimer.current);\n      }\n    };\n  }, [chainId, location.pathname, isSdkLoading, sdk, isInitialized]);\n\n  if (isLoading || isSdkLoading || !sdk || !isInitialized) {\n    logDebug('Rendering loading state', { isLoading, isSdkLoading, hasSdk: !!sdk, isInitialized });\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  logDebug('Rendering children');\n  return <>{children}</>;\n}; ","// Define CSS variables in :root\nconst cssVariables = `\n:root {\n  /* Blockchain brand colors */\n  --monad-green: #4ADE80;\n  --monad-dark-green: #22c55e;\n  --monad-bg: #0F2416;\n  --monad-bg-rgb: 15, 36, 22;\n  --fuse-blue: #1E88FA;\n  --fuse-gold: #F9C846;\n  --fuse-dark-blue: #0D2B47;\n  --fuse-bg: #0A1F35;\n  --fuse-bg-rgb: 10, 31, 53;\n  --text-primary: #FBFAF9;\n  --text-secondary: rgba(251, 250, 249, 0.7);\n  --text-disabled: rgba(251, 250, 249, 0.5);\n  --success-main: #22c55e;\n  --error-main: #ef4444;\n  \n  /* Set chain-specific colors - default to Monad */\n  --chain-primary: var(--monad-green);\n  --chain-secondary: var(--monad-dark-green);\n  --chain-bg: var(--monad-bg);\n  --chain-bg-rgb: var(--monad-bg-rgb);\n  --chain-accent: rgba(74, 222, 128, 0.2);\n}\n`;\n\n// Add cssVariables to your index.css or inject it into the document head\nconst style = document.createElement('style');\nstyle.textContent = cssVariables;\ndocument.head.appendChild(style);\n\n// Chain IDs\nexport const MONAD_TESTNET_ID = 20143;\nexport const FUSE_EMBER_ID = 1264453517;\n\n// Function to update chain colors based on current chain\nexport const updateChainColors = (chainId: number) => {\n  if (chainId === MONAD_TESTNET_ID) {\n    document.documentElement.style.setProperty('--chain-primary', 'var(--monad-green)');\n    document.documentElement.style.setProperty('--chain-secondary', 'var(--monad-dark-green)');\n    document.documentElement.style.setProperty('--chain-bg', 'var(--monad-bg)');\n    document.documentElement.style.setProperty('--chain-bg-rgb', 'var(--monad-bg-rgb)');\n    document.documentElement.style.setProperty('--chain-accent', 'rgba(74, 222, 128, 0.2)');\n    document.documentElement.style.setProperty('--theme-color', '#4ADE80');\n    // Update theme-color meta tag for browser UI\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', '#4ADE80');\n    }\n  } else if (chainId === FUSE_EMBER_ID) {\n    document.documentElement.style.setProperty('--chain-primary', 'var(--fuse-gold)');\n    document.documentElement.style.setProperty('--chain-secondary', 'var(--fuse-dark-blue)');\n    document.documentElement.style.setProperty('--chain-bg', 'var(--fuse-bg)');\n    document.documentElement.style.setProperty('--chain-bg-rgb', 'var(--fuse-bg-rgb)');\n    document.documentElement.style.setProperty('--chain-accent', 'rgba(249, 200, 70, 0.2)');\n    document.documentElement.style.setProperty('--theme-color', '#F9C846');\n    // Update theme-color meta tag for browser UI\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', '#F9C846');\n    }\n  }\n};\n\nexport const COLORS = {\n  primary: {\n    light: 'var(--chain-primary)',\n    main: 'var(--chain-primary)',\n    dark: 'var(--chain-secondary)',\n    contrastText: 'var(--text-primary)'\n  },\n  secondary: {\n    light: 'var(--text-primary)',\n    main: 'var(--chain-primary)',\n    dark: 'var(--chain-secondary)',\n    contrastText: 'var(--text-primary)'\n  },\n  background: {\n    default: 'var(--chain-bg)',\n    paper: 'var(--chain-bg)',\n    accent: 'var(--chain-primary)'\n  },\n  text: {\n    primary: 'var(--text-primary)',\n    secondary: 'var(--text-secondary)',\n    disabled: 'var(--text-disabled)'\n  },\n  error: {\n    main: 'var(--error-main)',\n    dark: '#dc2626',\n    contrastText: 'var(--text-primary)'\n  },\n  success: {\n    main: 'var(--success-main)',\n    dark: '#16a34a',\n    contrastText: 'var(--text-primary)'\n  },\n  monad: {\n    green: 'var(--monad-green)',\n    darkGreen: 'var(--monad-dark-green)',\n    bg: 'var(--monad-bg)',\n    purple: 'var(--monad-purple)'\n  },\n  fuse: {\n    gold: 'var(--fuse-gold)',\n    blue: 'var(--fuse-blue)',\n    darkBlue: 'var(--fuse-dark-blue)',\n    bg: 'var(--fuse-bg)'\n  }\n}\n\nexport const FONTS = {\n  primary: 'Inter, sans-serif',\n  weights: {\n    regular: 400,\n    medium: 500,\n    semibold: 600,\n    bold: 700\n  }\n}\n\nexport const SPACING = {\n  xs: '0.5rem',\n  sm: '0.75rem',\n  md: '1rem',\n  lg: '1.5rem',\n  xl: '2rem',\n  '2xl': '3rem'\n}\n\nexport const BORDER_RADIUS = {\n  sm: '0.375rem',\n  md: '0.5rem',\n  lg: '0.75rem',\n  full: '9999px'\n}\n\nexport const TRANSITIONS = {\n  default: 'all 0.2s ease-in-out'\n}\n\nexport const SHADOWS = {\n  sm: '0 1px 2px 0 rgb(0 0 0 / 0.05)',\n  md: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',\n  lg: '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)',\n  green: '0 4px 14px 0 rgba(74, 222, 128, 0.3)',\n  gold: '0 4px 14px 0 rgba(249, 200, 70, 0.3)'\n} ","import { getIndexerService } from '../services';\nimport { PostsService } from '../services/posts.service';\n// import { DBService } from '../services/db.service';\n// import { QueueService } from '../services/queue.service';\nimport { blockchain } from '../utils/blockchainUtils';\nimport { TribesSDK } from '../services/TribesSDK';\nimport { MONAD_TESTNET } from '../constants/networks';\n\nconst INIT_TIMEOUT = 30000; // 30 seconds timeout (increased from 10 seconds)\n\n/**\n * Initialize the application services\n * This should be called once when the app starts\n */\nexport async function initializeApp(): Promise<void> {\n  // Check if running on server\n  const isServer = typeof window === 'undefined';\n  if (isServer) {\n    console.log('Initializing server-side services');\n    return;\n  }\n\n  // Create a promise that rejects after timeout\n  const timeoutPromise = new Promise((_, reject) => {\n    setTimeout(() => reject(new Error('Initialization timed out')), INIT_TIMEOUT);\n  });\n\n  try {\n    // Race between initialization and timeout\n    await Promise.race([\n      initializeServices(),\n      timeoutPromise\n    ]);\n  } catch (error) {\n    console.error('App initialization failed:', error);\n    // Initialize with fallback mode instead of throwing error\n    await initializeFallbackMode();\n  }\n}\n\n/**\n * Initialize in fallback mode when main initialization fails\n */\nasync function initializeFallbackMode(): Promise<void> {\n  console.log('Initializing in fallback mode...');\n  \n  // Initialize with default chain ID\n  const chainId = MONAD_TESTNET.id;\n  console.log('Using default chain ID:', chainId);\n  \n  // Initialize minimum required services \n  const indexerService = getIndexerService(chainId);\n  \n  // Initialize TribesSDK in fallback mode\n  try {\n    const tribesSDK = new TribesSDK(chainId);\n    await tribesSDK.initialize().catch(err => {\n      console.warn('Failed to initialize TribesSDK in fallback mode', err);\n    });\n  } catch (err) {\n    console.warn('Error creating TribesSDK in fallback mode', err);\n  }\n  \n  // Initialize PostsService\n  PostsService.getInstance();\n  \n  console.log('Fallback initialization complete');\n}\n\nasync function initializeServices(): Promise<void> {\n  try {\n    console.log('Initializing client-side services');\n    \n    // Initialize with default chain ID first in case blockchain connection fails\n    let chainId: number = MONAD_TESTNET.id;\n    let indexerService = getIndexerService(chainId);\n    console.log('[IndexerService] Pre-initializing with default chainId:', chainId);\n    \n    // First, try to connect to blockchain\n    try {\n      console.log('Connecting to blockchain...');\n      await blockchain.connect();\n      const newChainId = await blockchain.getChainId();\n      console.log('Successfully connected to blockchain with chainId:', newChainId);\n      \n      // Update indexer with actual chain ID\n      chainId = newChainId;\n      indexerService = getIndexerService(chainId);\n      console.log('[IndexerService] Initializing with chainId:', chainId);\n      \n      // Initialize TribesSDK\n      const tribesSDK = new TribesSDK(chainId);\n      // Don't await the initialization to prevent timeouts\n      tribesSDK.initialize().catch(err => {\n        console.warn('TribesSDK initialization had an error, but app will continue:', err);\n      });\n      console.log('[TribesSDK] Initialization started with chainId:', chainId);\n      \n      // Initialize PostsService\n      const postsService = PostsService.getInstance();\n      // No need to initialize PostsService as it doesn't have an initialize method\n      console.log('[PostsService] Initialized with chainId:', chainId);\n      \n      // Start indexing in the background\n      setTimeout(async () => {\n        try {\n          const address = await blockchain.getAddress();\n          if (address) {\n            indexerService.setConnectedUser(address);\n          }\n        } catch (err) {\n          console.warn('Failed to set connected user in indexer:', err);\n        }\n      }, 2000); // Delay start to ensure app is fully loaded\n    } catch (error) {\n      console.warn('Failed to connect to blockchain. Some features may not work:', error);\n      // Continue with initialization even if blockchain connection fails\n      // We already initialized with default chain ID above\n    }\n    \n    console.log('App services initialized successfully');\n  } catch (error) {\n    console.error('Error initializing app services:', error);\n    throw error;\n  }\n}\n\n/**\n * Call this function to manually refresh data\n */\nexport async function refreshData(): Promise<void> {\n  const isServer = typeof window === 'undefined';\n  if (isServer) return;\n  \n  try {\n    const indexerService = getIndexerService();\n    const postsService = PostsService.getInstance();\n    \n    // Refresh connected user data\n    const address = await blockchain.getAddress();\n    if (address) {\n      indexerService.setConnectedUser(address);\n    }\n    \n    console.log('Data refresh initiated');\n  } catch (error) {\n    console.error('Error refreshing data:', error);\n  }\n} ","import React from 'react';\nimport { Loader } from 'lucide-react';\n\nconst LoadingScreen: React.FC = () => {\n  return (\n    <div className=\"fixed inset-0 bg-black flex flex-col items-center justify-center\">\n      <div className=\"animate-spin mb-4\">\n        <Loader size={48} className=\"text-monad-purple\" />\n      </div>\n      <h2 className=\"text-xl font-medium text-white\">Loading...</h2>\n    </div>\n  );\n};\n\nexport default LoadingScreen; ","import React, { useEffect, useState, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'\nimport { Layout } from './components/Layout'\nimport { RootRoute } from './components/RootRoute'\nimport { WalletConnect } from './components/WalletConnect'\nimport { UsernameAvatarSetup } from './screens/UsernameAvatarSetup'\nimport { Dashboard } from './screens/Dashboard'\nimport { Profile } from './screens/Profile'\nimport { Tribes } from './screens/Tribes'\nimport { TribeDetails } from './screens/TribeDetails'\nimport { CreateTribe } from './screens/CreateTribe'\nimport { Onboarding } from './screens/Onboarding'\nimport { TopicDetails } from './screens/TopicDetails'\nimport { AuthGuard } from './components/AuthGuard'\nimport { useChainId } from 'wagmi'\nimport { updateChainColors } from './constants/theme'\nimport { initializeApp } from './utils/initApp'\nimport { TribesSDK } from './services/TribesSDK'\nimport { TribesProvider } from './contexts/TribesContext'\nimport LoadingScreen from './components/LoadingScreen'\n\n// Lazy load routes\nconst DashboardLazy = lazy(() => import('./screens/Dashboard'));\n// const CreateProfile = lazy(() => import('./screens/CreateProfile'))\n\nconst App: React.FC = () => {\n  const chainId = useChainId()\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isInitializing, setIsInitializing] = useState(true);\n  const [sdk, setSdk] = useState<TribesSDK | null>(null);\n\n  // Update theme colors when chain changes\n  useEffect(() => {\n    if (chainId) {\n      updateChainColors(chainId)\n    }\n  }, [chainId])\n\n  useEffect(() => {\n    // Initialize app services\n    const init = async () => {\n      try {\n        setIsInitializing(true);\n        // Initialize app services\n        await initializeApp();\n\n        // Initialize TribesSDK\n        const tribesSDK = new TribesSDK(chainId);\n        await tribesSDK.initialize();\n        setSdk(tribesSDK);\n\n        setIsInitialized(true);\n      } catch (error) {\n        console.error('Failed to initialize app:', error);\n        // Even if initialization fails, we should still set isInitialized\n        // to true so the app can render and show appropriate error states\n        setIsInitialized(true);\n      } finally {\n        setIsInitializing(false);\n      }\n    };\n\n    init();\n  }, [chainId]);\n\n  useEffect(() => {\n    console.log('App mounted');\n    \n    // Check for connection issues\n    window.addEventListener('error', (event) => {\n      console.error('Global error:', event.error);\n    });\n    \n    return () => {\n      window.removeEventListener('error', () => {});\n    };\n  }, []);\n\n  if (isInitializing) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <TribesProvider sdk={sdk} isInitialized={isInitialized}>\n      <Router>\n        <Suspense fallback={<LoadingScreen />}>\n          <Routes>\n            {/* Public Routes */}\n            <Route path=\"/\" element={<RootRoute />} />\n            <Route path=\"/connect\" element={<WalletConnect />} />\n            <Route path=\"/create-profile\" element={<UsernameAvatarSetup />} />\n            <Route path=\"/username-setup\" element={<UsernameAvatarSetup />} />\n            \n            {/* Protected Routes */}\n            <Route element={<AuthGuard><Layout /></AuthGuard>}>\n              <Route path=\"/dashboard\" element={<DashboardLazy />} />\n              <Route path=\"/profile\" element={<Profile />} />\n              <Route path=\"/tribes\" element={<Tribes />} />\n              <Route path=\"/tribes/create\" element={<CreateTribe />} />\n              <Route path=\"/tribes/:tribeId\" element={<TribeDetails />} />\n              <Route path=\"/tribes/:tribeId/topics/:topicId\" element={<TopicDetails />} />\n              <Route path=\"/onboarding\" element={<Onboarding />} />\n            </Route>\n\n            {/* Catch all redirect */}\n            <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\n          </Routes>\n        </Suspense>\n      </Router>\n    </TribesProvider>\n  )\n}\n\nexport default App","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { MONAD_TESTNET } from '../../constants/networks';\n\ninterface ChainState {\n  chainId: number | undefined;\n  isCorrectNetwork: boolean;\n  isChainSwitching: boolean;\n  lastValidChainId: number | undefined;\n}\n\nconst initialState: ChainState = {\n  chainId: undefined,\n  isCorrectNetwork: false,\n  isChainSwitching: false,\n  lastValidChainId: MONAD_TESTNET.id\n};\n\nconst chainSlice = createSlice({\n  name: 'chain',\n  initialState,\n  reducers: {\n    setChainId: (state, action: PayloadAction<number | undefined>) => {\n      state.chainId = action.payload;\n    },\n    setIsCorrectNetwork: (state, action: PayloadAction<boolean>) => {\n      state.isCorrectNetwork = action.payload;\n    },\n    setIsChainSwitching: (state, action: PayloadAction<boolean>) => {\n      state.isChainSwitching = action.payload;\n    },\n    setLastValidChainId: (state, action: PayloadAction<number>) => {\n      state.lastValidChainId = action.payload;\n    }\n  }\n});\n\nexport const { \n  setChainId, \n  setIsCorrectNetwork, \n  setIsChainSwitching,\n  setLastValidChainId \n} = chainSlice.actions;\n\nexport default chainSlice.reducer; ","import { configureStore } from '@reduxjs/toolkit';\nimport chainReducer from './slices/chainSlice';\nimport postsReducer from './slices/postsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    chain: chainReducer,\n    posts: postsReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch; ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\nimport './styles/globals.css';\n\n// Import Redux provider\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\n// Import notification context\nimport { NotificationProvider } from './contexts/NotificationContext';\nimport { WagmiProvider } from 'wagmi';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { http, createConfig } from 'wagmi';\nimport { \n  MONAD_TESTNET, \n  FUSE_EMBER, \n  CHILIZ_MAINNET, \n  MANTA_TESTNET, \n  ARBITRUM_SEPOLIA_TESTNET,\n  SOMNIA_TESTNET \n} from './constants/networks';\n\n// Create a new query client for react-query (required by wagmi v2)\nconst queryClient = new QueryClient();\n\n// Create wagmi config with the supported chains\n// Note: Using explicit definition of chains to avoid type issues\nconst config = createConfig({\n  chains: [\n    MONAD_TESTNET, \n    FUSE_EMBER, \n    CHILIZ_MAINNET, \n    MANTA_TESTNET, \n    ARBITRUM_SEPOLIA_TESTNET,\n    SOMNIA_TESTNET\n  ] as const,\n  transports: {\n    [MONAD_TESTNET.id]: http(MONAD_TESTNET.rpcUrls.default.http[0]),\n    [FUSE_EMBER.id]: http(FUSE_EMBER.rpcUrls.default.http[0]),\n    [CHILIZ_MAINNET.id]: http(CHILIZ_MAINNET.rpcUrls.default.http[0]),\n    [MANTA_TESTNET.id]: http(MANTA_TESTNET.rpcUrls.default.http[0]),\n    [ARBITRUM_SEPOLIA_TESTNET.id]: http(ARBITRUM_SEPOLIA_TESTNET.rpcUrls.default.http[0]),\n    [SOMNIA_TESTNET.id]: http(SOMNIA_TESTNET.rpcUrls.default.http[0]),\n  },\n});\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* Add WagmiProvider with the config */}\n      <WagmiProvider config={config}>\n        {/* React Query is required by wagmi v2 */}\n        <QueryClientProvider client={queryClient}>\n          {/* Notification provider */}\n          <NotificationProvider>\n            <App />\n          </NotificationProvider>\n        </QueryClientProvider>\n      </WagmiProvider>\n    </Provider>\n  </React.StrictMode>\n);\n\n// Comment out service worker registration if it exists\n// if ('serviceWorker' in navigator) {\n//   navigator.serviceWorker.register('/service-worker.js');\n// }\n"],"file":"assets/main-4GSVU9O0.js"}